
Prodzektv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070d0  080070d0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  080070d0  080070d0  000170d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d8  080070d8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070dc  080070dc  000170dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080070e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000003c  0800711c  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000dc  080071bc  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000908  2000017c  0800725c  0002017c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a84  0800725c  00020a84  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019360  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003843  00000000  00000000  0003954f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000014c8  00000000  00000000  0003cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000100f  00000000  00000000  0003e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002912e  00000000  00000000  0003f26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ad82  00000000  00000000  0006839d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fdcbc  00000000  00000000  0008311f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000056ac  00000000  00000000  00180ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00186488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000017c 	.word	0x2000017c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080070a0 	.word	0x080070a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000180 	.word	0x20000180
 8000204:	080070a0 	.word	0x080070a0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_ADC1_Init+0x98>)
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <MX_ADC1_Init+0x9c>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_ADC1_Init+0x98>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_ADC1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_ADC1_Init+0x98>)
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <MX_ADC1_Init+0xa0>)
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_ADC1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <MX_ADC1_Init+0x98>)
 8000550:	2201      	movs	r2, #1
 8000552:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_ADC1_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_ADC1_Init+0x98>)
 800055e:	2201      	movs	r2, #1
 8000560:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <MX_ADC1_Init+0x98>)
 8000564:	f001 f9d6 	bl	8001914 <HAL_ADC_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 fb83 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000576:	2301      	movs	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800057a:	2301      	movs	r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_ADC1_Init+0x98>)
 8000584:	f001 fa0a 	bl	800199c <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800058e:	f000 fb73 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000198 	.word	0x20000198
 80005a0:	40012000 	.word	0x40012000
 80005a4:	0f000001 	.word	0x0f000001

080005a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <HAL_ADC_MspInit+0x74>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d123      	bne.n	8000612 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d4:	6453      	str	r3, [r2, #68]	; 0x44
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_ADC_MspInit+0x78>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005fa:	2301      	movs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	2303      	movs	r3, #3
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4805      	ldr	r0, [pc, #20]	; (8000624 <HAL_ADC_MspInit+0x7c>)
 800060e:	f002 f8df 	bl	80027d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40012000 	.word	0x40012000
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_ETH_Init+0x84>)
 800062e:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <MX_ETH_Init+0x88>)
 8000630:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ETH_Init+0x8c>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000640:	22e1      	movs	r2, #225	; 0xe1
 8000642:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_ETH_Init+0x8c>)
 800064c:	2200      	movs	r2, #0
 800064e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ETH_Init+0x8c>)
 8000652:	2200      	movs	r2, #0
 8000654:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_ETH_Init+0x84>)
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <MX_ETH_Init+0x8c>)
 800065a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_ETH_Init+0x84>)
 800065e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000662:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_ETH_Init+0x84>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_ETH_Init+0x90>)
 8000668:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_ETH_Init+0x84>)
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_ETH_Init+0x94>)
 800066e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_ETH_Init+0x84>)
 8000672:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000676:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_ETH_Init+0x84>)
 800067a:	f001 fd83 	bl	8002184 <HAL_ETH_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000684:	f000 faf8 	bl	8000c78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000688:	2238      	movs	r2, #56	; 0x38
 800068a:	2100      	movs	r1, #0
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_ETH_Init+0x98>)
 800068e:	f006 fcdb 	bl	8007048 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_ETH_Init+0x98>)
 8000694:	2221      	movs	r2, #33	; 0x21
 8000696:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_ETH_Init+0x98>)
 800069a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800069e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <MX_ETH_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000218 	.word	0x20000218
 80006b0:	40028000 	.word	0x40028000
 80006b4:	200002c8 	.word	0x200002c8
 80006b8:	200000dc 	.word	0x200000dc
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	200001e0 	.word	0x200001e0

080006c4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08e      	sub	sp, #56	; 0x38
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a4e      	ldr	r2, [pc, #312]	; (800081c <HAL_ETH_MspInit+0x158>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	f040 8096 	bne.w	8000814 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006e8:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a4c      	ldr	r2, [pc, #304]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 80006ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
 80006f4:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fc:	623b      	str	r3, [r7, #32]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	4b47      	ldr	r3, [pc, #284]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a46      	ldr	r2, [pc, #280]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	4b41      	ldr	r3, [pc, #260]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a40      	ldr	r2, [pc, #256]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800071e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
 8000724:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a3a      	ldr	r2, [pc, #232]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b38      	ldr	r3, [pc, #224]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4a34      	ldr	r2, [pc, #208]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6313      	str	r3, [r2, #48]	; 0x30
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000766:	f043 0302 	orr.w	r3, r3, #2
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a28      	ldr	r2, [pc, #160]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 800077e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <HAL_ETH_MspInit+0x15c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	481e      	ldr	r0, [pc, #120]	; (8000824 <HAL_ETH_MspInit+0x160>)
 80007ac:	f002 f810 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007b0:	2386      	movs	r3, #134	; 0x86
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4817      	ldr	r0, [pc, #92]	; (8000828 <HAL_ETH_MspInit+0x164>)
 80007cc:	f002 f800 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e2:	230b      	movs	r3, #11
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	480f      	ldr	r0, [pc, #60]	; (800082c <HAL_ETH_MspInit+0x168>)
 80007ee:	f001 ffef 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	4619      	mov	r1, r3
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_ETH_MspInit+0x16c>)
 8000810:	f001 ffde 	bl	80027d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3738      	adds	r7, #56	; 0x38
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40028000 	.word	0x40028000
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400
 8000830:	40021800 	.word	0x40021800

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b58      	ldr	r3, [pc, #352]	; (80009ac <MX_GPIO_Init+0x178>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a57      	ldr	r2, [pc, #348]	; (80009ac <MX_GPIO_Init+0x178>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b55      	ldr	r3, [pc, #340]	; (80009ac <MX_GPIO_Init+0x178>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b52      	ldr	r3, [pc, #328]	; (80009ac <MX_GPIO_Init+0x178>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a51      	ldr	r2, [pc, #324]	; (80009ac <MX_GPIO_Init+0x178>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_GPIO_Init+0x178>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_GPIO_Init+0x178>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a4b      	ldr	r2, [pc, #300]	; (80009ac <MX_GPIO_Init+0x178>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_GPIO_Init+0x178>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_GPIO_Init+0x178>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <MX_GPIO_Init+0x178>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_GPIO_Init+0x178>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x178>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a3f      	ldr	r2, [pc, #252]	; (80009ac <MX_GPIO_Init+0x178>)
 80008b0:	f043 0320 	orr.w	r3, r3, #32
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_GPIO_Init+0x178>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0320 	and.w	r3, r3, #32
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_GPIO_Init+0x178>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a39      	ldr	r2, [pc, #228]	; (80009ac <MX_GPIO_Init+0x178>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_GPIO_Init+0x178>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <MX_GPIO_Init+0x178>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a33      	ldr	r2, [pc, #204]	; (80009ac <MX_GPIO_Init+0x178>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0x178>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <MX_GPIO_Init+0x17c>)
 80008fa:	f002 f915 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	482c      	ldr	r0, [pc, #176]	; (80009b4 <MX_GPIO_Init+0x180>)
 8000904:	f002 f910 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4826      	ldr	r0, [pc, #152]	; (80009b8 <MX_GPIO_Init+0x184>)
 8000920:	f001 ff56 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	; 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481c      	ldr	r0, [pc, #112]	; (80009b0 <MX_GPIO_Init+0x17c>)
 800093e:	f001 ff47 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tach_Pin;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Tach_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4818      	ldr	r0, [pc, #96]	; (80009bc <MX_GPIO_Init+0x188>)
 800095a:	f001 ff39 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095e:	2340      	movs	r3, #64	; 0x40
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x180>)
 8000976:	f001 ff2b 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_GPIO_Init+0x180>)
 800098e:	f001 ff1f 	bl	80027d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f001 fb2b 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800099c:	2028      	movs	r0, #40	; 0x28
 800099e:	f001 fb44 	bl	800202a <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40021800 	.word	0x40021800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40021400 	.word	0x40021400

080009c0 <HAL_TIM_IC_CaptureCallback>:
// pomiar z tachometru //



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a32      	ldr	r2, [pc, #200]	; (8000a94 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d15c      	bne.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xca>
	{
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2101      	movs	r1, #1
 80009d4:	4830      	ldr	r0, [pc, #192]	; (8000a98 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80009d6:	f002 f8a7 	bl	8002b28 <HAL_GPIO_WritePin>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7f1b      	ldrb	r3, [r3, #28]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d153      	bne.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xca>
				{
					if (Is_First_Captured==0) // if the first rising edge is not captured
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10a      	bne.n	8000a00 <HAL_TIM_IC_CaptureCallback+0x40>
					{
						IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80009ea:	2100      	movs	r1, #0
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f004 fa59 	bl	8004ea4 <HAL_TIM_ReadCapturedValue>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80009f6:	6013      	str	r3, [r2, #0]
						Is_First_Captured = 1;  // set the first captured as true
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
						Is_First_Captured = 0; // set it back to false
				}
			}
	}
}
 80009fe:	e044      	b.n	8000a8a <HAL_TIM_IC_CaptureCallback+0xca>
						IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000a00:	2100      	movs	r1, #0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f004 fa4e 	bl	8004ea4 <HAL_TIM_ReadCapturedValue>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a0c:	6013      	str	r3, [r2, #0]
						if (IC_Val2 > IC_Val1)
 8000a0e:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d907      	bls.n	8000a2a <HAL_TIM_IC_CaptureCallback+0x6a>
							Difference = IC_Val2-IC_Val1;
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e00d      	b.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x86>
						else if (IC_Val1 > IC_Val2)
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d907      	bls.n	8000a46 <HAL_TIM_IC_CaptureCallback+0x86>
							Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a44:	6013      	str	r3, [r2, #0]
						float refClock = 72000000/(72);
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_TIM_IC_CaptureCallback+0xec>)
 8000a48:	60fb      	str	r3, [r7, #12]
						frequency = refClock/Difference;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a56:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a62:	ee17 2a90 	vmov	r2, s15
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000a68:	601a      	str	r2, [r3, #0]
						rpm = frequency*30;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000a7a:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
						Is_First_Captured = 0; // set it back to false
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002ec 	.word	0x200002ec
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	200002e4 	.word	0x200002e4
 8000aa0:	200002d8 	.word	0x200002d8
 8000aa4:	200002dc 	.word	0x200002dc
 8000aa8:	200002e0 	.word	0x200002e0
 8000aac:	49742400 	.word	0x49742400
 8000ab0:	200002e8 	.word	0x200002e8
 8000ab4:	200002d0 	.word	0x200002d0

08000ab8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /// Oblcizenie sygnału sterującego.
  if(htim == &htim4)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d12b      	bne.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
	  	  Duty = PID_GetOutput(&hpid1, rpm_ref, rpm);
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	ee07 3a90 	vmov	s15, r3
 8000ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	ee07 3a10 	vmov	s14, r3
 8000ae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000aea:	eef0 0a47 	vmov.f32	s1, s14
 8000aee:	eeb0 0a67 	vmov.f32	s0, s15
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000af4:	f000 f8c5 	bl	8000c82 <PID_GetOutput>
 8000af8:	eef0 7a40 	vmov.f32	s15, s0
 8000afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b00:	ee17 2a90 	vmov	r2, s15
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b06:	601a      	str	r2, [r3, #0]
	  	  e = rpm_ref - rpm;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000b1c:	edc3 7a00 	vstr	s15, [r3]
//	  	  HAL_ADC_Start(&hadc1);
//	  	  HAL_ADC_PollForConversion(&hadc1, 20);
//	  	  rpm= HAL_ADC_GetValue(&hadc1);

  }
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000384 	.word	0x20000384
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000338 	.word	0x20000338
 8000b34:	20000004 	.word	0x20000004
 8000b38:	200002d0 	.word	0x200002d0
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200002d4 	.word	0x200002d4

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fe63 	bl	8001812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f82c 	bl	8000ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f7ff fe70 	bl	8000834 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b54:	f7ff fd68 	bl	8000628 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b58:	f000 fc8c 	bl	8001474 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b5c:	f000 fd88 	bl	8001670 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000b60:	f000 f9d4 	bl	8000f0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b64:	f000 fa26 	bl	8000fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b68:	f000 faa2 	bl	80010b0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000b6c:	f000 faf0 	bl	8001150 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000b70:	f000 fb24 	bl	80011bc <MX_TIM7_Init>
  MX_ADC1_Init();
 8000b74:	f7ff fcc6 	bl	8000504 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000b78:	f000 fc4c 	bl	8001414 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Inicjacja timerów //
  HAL_TIM_Base_Start_IT(&htim2);
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <main+0x58>)
 8000b7e:	f003 fa7b 	bl	8004078 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000b82:	2100      	movs	r1, #0
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <main+0x58>)
 8000b86:	f003 fca3 	bl	80044d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <main+0x5c>)
 8000b8e:	f003 fb4d 	bl	800422c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <main+0x60>)
 8000b94:	f003 fa70 	bl	8004078 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <main+0x54>
 8000b9a:	bf00      	nop
 8000b9c:	200002ec 	.word	0x200002ec
 8000ba0:	20000338 	.word	0x20000338
 8000ba4:	20000384 	.word	0x20000384

08000ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2230      	movs	r2, #48	; 0x30
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f006 fa46 	bl	8007048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bcc:	f002 f932 	bl	8002e34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a26      	ldr	r2, [pc, #152]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <SystemClock_Config+0xc8>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf0:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SystemClock_Config+0xcc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c04:	2301      	movs	r3, #1
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c1c:	2348      	movs	r3, #72	; 0x48
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c24:	2303      	movs	r3, #3
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 0320 	add.w	r3, r7, #32
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 f911 	bl	8002e54 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c38:	f000 f81e 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2102      	movs	r1, #2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fb9f 	bl	800339c <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c64:	f000 f808 	bl	8000c78 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>

08000c82 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}

float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b089      	sub	sp, #36	; 0x24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c8e:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8000c92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9e:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	edd3 6a01 	vldr	s13, [r3, #4]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000cb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ce0:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ce4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	ed93 7a00 	vldr	s14, [r3]
 8000d24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d40:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	dd03      	ble.n	8000d60 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e00f      	b.n	8000d80 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	d503      	bpl.n	8000d7c <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e001      	b.n	8000d80 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8000d80:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d84:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d88:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d013      	beq.n	8000dba <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	ee07 3a90 	vmov	s15, r3
}
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <HAL_MspInit+0x44>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_MspInit+0x44>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_MspInit+0x44>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x44>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x44>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x44>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 fd12 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM2_IRQHandler+0x10>)
 8000e72:	f003 fc7d 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200002ec 	.word	0x200002ec

08000e80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM3_IRQHandler+0x10>)
 8000e86:	f003 fc73 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000338 	.word	0x20000338

08000e94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM4_IRQHandler+0x10>)
 8000e9a:	f003 fc69 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000384 	.word	0x20000384

08000ea8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <USART3_IRQHandler+0x10>)
 8000eae:	f004 fe3d 	bl	8005b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200004f0 	.word	0x200004f0

08000ebc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tach_Pin);
 8000ec0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ec4:	f001 fe4a 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ec8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ecc:	f001 fe46 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM7_IRQHandler+0x10>)
 8000eda:	f003 fc49 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000041c 	.word	0x2000041c

08000ee8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f34:	2248      	movs	r2, #72	; 0x48
 8000f36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f54:	f003 fa64 	bl	8004420 <HAL_TIM_IC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f5e:	f7ff fe8b 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f72:	f004 fce1 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000f7c:	f7ff fe7c 	bl	8000c78 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_TIM2_Init+0xa4>)
 8000f98:	f003 fd09 	bl	80049ae <HAL_TIM_IC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fa2:	f7ff fe69 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002ec 	.word	0x200002ec

08000fb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8000fe8:	4a30      	ldr	r2, [pc, #192]	; (80010ac <MX_TIM3_Init+0xf8>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8000fee:	221b      	movs	r2, #27
 8000ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8000ffa:	2263      	movs	r2, #99	; 0x63
 8000ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <MX_TIM3_Init+0xf4>)
 800100c:	f002 ffdc 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001016:	f7ff fe2f 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001024:	4619      	mov	r1, r3
 8001026:	4820      	ldr	r0, [pc, #128]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001028:	f003 fe72 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001032:	f7ff fe21 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001038:	f003 f896 	bl	8004168 <HAL_TIM_PWM_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001042:	f7ff fe19 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001056:	f004 fc6f 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001060:	f7ff fe0a 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 39;
 8001068:	2327      	movs	r3, #39	; 0x27
 800106a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	4619      	mov	r1, r3
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <MX_TIM3_Init+0xf4>)
 800107c:	f003 fd34 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001086:	f7ff fdf7 	bl	8000c78 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_TIM3_Init+0xf4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	699a      	ldr	r2, [r3, #24]
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <MX_TIM3_Init+0xf4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0208 	bic.w	r2, r2, #8
 8001098:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM3_Init+0xf4>)
 800109c:	f000 f982 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000338 	.word	0x20000338
 80010ac:	40000400 	.word	0x40000400

080010b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_TIM4_Init+0x98>)
 80010d0:	4a1e      	ldr	r2, [pc, #120]	; (800114c <MX_TIM4_Init+0x9c>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM4_Init+0x98>)
 80010d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM4_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_TIM4_Init+0x98>)
 80010e4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_TIM4_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_TIM4_Init+0x98>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <MX_TIM4_Init+0x98>)
 80010f8:	f002 ff66 	bl	8003fc8 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001102:	f7ff fdb9 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_TIM4_Init+0x98>)
 8001114:	f003 fdfc 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800111e:	f7ff fdab 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM4_Init+0x98>)
 8001130:	f004 fc02 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800113a:	f7ff fd9d 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000384 	.word	0x20000384
 800114c:	40000800 	.word	0x40000800

08001150 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_TIM6_Init+0x64>)
 8001162:	4a15      	ldr	r2, [pc, #84]	; (80011b8 <MX_TIM6_Init+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_TIM6_Init+0x64>)
 8001168:	2247      	movs	r2, #71	; 0x47
 800116a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_TIM6_Init+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_TIM6_Init+0x64>)
 8001174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001178:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_TIM6_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM6_Init+0x64>)
 8001182:	f002 ff21 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800118c:	f7ff fd74 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM6_Init+0x64>)
 800119e:	f004 fbcb 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f7ff fd66 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003d0 	.word	0x200003d0
 80011b8:	40001000 	.word	0x40001000

080011bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM7_Init+0x68>)
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <MX_TIM7_Init+0x6c>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_TIM7_Init+0x68>)
 80011d4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_TIM7_Init+0x68>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_TIM7_Init+0x68>)
 80011e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_TIM7_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM7_Init+0x68>)
 80011f0:	f002 feea 	bl	8003fc8 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80011fa:	f7ff fd3d 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM7_Init+0x68>)
 800120c:	f004 fb94 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001216:	f7ff fd2f 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000041c 	.word	0x2000041c
 8001228:	40001400 	.word	0x40001400

0800122c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124c:	d12f      	bne.n	80012ae <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_TIM_IC_MspInit+0x8c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800127e:	2320      	movs	r3, #32
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <HAL_TIM_IC_MspInit+0x90>)
 800129a:	f001 fa99 	bl	80027d0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	201c      	movs	r0, #28
 80012a4:	f000 fea5 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012a8:	201c      	movs	r0, #28
 80012aa:	f000 febe 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000

080012c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a30      	ldr	r2, [pc, #192]	; (8001390 <HAL_TIM_Base_MspInit+0xd0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d114      	bne.n	80012fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201d      	movs	r0, #29
 80012f0:	f000 fe7f 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f4:	201d      	movs	r0, #29
 80012f6:	f000 fe98 	bl	800202a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80012fa:	e044      	b.n	8001386 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_TIM_Base_MspInit+0xd8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d114      	bne.n	8001330 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a22      	ldr	r2, [pc, #136]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201e      	movs	r0, #30
 8001324:	f000 fe65 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001328:	201e      	movs	r0, #30
 800132a:	f000 fe7e 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 800132e:	e02a      	b.n	8001386 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_TIM_Base_MspInit+0xdc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10c      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	e018      	b.n	8001386 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_TIM_Base_MspInit+0xe0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d113      	bne.n	8001386 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 8001364:	f043 0320 	orr.w	r3, r3, #32
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_TIM_Base_MspInit+0xd4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0320 	and.w	r3, r3, #32
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2037      	movs	r0, #55	; 0x37
 800137c:	f000 fe39 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001380:	2037      	movs	r0, #55	; 0x37
 8001382:	f000 fe52 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40000400 	.word	0x40000400
 8001394:	40023800 	.word	0x40023800
 8001398:	40000800 	.word	0x40000800
 800139c:	40001000 	.word	0x40001000
 80013a0:	40001400 	.word	0x40001400

080013a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_TIM_MspPostInit+0x64>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d11b      	bne.n	80013fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_TIM_MspPostInit+0x68>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_TIM_MspPostInit+0x68>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_TIM_MspPostInit+0x68>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <HAL_TIM_MspPostInit+0x6c>)
 80013fa:	f001 f9e9 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40000400 	.word	0x40000400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_USART2_UART_Init+0x58>)
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <MX_USART2_UART_Init+0x5c>)
 800141c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_USART2_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART2_UART_Init+0x58>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART2_UART_Init+0x58>)
 8001458:	f004 fb1a 	bl	8005a90 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001462:	f7ff fc09 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000468 	.word	0x20000468
 8001470:	40004400 	.word	0x40004400

08001474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USART3_UART_Init+0x58>)
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <MX_USART3_UART_Init+0x5c>)
 800147c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_USART3_UART_Init+0x58>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART3_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_USART3_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART3_UART_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART3_UART_Init+0x58>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART3_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART3_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART3_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART3_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART3_UART_Init+0x58>)
 80014b8:	f004 faea 	bl	8005a90 <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80014c2:	f7ff fbd9 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200004f0 	.word	0x200004f0
 80014d0:	40004800 	.word	0x40004800

080014d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0ae      	sub	sp, #184	; 0xb8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0320 	add.w	r3, r7, #32
 80014f0:	2284      	movs	r2, #132	; 0x84
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fda7 	bl	8007048 <memset>
  if(uartHandle->Instance==USART2)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a57      	ldr	r2, [pc, #348]	; (800165c <HAL_UART_MspInit+0x188>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d15c      	bne.n	80015be <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f969 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800151c:	f7ff fbac 	bl	8000c78 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <HAL_UART_MspInit+0x18c>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_UART_MspInit+0x18c>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_UART_MspInit+0x18c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b40      	ldr	r3, [pc, #256]	; (8001660 <HAL_UART_MspInit+0x18c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001568:	2308      	movs	r3, #8
 800156a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001580:	2307      	movs	r3, #7
 8001582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800158a:	4619      	mov	r1, r3
 800158c:	4835      	ldr	r0, [pc, #212]	; (8001664 <HAL_UART_MspInit+0x190>)
 800158e:	f001 f91f 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001592:	2320      	movs	r3, #32
 8001594:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015aa:	2307      	movs	r3, #7
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015b4:	4619      	mov	r1, r3
 80015b6:	482c      	ldr	r0, [pc, #176]	; (8001668 <HAL_UART_MspInit+0x194>)
 80015b8:	f001 f90a 	bl	80027d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015bc:	e049      	b.n	8001652 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2a      	ldr	r2, [pc, #168]	; (800166c <HAL_UART_MspInit+0x198>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d144      	bne.n	8001652 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 f906 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_UART_MspInit+0x112>
      Error_Handler();
 80015e2:	f7ff fb49 	bl	8000c78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <HAL_UART_MspInit+0x18c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <HAL_UART_MspInit+0x18c>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_UART_MspInit+0x18c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a17      	ldr	r2, [pc, #92]	; (8001660 <HAL_UART_MspInit+0x18c>)
 8001604:	f043 0308 	orr.w	r3, r3, #8
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_UART_MspInit+0x18c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001624:	2301      	movs	r3, #1
 8001626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001630:	2307      	movs	r3, #7
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001636:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163a:	4619      	mov	r1, r3
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <HAL_UART_MspInit+0x194>)
 800163e:	f001 f8c7 	bl	80027d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2027      	movs	r0, #39	; 0x27
 8001648:	f000 fcd3 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800164c:	2027      	movs	r0, #39	; 0x27
 800164e:	f000 fcec 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	37b8      	adds	r7, #184	; 0xb8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40004400 	.word	0x40004400
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40004800 	.word	0x40004800

08001670 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001676:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800167a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167e:	2206      	movs	r2, #6
 8001680:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001684:	2202      	movs	r2, #2
 8001686:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001690:	2202      	movs	r2, #2
 8001692:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001696:	2201      	movs	r2, #1
 8001698:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b4:	f001 fa75 	bl	8002ba2 <HAL_PCD_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016be:	f7ff fadb 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000578 	.word	0x20000578

080016cc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0ac      	sub	sp, #176	; 0xb0
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	2284      	movs	r2, #132	; 0x84
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fcab 	bl	8007048 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fa:	d159      	bne.n	80017b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80016fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001700:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f002 f86b 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001718:	f7ff faae 	bl	8000c78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6313      	str	r3, [r2, #48]	; 0x30
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001734:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800174e:	230a      	movs	r3, #10
 8001750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	4619      	mov	r1, r3
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <HAL_PCD_MspInit+0xf0>)
 800175c:	f001 f838 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001778:	4619      	mov	r1, r3
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <HAL_PCD_MspInit+0xf0>)
 800177c:	f001 f828 	bl	80027d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 8001782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 8001786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178a:	6353      	str	r3, [r2, #52]	; 0x34
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 800179e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a2:	6453      	str	r3, [r2, #68]	; 0x44
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_PCD_MspInit+0xec>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	37b0      	adds	r7, #176	; 0xb0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff fb7d 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f005 fc33 	bl	8007058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff f9a7 	bl	8000b44 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001804:	080070e0 	.word	0x080070e0
  ldr r2, =_sbss
 8001808:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800180c:	20000a84 	.word	0x20000a84

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>

08001812 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
 8001818:	f000 fbe0 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181c:	2000      	movs	r0, #0
 800181e:	f000 f805 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001822:	f7ff fad5 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fbfb 	bl	8002046 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 fbc3 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000030 	.word	0x20000030
 8001884:	20000038 	.word	0x20000038
 8001888:	20000034 	.word	0x20000034

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000038 	.word	0x20000038
 80018b0:	20000a80 	.word	0x20000a80

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000a80 	.word	0x20000a80

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff ffee 	bl	80018b4 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f2:	bf00      	nop
 80018f4:	f7ff ffde 	bl	80018b4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000038 	.word	0x20000038

08001914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e031      	b.n	800198e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe fe38 	bl	80005a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_ADC_Init+0x84>)
 8001958:	4013      	ands	r3, r2
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f970 	bl	8001c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
 800197e:	e001      	b.n	8001984 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	ffffeefd 	.word	0xffffeefd

0800199c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x1c>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e136      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x28a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d93a      	bls.n	8001a3e <HAL_ADC_ConfigChannel+0xa2>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d0:	d035      	beq.n	8001a3e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68d9      	ldr	r1, [r3, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	2207      	movs	r2, #7
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	400a      	ands	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a8d      	ldr	r2, [pc, #564]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68d9      	ldr	r1, [r3, #12]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	061a      	lsls	r2, r3, #24
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a16:	e035      	b.n	8001a84 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4403      	add	r3, r0
 8001a30:	3b1e      	subs	r3, #30
 8001a32:	409a      	lsls	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a3c:	e022      	b.n	8001a84 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6919      	ldr	r1, [r3, #16]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	2207      	movs	r2, #7
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6919      	ldr	r1, [r3, #16]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4403      	add	r3, r0
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d824      	bhi.n	8001ad6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b05      	subs	r3, #5
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b05      	subs	r3, #5
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad4:	e04c      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b0c      	cmp	r3, #12
 8001adc:	d824      	bhi.n	8001b28 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b23      	subs	r3, #35	; 0x23
 8001af0:	221f      	movs	r2, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
 8001b26:	e023      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b41      	subs	r3, #65	; 0x41
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b41      	subs	r3, #65	; 0x41
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10a      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b8e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10f      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x21e>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b12      	cmp	r3, #18
 8001ba0:	d10b      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001ba8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_ADC_ConfigChannel+0x29c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d12b      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x23a>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d122      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bdc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001be0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001be8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_ADC_ConfigChannel+0x298>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d111      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_ADC_ConfigChannel+0x2a4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9a      	lsrs	r2, r3, #18
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c0e:	e002      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	10000012 	.word	0x10000012
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	20000030 	.word	0x20000030
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c50:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <ADC_Init+0x1ec>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <ADC_Init+0x1ec>)
 8001c56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c5a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c5c:	4b75      	ldr	r3, [pc, #468]	; (8001e34 <ADC_Init+0x1ec>)
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4973      	ldr	r1, [pc, #460]	; (8001e34 <ADC_Init+0x1ec>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	021a      	lsls	r2, r3, #8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <ADC_Init+0x1f0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6899      	ldr	r1, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e00f      	b.n	8001d42 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0202 	bic.w	r2, r2, #2
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	005a      	lsls	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01b      	beq.n	8001da8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	035a      	lsls	r2, r3, #13
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	e007      	b.n	8001db8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	051a      	lsls	r2, r3, #20
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6899      	ldr	r1, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfa:	025a      	lsls	r2, r3, #9
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	029a      	lsls	r2, r3, #10
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40012300 	.word	0x40012300
 8001e38:	0f000001 	.word	0x0f000001

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <__NVIC_SetPriorityGrouping+0x40>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x40>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00
 8001e80:	05fa0000 	.word	0x05fa0000

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff29 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff3e 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff8e 	bl	8001f30 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff31 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff fc22 	bl	80018b4 <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d008      	beq.n	8002090 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e052      	b.n	8002136 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0216 	bic.w	r2, r2, #22
 800209e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <HAL_DMA_Abort+0x62>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0208 	bic.w	r2, r2, #8
 80020ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e0:	e013      	b.n	800210a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e2:	f7ff fbe7 	bl	80018b4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d90c      	bls.n	800210a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2203      	movs	r2, #3
 80020fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e015      	b.n	8002136 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e4      	bne.n	80020e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d004      	beq.n	800215c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e00c      	b.n	8002176 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2205      	movs	r2, #5
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06a      	b.n	800226c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2223      	movs	r2, #35	; 0x23
 80021a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe fa8b 	bl	80006c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a30      	ldr	r2, [pc, #192]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_ETH_Init+0xf0>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4927      	ldr	r1, [pc, #156]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_ETH_Init+0xf4>)
 80021e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021fc:	f7ff fb5a 	bl	80018b4 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002202:	e011      	b.n	8002228 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002204:	f7ff fb56 	bl	80018b4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002212:	d909      	bls.n	8002228 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	22e0      	movs	r2, #224	; 0xe0
 8002220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e021      	b.n	800226c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1e4      	bne.n	8002204 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f958 	bl	80024f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9ff 	bl	8002644 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa55 	bl	80026f6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9bd 	bl	80025d4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2210      	movs	r2, #16
 8002266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800

0800227c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <ETH_SetMACConfig+0x15c>)
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7c1b      	ldrb	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <ETH_SetMACConfig+0x28>
 800229e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022a2:	e000      	b.n	80022a6 <ETH_SetMACConfig+0x2a>
 80022a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7c5b      	ldrb	r3, [r3, #17]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <ETH_SetMACConfig+0x38>
 80022ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b2:	e000      	b.n	80022b6 <ETH_SetMACConfig+0x3a>
 80022b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	7fdb      	ldrb	r3, [r3, #31]
 80022c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	7f92      	ldrb	r2, [r2, #30]
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d102      	bne.n	80022da <ETH_SetMACConfig+0x5e>
 80022d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0x60>
 80022da:	2200      	movs	r2, #0
                        macconf->Speed |
 80022dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7f1b      	ldrb	r3, [r3, #28]
 80022e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d102      	bne.n	8002304 <ETH_SetMACConfig+0x88>
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	e000      	b.n	8002306 <ETH_SetMACConfig+0x8a>
 8002304:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7bdb      	ldrb	r3, [r3, #15]
 800230c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800230e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002314:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800231c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800231e:	4313      	orrs	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002336:	2001      	movs	r0, #1
 8002338:	f7ff fac8 	bl	80018cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002352:	4013      	ands	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002362:	2a00      	cmp	r2, #0
 8002364:	d101      	bne.n	800236a <ETH_SetMACConfig+0xee>
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0xf0>
 800236a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800236c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002372:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800237a:	2a01      	cmp	r2, #1
 800237c:	d101      	bne.n	8002382 <ETH_SetMACConfig+0x106>
 800237e:	2208      	movs	r2, #8
 8002380:	e000      	b.n	8002384 <ETH_SetMACConfig+0x108>
 8002382:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002384:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800238c:	2a01      	cmp	r2, #1
 800238e:	d101      	bne.n	8002394 <ETH_SetMACConfig+0x118>
 8002390:	2204      	movs	r2, #4
 8002392:	e000      	b.n	8002396 <ETH_SetMACConfig+0x11a>
 8002394:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800239e:	2a01      	cmp	r2, #1
 80023a0:	d101      	bne.n	80023a6 <ETH_SetMACConfig+0x12a>
 80023a2:	2202      	movs	r2, #2
 80023a4:	e000      	b.n	80023a8 <ETH_SetMACConfig+0x12c>
 80023a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff fa83 	bl	80018cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	619a      	str	r2, [r3, #24]
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	ff20810f 	.word	0xff20810f

080023dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <ETH_SetDMAConfig+0x110>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7b1b      	ldrb	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <ETH_SetDMAConfig+0x2c>
 8002402:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002406:	e000      	b.n	800240a <ETH_SetDMAConfig+0x2e>
 8002408:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7b5b      	ldrb	r3, [r3, #13]
 800240e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002410:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	7f52      	ldrb	r2, [r2, #29]
 8002416:	2a00      	cmp	r2, #0
 8002418:	d102      	bne.n	8002420 <ETH_SetDMAConfig+0x44>
 800241a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800241e:	e000      	b.n	8002422 <ETH_SetDMAConfig+0x46>
 8002420:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002422:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7b9b      	ldrb	r3, [r3, #14]
 8002428:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800242a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002430:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002438:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	7f9b      	ldrb	r3, [r3, #30]
 800243e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002440:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002446:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002450:	4313      	orrs	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	461a      	mov	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002472:	2001      	movs	r0, #1
 8002474:	f7ff fa2a 	bl	80018cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	461a      	mov	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	791b      	ldrb	r3, [r3, #4]
 800248a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002490:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002496:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800249c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80024a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80024ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff f9fb 	bl	80018cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	f8de3f23 	.word	0xf8de3f23

080024f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b0a6      	sub	sp, #152	; 0x98
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024f8:	2301      	movs	r3, #1
 80024fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002504:	2300      	movs	r3, #0
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002514:	2300      	movs	r3, #0
 8002516:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800251a:	2301      	movs	r3, #1
 800251c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800252c:	2300      	movs	r3, #0
 800252e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002536:	2300      	movs	r3, #0
 8002538:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800255c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002564:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fe86 	bl	800227c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002570:	2301      	movs	r3, #1
 8002572:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002574:	2301      	movs	r3, #1
 8002576:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800257e:	2301      	movs	r3, #1
 8002580:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002592:	2300      	movs	r3, #0
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002596:	2301      	movs	r3, #1
 8002598:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800259c:	2301      	movs	r3, #1
 800259e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff08 	bl	80023dc <ETH_SetDMAConfig>
}
 80025cc:	bf00      	nop
 80025ce:	3798      	adds	r7, #152	; 0x98
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3305      	adds	r3, #5
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	3204      	adds	r2, #4
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <ETH_MACAddressConfig+0x68>)
 80025f6:	4413      	add	r3, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3303      	adds	r3, #3
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	061a      	lsls	r2, r3, #24
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3302      	adds	r3, #2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3301      	adds	r3, #1
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	4313      	orrs	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <ETH_MACAddressConfig+0x6c>)
 8002626:	4413      	add	r3, r2
 8002628:	461a      	mov	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6013      	str	r3, [r2, #0]
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40028040 	.word	0x40028040
 8002640:	40028044 	.word	0x40028044

08002644 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e03e      	b.n	80026d0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	3206      	adds	r2, #6
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d80c      	bhi.n	80026b4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68d9      	ldr	r1, [r3, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	e004      	b.n	80026be <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d9bd      	bls.n	8002652 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	611a      	str	r2, [r3, #16]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e046      	b.n	8002792 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002740:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002748:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	3212      	adds	r2, #18
 800275e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d80c      	bhi.n	8002782 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	e004      	b.n	800278c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3301      	adds	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d9b5      	bls.n	8002704 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c2:	60da      	str	r2, [r3, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	e175      	b.n	8002adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	f040 8164 	bne.w	8002ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d005      	beq.n	8002826 <HAL_GPIO_Init+0x56>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d130      	bne.n	8002888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 0201 	and.w	r2, r3, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b03      	cmp	r3, #3
 8002892:	d017      	beq.n	80028c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d123      	bne.n	8002918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0203 	and.w	r2, r3, #3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80be 	beq.w	8002ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002972:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_GPIO_Init+0x32c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d037      	beq.n	8002a0e <HAL_GPIO_Init+0x23e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_GPIO_Init+0x330>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_GPIO_Init+0x23a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x334>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02b      	beq.n	8002a06 <HAL_GPIO_Init+0x236>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_GPIO_Init+0x338>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x232>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x33c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x22e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a53      	ldr	r2, [pc, #332]	; (8002b10 <HAL_GPIO_Init+0x340>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x22a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x344>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_GPIO_Init+0x348>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_GPIO_Init+0x34c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x350>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x21a>
 80029e6:	2309      	movs	r3, #9
 80029e8:	e012      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ea:	230a      	movs	r3, #10
 80029ec:	e010      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ee:	2308      	movs	r3, #8
 80029f0:	e00e      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae86 	bls.w	80027f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022400 	.word	0x40022400
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f806 	bl	8002b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba4:	b08f      	sub	sp, #60	; 0x3c
 8002ba6:	af0a      	add	r7, sp, #40	; 0x28
 8002ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e116      	b.n	8002de2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fd7c 	bl	80016cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 ff8c 	bl	8006b10 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	687e      	ldr	r6, [r7, #4]
 8002c00:	466d      	mov	r5, sp
 8002c02:	f106 0410 	add.w	r4, r6, #16
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c16:	1d33      	adds	r3, r6, #4
 8002c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f003 ff20 	bl	8006a60 <USB_CoreInit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0d7      	b.n	8002de2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 ff7a 	bl	8006b32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e04a      	b.n	8002cda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	333d      	adds	r3, #61	; 0x3d
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	333c      	adds	r3, #60	; 0x3c
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	b298      	uxth	r0, r3
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3344      	adds	r3, #68	; 0x44
 8002c80:	4602      	mov	r2, r0
 8002c82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3340      	adds	r3, #64	; 0x40
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3348      	adds	r3, #72	; 0x48
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334c      	adds	r3, #76	; 0x4c
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3354      	adds	r3, #84	; 0x54
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3af      	bcc.n	8002c44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	e044      	b.n	8002d74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	3301      	adds	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3b5      	bcc.n	8002cea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	687e      	ldr	r6, [r7, #4]
 8002d86:	466d      	mov	r5, sp
 8002d88:	f106 0410 	add.w	r4, r6, #16
 8002d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d9c:	1d33      	adds	r3, r6, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	6838      	ldr	r0, [r7, #0]
 8002da2:	f003 ff13 	bl	8006bcc <USB_DevInit>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e014      	b.n	8002de2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f80b 	bl	8002dec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 f8d1 	bl	8006f82 <USB_DevDisconnect>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	10000003 	.word	0x10000003

08002e34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40007000 	.word	0x40007000

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e291      	b.n	800338e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8087 	beq.w	8002f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e78:	4b96      	ldr	r3, [pc, #600]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d00c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e84:	4b93      	ldr	r3, [pc, #588]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d112      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x62>
 8002e90:	4b90      	ldr	r3, [pc, #576]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d06c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x130>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d168      	bne.n	8002f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e26b      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d106      	bne.n	8002ece <HAL_RCC_OscConfig+0x7a>
 8002ec0:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a83      	ldr	r2, [pc, #524]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e02e      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x9c>
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7b      	ldr	r2, [pc, #492]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc0>
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a72      	ldr	r2, [pc, #456]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xd8>
 8002f14:	4b6f      	ldr	r3, [pc, #444]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6e      	ldr	r2, [pc, #440]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6b      	ldr	r2, [pc, #428]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fcbe 	bl	80018b4 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fcba 	bl	80018b4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e21f      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe8>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fcaa 	bl	80018b4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fca6 	bl	80018b4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e20b      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x110>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d069      	beq.n	8003066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f92:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x190>
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x17a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1df      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	493d      	ldr	r1, [pc, #244]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e040      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d023      	beq.n	8003034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b39      	ldr	r3, [pc, #228]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a38      	ldr	r2, [pc, #224]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fc5c 	bl	80018b4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7fe fc58 	bl	80018b4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1bd      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003012:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4929      	ldr	r1, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
 8003032:	e018      	b.n	8003066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 800303a:	f023 0301 	bic.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fc38 	bl	80018b4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fc34 	bl	80018b4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e199      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d038      	beq.n	80030e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe fc15 	bl	80018b4 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308e:	f7fe fc11 	bl	80018b4 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e176      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x23a>
 80030ac:	e01a      	b.n	80030e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x280>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe fbfb 	bl	80018b4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe fbf7 	bl	80018b4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d903      	bls.n	80030d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e15c      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
 80030d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b91      	ldr	r3, [pc, #580]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a4 	beq.w	800323a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a87      	ldr	r2, [pc, #540]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311a:	4b82      	ldr	r3, [pc, #520]	; (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003122:	2b00      	cmp	r3, #0
 8003124:	d118      	bne.n	8003158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003126:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7e      	ldr	r2, [pc, #504]	; (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003132:	f7fe fbbf 	bl	80018b4 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe fbbb 	bl	80018b4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e120      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b75      	ldr	r3, [pc, #468]	; (8003324 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x31a>
 8003160:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a6e      	ldr	r2, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e02d      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x33c>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a69      	ldr	r2, [pc, #420]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
 8003182:	4b67      	ldr	r3, [pc, #412]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a66      	ldr	r2, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	f023 0304 	bic.w	r3, r3, #4
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
 800318e:	e01c      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d10c      	bne.n	80031b2 <HAL_RCC_OscConfig+0x35e>
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	4a60      	ldr	r2, [pc, #384]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	; 0x70
 80031a4:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a8:	4a5d      	ldr	r2, [pc, #372]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	; 0x70
 80031b0:	e00b      	b.n	80031ca <HAL_RCC_OscConfig+0x376>
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5a      	ldr	r2, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	4b58      	ldr	r3, [pc, #352]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d015      	beq.n	80031fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7fe fb6f 	bl	80018b4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d8:	e00a      	b.n	80031f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031da:	f7fe fb6b 	bl	80018b4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e0ce      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f0:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ee      	beq.n	80031da <HAL_RCC_OscConfig+0x386>
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe fb59 	bl	80018b4 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fb55 	bl	80018b4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0b8      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ee      	bne.n	8003206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322e:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a3b      	ldr	r2, [pc, #236]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80a4 	beq.w	800338c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d06b      	beq.n	8003328 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d149      	bne.n	80032ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a30      	ldr	r2, [pc, #192]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 800325e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fb26 	bl	80018b4 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fb22 	bl	80018b4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e087      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	4313      	orrs	r3, r2
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a18      	ldr	r2, [pc, #96]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe faf6 	bl	80018b4 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe faf2 	bl	80018b4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e057      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x478>
 80032ea:	e04f      	b.n	800338c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe fadc 	bl	80018b4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fad8 	bl	80018b4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e03d      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_OscConfig+0x4cc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x4ac>
 800331e:	e035      	b.n	800338c <HAL_RCC_OscConfig+0x538>
 8003320:	40023800 	.word	0x40023800
 8003324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x544>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d028      	beq.n	8003388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d121      	bne.n	8003388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d11a      	bne.n	8003388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d0      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 020f 	bic.w	r2, r3, #15
 80033ca:	4965      	ldr	r1, [pc, #404]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003406:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800341a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d040      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d115      	bne.n	800347e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e073      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06b      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4936      	ldr	r1, [pc, #216]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003490:	f7fe fa10 	bl	80018b4 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe fa0c 	bl	80018b4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e053      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d210      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	4922      	ldr	r1, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1cc>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1d0>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1d4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe f96c 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	080070b8 	.word	0x080070b8
 800356c:	20000030 	.word	0x20000030
 8003570:	20000034 	.word	0x20000034

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b094      	sub	sp, #80	; 0x50
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	; 0x44
 8003580:	2300      	movs	r3, #0
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358c:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003598:	2b08      	cmp	r3, #8
 800359a:	f200 80e1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x34>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3a>
 80035a6:	e0db      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ac:	e0db      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_GetSysClockFreq+0x208>)
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b2:	e0d8      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	2200      	movs	r2, #0
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
 80035e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	6139      	str	r1, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	ebb2 0801 	subs.w	r8, r2, r1
 800362c:	4659      	mov	r1, fp
 800362e:	eb63 0901 	sbc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	462b      	mov	r3, r5
 8003654:	eb49 0303 	adc.w	r3, r9, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003666:	4629      	mov	r1, r5
 8003668:	024b      	lsls	r3, r1, #9
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003670:	4621      	mov	r1, r4
 8003672:	024a      	lsls	r2, r1, #9
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003684:	f7fc fdc0 	bl	8000208 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	e058      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	4611      	mov	r1, r2
 800369e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0159      	lsls	r1, r3, #5
 80036ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036be:	0150      	lsls	r0, r2, #5
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4641      	mov	r1, r8
 80036c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e4:	ebb2 040a 	subs.w	r4, r2, sl
 80036e8:	eb63 050b 	sbc.w	r5, r3, fp
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	464b      	mov	r3, r9
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003738:	f7fc fd66 	bl	8000208 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003768:	4618      	mov	r0, r3
 800376a:	3750      	adds	r7, #80	; 0x50
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000030 	.word	0x20000030

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	080070c8 	.word	0x080070c8

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	080070c8 	.word	0x080070c8

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d012      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003810:	4b69      	ldr	r3, [pc, #420]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003816:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	4b66      	ldr	r3, [pc, #408]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	4964      	ldr	r1, [pc, #400]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003842:	4b5d      	ldr	r3, [pc, #372]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	4959      	ldr	r1, [pc, #356]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003860:	d101      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800387e:	4b4e      	ldr	r3, [pc, #312]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003884:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	494a      	ldr	r1, [pc, #296]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389c:	d101      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 808b 	beq.w	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
 80038d8:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd ffe0 	bl	80018b4 <HAL_GetTick>
 80038f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f8:	f7fd ffdc 	bl	80018b4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e357      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003916:	4b28      	ldr	r3, [pc, #160]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d035      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d02e      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003934:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003954:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d114      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd ffa4 	bl	80018b4 <HAL_GetTick>
 800396c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	e00a      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fd ffa0 	bl	80018b4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e319      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0ee      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399e:	d111      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ae:	400b      	ands	r3, r1
 80039b0:	4901      	ldr	r1, [pc, #4]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
 80039b6:	e00b      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	0ffffcff 	.word	0x0ffffcff
 80039c4:	4baa      	ldr	r3, [pc, #680]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4aa9      	ldr	r2, [pc, #676]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039ce:	6093      	str	r3, [r2, #8]
 80039d0:	4ba7      	ldr	r3, [pc, #668]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	49a4      	ldr	r1, [pc, #656]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039ee:	4ba0      	ldr	r3, [pc, #640]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	4a9e      	ldr	r2, [pc, #632]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039fe:	4b9c      	ldr	r3, [pc, #624]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	4999      	ldr	r1, [pc, #612]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a1c:	4b94      	ldr	r3, [pc, #592]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2a:	4991      	ldr	r1, [pc, #580]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a3e:	4b8c      	ldr	r3, [pc, #560]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4c:	4988      	ldr	r1, [pc, #544]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a60:	4b83      	ldr	r3, [pc, #524]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	4980      	ldr	r1, [pc, #512]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a82:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4977      	ldr	r1, [pc, #476]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aa4:	4b72      	ldr	r3, [pc, #456]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	496f      	ldr	r1, [pc, #444]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f023 020c 	bic.w	r2, r3, #12
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad4:	4966      	ldr	r1, [pc, #408]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	495e      	ldr	r1, [pc, #376]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b0a:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	4955      	ldr	r1, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b4e:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4944      	ldr	r1, [pc, #272]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	493c      	ldr	r1, [pc, #240]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba0:	4933      	ldr	r1, [pc, #204]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc2:	492b      	ldr	r1, [pc, #172]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be4:	4922      	ldr	r1, [pc, #136]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c16:	4b16      	ldr	r3, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	4912      	ldr	r1, [pc, #72]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c48:	4909      	ldr	r1, [pc, #36]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d006      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80d9 	beq.w	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a01      	ldr	r2, [pc, #4]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c6e:	e001      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c76:	f7fd fe1d 	bl	80018b4 <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c7e:	f7fd fe19 	bl	80018b4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	; 0x64
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e194      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d021      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d11d      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003cb0:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cbe:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	019a      	lsls	r2, r3, #6
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	041b      	lsls	r3, r3, #16
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	061b      	lsls	r3, r3, #24
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	071b      	lsls	r3, r3, #28
 8003ce4:	4957      	ldr	r1, [pc, #348]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d02e      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d16:	d129      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d18:	4b4a      	ldr	r3, [pc, #296]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2c:	0f1b      	lsrs	r3, r3, #28
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	019a      	lsls	r2, r3, #6
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	071b      	lsls	r3, r3, #28
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d54:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5a:	f023 021f 	bic.w	r2, r3, #31
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4937      	ldr	r1, [pc, #220]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01d      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	0e1b      	lsrs	r3, r3, #24
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8c:	0f1b      	lsrs	r3, r3, #28
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	041b      	lsls	r3, r3, #16
 8003da0:	431a      	orrs	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	061b      	lsls	r3, r3, #24
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	071b      	lsls	r3, r3, #28
 8003dac:	4925      	ldr	r1, [pc, #148]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	061b      	lsls	r3, r3, #24
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	071b      	lsls	r3, r3, #28
 8003ddc:	4919      	ldr	r1, [pc, #100]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df0:	f7fd fd60 	bl	80018b4 <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003df8:	f7fd fd5c 	bl	80018b4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e0d7      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	f040 80cd 	bne.w	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2a:	f7fd fd43 	bl	80018b4 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e32:	f7fd fd3f 	bl	80018b4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d903      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0ba      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003e44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e48:	4b5e      	ldr	r3, [pc, #376]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e54:	d0ed      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d02e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e7e:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	0f1b      	lsrs	r3, r3, #28
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	019a      	lsls	r2, r3, #6
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	061b      	lsls	r3, r3, #24
 8003eac:	431a      	orrs	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	4944      	ldr	r1, [pc, #272]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003eba:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	493d      	ldr	r1, [pc, #244]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d022      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee8:	d11d      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	0e1b      	lsrs	r3, r3, #24
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ef8:	4b32      	ldr	r3, [pc, #200]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	0f1b      	lsrs	r3, r3, #28
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	019a      	lsls	r2, r3, #6
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	041b      	lsls	r3, r3, #16
 8003f12:	431a      	orrs	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	061b      	lsls	r3, r3, #24
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	4929      	ldr	r1, [pc, #164]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d028      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	0e1b      	lsrs	r3, r3, #24
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	019a      	lsls	r2, r3, #6
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	071b      	lsls	r3, r3, #28
 8003f66:	4917      	ldr	r1, [pc, #92]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4911      	ldr	r1, [pc, #68]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd fc90 	bl	80018b4 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f98:	f7fd fc8c 	bl	80018b4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	; 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e007      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb6:	d1ef      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e049      	b.n	800406e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f966 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 ffae 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e054      	b.n	800413a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <HAL_TIM_Base_Start_IT+0xd0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d01d      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_TIM_Base_Start_IT+0xd4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_TIM_Base_Start_IT+0xd8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_TIM_Base_Start_IT+0xdc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <HAL_TIM_Base_Start_IT+0xe0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <HAL_TIM_Base_Start_IT+0xe4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIM_Base_Start_IT+0x80>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <HAL_TIM_Base_Start_IT+0xe8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d115      	bne.n	8004124 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_TIM_Base_Start_IT+0xec>)
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d015      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0xbe>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d011      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004122:	e008      	b.n	8004136 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e000      	b.n	8004138 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40010400 	.word	0x40010400
 800415c:	40014000 	.word	0x40014000
 8004160:	40001800 	.word	0x40001800
 8004164:	00010007 	.word	0x00010007

08004168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e049      	b.n	800420e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f841 	bl	8004216 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fede 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e03c      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_PWM_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e02f      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e022      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d109      	bne.n	800429e <HAL_TIM_PWM_Start+0x72>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	e015      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d109      	bne.n	80042b8 <HAL_TIM_PWM_Start+0x8c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e008      	b.n	80042ca <HAL_TIM_PWM_Start+0x9e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e092      	b.n	80043f8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xb6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e0:	e023      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_PWM_Start+0xc6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	e01b      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start+0xd6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004300:	e013      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b0c      	cmp	r3, #12
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0xe6>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004310:	e00b      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0xf6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004320:	e003      	b.n	800432a <HAL_TIM_PWM_Start+0xfe>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fada 	bl	80058ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a30      	ldr	r2, [pc, #192]	; (8004400 <HAL_TIM_PWM_Start+0x1d4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <HAL_TIM_PWM_Start+0x120>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2f      	ldr	r2, [pc, #188]	; (8004404 <HAL_TIM_PWM_Start+0x1d8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_TIM_PWM_Start+0x124>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_TIM_PWM_Start+0x126>
 8004350:	2300      	movs	r3, #0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a25      	ldr	r2, [pc, #148]	; (8004400 <HAL_TIM_PWM_Start+0x1d4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a22      	ldr	r2, [pc, #136]	; (8004408 <HAL_TIM_PWM_Start+0x1dc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <HAL_TIM_PWM_Start+0x1e0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <HAL_TIM_PWM_Start+0x1e4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_TIM_PWM_Start+0x1d8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIM_PWM_Start+0x1e8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x18a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_TIM_PWM_Start+0x1ec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d115      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b17      	ldr	r3, [pc, #92]	; (800441c <HAL_TIM_PWM_Start+0x1f0>)
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b06      	cmp	r3, #6
 80043c6:	d015      	beq.n	80043f4 <HAL_TIM_PWM_Start+0x1c8>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d011      	beq.n	80043f4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	e008      	b.n	80043f4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40010000 	.word	0x40010000
 8004404:	40010400 	.word	0x40010400
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40014000 	.word	0x40014000
 8004418:	40001800 	.word	0x40001800
 800441c:	00010007 	.word	0x00010007

08004420 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e049      	b.n	80044c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fef0 	bl	800122c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f000 fd82 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_IC_Start_IT+0x1e>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	e023      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x66>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0x2e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	e01b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x66>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x3e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e013      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x66>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x4e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e00b      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x66>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b10      	cmp	r3, #16
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x5e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e003      	b.n	8004536 <HAL_TIM_IC_Start_IT+0x66>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004534:	b2db      	uxtb	r3, r3
 8004536:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <HAL_TIM_IC_Start_IT+0x78>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e013      	b.n	8004570 <HAL_TIM_IC_Start_IT+0xa0>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d104      	bne.n	8004558 <HAL_TIM_IC_Start_IT+0x88>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e00b      	b.n	8004570 <HAL_TIM_IC_Start_IT+0xa0>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d104      	bne.n	8004568 <HAL_TIM_IC_Start_IT+0x98>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e003      	b.n	8004570 <HAL_TIM_IC_Start_IT+0xa0>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800456e:	b2db      	uxtb	r3, r3
 8004570:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d102      	bne.n	800457e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004578:	7b7b      	ldrb	r3, [r7, #13]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0e2      	b.n	8004748 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0xc2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004590:	e023      	b.n	80045da <HAL_TIM_IC_Start_IT+0x10a>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	e01b      	b.n	80045da <HAL_TIM_IC_Start_IT+0x10a>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_IC_Start_IT+0xe2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b0:	e013      	b.n	80045da <HAL_TIM_IC_Start_IT+0x10a>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b0c      	cmp	r3, #12
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_IC_Start_IT+0xf2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c0:	e00b      	b.n	80045da <HAL_TIM_IC_Start_IT+0x10a>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_IC_Start_IT+0x102>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	e003      	b.n	80045da <HAL_TIM_IC_Start_IT+0x10a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_TIM_IC_Start_IT+0x11a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	e013      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x142>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_IC_Start_IT+0x12a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x142>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d104      	bne.n	800460a <HAL_TIM_IC_Start_IT+0x13a>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004608:	e003      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x142>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d841      	bhi.n	800469c <HAL_TIM_IC_Start_IT+0x1cc>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_TIM_IC_Start_IT+0x150>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004655 	.word	0x08004655
 8004624:	0800469d 	.word	0x0800469d
 8004628:	0800469d 	.word	0x0800469d
 800462c:	0800469d 	.word	0x0800469d
 8004630:	08004667 	.word	0x08004667
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	08004679 	.word	0x08004679
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800468b 	.word	0x0800468b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0202 	orr.w	r2, r2, #2
 8004662:	60da      	str	r2, [r3, #12]
      break;
 8004664:	e01d      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0204 	orr.w	r2, r2, #4
 8004674:	60da      	str	r2, [r3, #12]
      break;
 8004676:	e014      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	60da      	str	r2, [r3, #12]
      break;
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0210 	orr.w	r2, r2, #16
 8004698:	60da      	str	r2, [r3, #12]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d14e      	bne.n	8004746 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2201      	movs	r2, #1
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 f91b 	bl	80058ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_TIM_IC_Start_IT+0x280>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d01d      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <HAL_TIM_IC_Start_IT+0x284>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_TIM_IC_Start_IT+0x288>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <HAL_TIM_IC_Start_IT+0x28c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_TIM_IC_Start_IT+0x290>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <HAL_TIM_IC_Start_IT+0x294>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_IC_Start_IT+0x236>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_TIM_IC_Start_IT+0x298>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d115      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	4b17      	ldr	r3, [pc, #92]	; (800476c <HAL_TIM_IC_Start_IT+0x29c>)
 800470e:	4013      	ands	r3, r2
 8004710:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d015      	beq.n	8004744 <HAL_TIM_IC_Start_IT+0x274>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d011      	beq.n	8004744 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	e008      	b.n	8004744 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e000      	b.n	8004746 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004744:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40010400 	.word	0x40010400
 8004764:	40014000 	.word	0x40014000
 8004768:	40001800 	.word	0x40001800
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc f904 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fbb6 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fbbd 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc f8da 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb8c 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb93 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0208 	mvn.w	r2, #8
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc f8b0 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb62 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb69 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc f886 	bl	80009c0 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb38 	bl	8004f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb3f 	bl	8004f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc f8e2 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f8a4 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f897 	bl	8005a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 faed 	bl	8004f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0220 	mvn.w	r2, #32
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 f857 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_IC_ConfigChannel+0x1e>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e088      	b.n	8004ade <HAL_TIM_IC_ConfigChannel+0x130>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11b      	bne.n	8004a12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80049ea:	f000 fdbb 	bl	8005564 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 020c 	bic.w	r2, r2, #12
 80049fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6999      	ldr	r1, [r3, #24]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	619a      	str	r2, [r3, #24]
 8004a10:	e060      	b.n	8004ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d11c      	bne.n	8004a52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004a28:	f000 fe3f 	bl	80056aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6999      	ldr	r1, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	021a      	lsls	r2, r3, #8
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	619a      	str	r2, [r3, #24]
 8004a50:	e040      	b.n	8004ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004a68:	f000 fe8c 	bl	8005784 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 020c 	bic.w	r2, r2, #12
 8004a7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69d9      	ldr	r1, [r3, #28]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	61da      	str	r2, [r3, #28]
 8004a8e:	e021      	b.n	8004ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d11c      	bne.n	8004ad0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004aa6:	f000 fea9 	bl	80057fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
 8004ace:	e001      	b.n	8004ad4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ff      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa96 	bl	80050a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a5      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fae8 	bl	800518c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e084      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb3f 	bl	800527c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e064      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb95 	bl	8005368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fbcc 	bl	8005418 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cb2:	e023      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fbfe 	bl	80054bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0b4      	b.n	8004e96 <HAL_TIM_ConfigClockSource+0x186>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4b56      	ldr	r3, [pc, #344]	; (8004ea0 <HAL_TIM_ConfigClockSource+0x190>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d03e      	beq.n	8004de4 <HAL_TIM_ConfigClockSource+0xd4>
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	f200 8087 	bhi.w	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	f000 8086 	beq.w	8004e82 <HAL_TIM_ConfigClockSource+0x172>
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d87f      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b70      	cmp	r3, #112	; 0x70
 8004d7e:	d01a      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0xa6>
 8004d80:	2b70      	cmp	r3, #112	; 0x70
 8004d82:	d87b      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d050      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x11a>
 8004d88:	2b60      	cmp	r3, #96	; 0x60
 8004d8a:	d877      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b50      	cmp	r3, #80	; 0x50
 8004d8e:	d03c      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0xfa>
 8004d90:	2b50      	cmp	r3, #80	; 0x50
 8004d92:	d873      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d058      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x13a>
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d86f      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d064      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b30      	cmp	r3, #48	; 0x30
 8004da2:	d86b      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d060      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d867      	bhi.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d05c      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x15a>
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d05a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	e062      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dc6:	f000 fd71 	bl	80058ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	609a      	str	r2, [r3, #8]
      break;
 8004de2:	e04f      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004df4:	f000 fd5a 	bl	80058ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e06:	609a      	str	r2, [r3, #8]
      break;
 8004e08:	e03c      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fc18 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2150      	movs	r1, #80	; 0x50
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd27 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8004e28:	e02c      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 fc74 	bl	8005724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2160      	movs	r1, #96	; 0x60
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fd17 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8004e48:	e01c      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 fbf8 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fd07 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8004e68:	e00c      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f000 fcfe 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8004e7a:	e003      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e000      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	fffeff88 	.word	0xfffeff88

08004ea4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d831      	bhi.n	8004f1c <HAL_TIM_ReadCapturedValue+0x78>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ef5 	.word	0x08004ef5
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f1d 	.word	0x08004f1d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004eff 	.word	0x08004eff
 8004ed4:	08004f1d 	.word	0x08004f1d
 8004ed8:	08004f1d 	.word	0x08004f1d
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f1d 	.word	0x08004f1d
 8004ef0:	08004f13 	.word	0x08004f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	60fb      	str	r3, [r7, #12]

      break;
 8004efc:	e00f      	b.n	8004f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	60fb      	str	r3, [r7, #12]

      break;
 8004f06:	e00a      	b.n	8004f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	60fb      	str	r3, [r7, #12]

      break;
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	60fb      	str	r3, [r7, #12]

      break;
 8004f1a:	e000      	b.n	8004f1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f1c:	bf00      	nop
  }

  return tmpreg;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a40      	ldr	r2, [pc, #256]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2f      	ldr	r2, [pc, #188]	; (800507c <TIM_Base_SetConfig+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d027      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <TIM_Base_SetConfig+0x118>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d023      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2b      	ldr	r2, [pc, #172]	; (8005084 <TIM_Base_SetConfig+0x11c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <TIM_Base_SetConfig+0x120>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <TIM_Base_SetConfig+0x124>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <TIM_Base_SetConfig+0x128>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <TIM_Base_SetConfig+0x12c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	; (8005098 <TIM_Base_SetConfig+0x130>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a25      	ldr	r2, [pc, #148]	; (800509c <TIM_Base_SetConfig+0x134>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a24      	ldr	r2, [pc, #144]	; (80050a0 <TIM_Base_SetConfig+0x138>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_Base_SetConfig+0x13c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <TIM_Base_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40001800 	.word	0x40001800
 80050a0:	40001c00 	.word	0x40001c00
 80050a4:	40002000 	.word	0x40002000

080050a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <TIM_OC1_SetConfig+0xd8>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0302 	bic.w	r3, r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a21      	ldr	r2, [pc, #132]	; (8005184 <TIM_OC1_SetConfig+0xdc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC1_SetConfig+0x64>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a20      	ldr	r2, [pc, #128]	; (8005188 <TIM_OC1_SetConfig+0xe0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <TIM_OC1_SetConfig+0xdc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC1_SetConfig+0x8e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <TIM_OC1_SetConfig+0xe0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	fffeff8f 	.word	0xfffeff8f
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <TIM_OC2_SetConfig+0xe4>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a23      	ldr	r2, [pc, #140]	; (8005274 <TIM_OC2_SetConfig+0xe8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC2_SetConfig+0x68>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a22      	ldr	r2, [pc, #136]	; (8005278 <TIM_OC2_SetConfig+0xec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10d      	bne.n	8005210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a18      	ldr	r2, [pc, #96]	; (8005274 <TIM_OC2_SetConfig+0xe8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC2_SetConfig+0x94>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <TIM_OC2_SetConfig+0xec>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d113      	bne.n	8005248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	feff8fff 	.word	0xfeff8fff
 8005274:	40010000 	.word	0x40010000
 8005278:	40010400 	.word	0x40010400

0800527c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4b2d      	ldr	r3, [pc, #180]	; (800535c <TIM_OC3_SetConfig+0xe0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a22      	ldr	r2, [pc, #136]	; (8005360 <TIM_OC3_SetConfig+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC3_SetConfig+0x66>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <TIM_OC3_SetConfig+0xe8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10d      	bne.n	80052fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a17      	ldr	r2, [pc, #92]	; (8005360 <TIM_OC3_SetConfig+0xe4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC3_SetConfig+0x92>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <TIM_OC3_SetConfig+0xe8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d113      	bne.n	8005336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	fffeff8f 	.word	0xfffeff8f
 8005360:	40010000 	.word	0x40010000
 8005364:	40010400 	.word	0x40010400

08005368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b1e      	ldr	r3, [pc, #120]	; (800540c <TIM_OC4_SetConfig+0xa4>)
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	031b      	lsls	r3, r3, #12
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <TIM_OC4_SetConfig+0xa8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC4_SetConfig+0x68>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <TIM_OC4_SetConfig+0xac>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d109      	bne.n	80053e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	feff8fff 	.word	0xfeff8fff
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <TIM_OC5_SetConfig+0x98>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <TIM_OC5_SetConfig+0x9c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_OC5_SetConfig+0x5e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <TIM_OC5_SetConfig+0xa0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d109      	bne.n	800548a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	fffeff8f 	.word	0xfffeff8f
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400

080054bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <TIM_OC6_SetConfig+0x9c>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	051b      	lsls	r3, r3, #20
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <TIM_OC6_SetConfig+0xa0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC6_SetConfig+0x60>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_OC6_SetConfig+0xa4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005522:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	029b      	lsls	r3, r3, #10
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	feff8fff 	.word	0xfeff8fff
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_TI1_SetConfig+0xcc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01b      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d017      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <TIM_TI1_SetConfig+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <TIM_TI1_SetConfig+0xd4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a23      	ldr	r2, [pc, #140]	; (800563c <TIM_TI1_SetConfig+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <TIM_TI1_SetConfig+0xdc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <TIM_TI1_SetConfig+0xe0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a20      	ldr	r2, [pc, #128]	; (8005648 <TIM_TI1_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <TIM_TI1_SetConfig+0x6a>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <TIM_TI1_SetConfig+0x6c>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e003      	b.n	80055ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 030a 	and.w	r3, r3, #10
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 0210 	bic.w	r2, r3, #16
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 0210 	bic.w	r2, r3, #16
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800574e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	031b      	lsls	r3, r3, #12
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	031b      	lsls	r3, r3, #12
 8005840:	b29b      	uxth	r3, r3
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800584e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	031b      	lsls	r3, r3, #12
 8005854:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	f043 0307 	orr.w	r3, r3, #7
 8005898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2201      	movs	r2, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800594c:	2302      	movs	r3, #2
 800594e:	e06d      	b.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a30      	ldr	r2, [pc, #192]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2f      	ldr	r2, [pc, #188]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800598a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c2:	d01d      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a15      	ldr	r2, [pc, #84]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10c      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e040      	b.n	8005b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fb fd0e 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	; 0x24
 8005abc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb1e 	bl	8006110 <UART_SetConfig>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e022      	b.n	8005b24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fd76 	bl	80065d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fdfd 	bl	800671c <UART_CheckIdleState>
 8005b22:	4603      	mov	r3, r0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0ba      	sub	sp, #232	; 0xe8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d115      	bne.n	8005b94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00f      	beq.n	8005b94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8297 	beq.w	80060b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
      }
      return;
 8005b92:	e291      	b.n	80060b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8117 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005baa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bae:	4b85      	ldr	r3, [pc, #532]	; (8005dc4 <HAL_UART_IRQHandler+0x298>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 810a 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d011      	beq.n	8005be8 <HAL_UART_IRQHandler+0xbc>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <HAL_UART_IRQHandler+0xec>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2202      	movs	r2, #2
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0e:	f043 0204 	orr.w	r2, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0x11c>
 8005c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c7a:	f043 0208 	orr.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x18a>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 81fd 	beq.w	80060bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d04f      	beq.n	8005dae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fe01 	bl	8006916 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d141      	bne.n	8005da6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1d9      	bne.n	8005d22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d013      	beq.n	8005d9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_UART_IRQHandler+0x29c>)
 8005d7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fc f9db 	bl	800213e <HAL_DMA_Abort_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e00f      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9a0 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e00b      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f99c 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e007      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f998 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005dbc:	e17e      	b.n	80060bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbe:	bf00      	nop
    return;
 8005dc0:	e17c      	b.n	80060bc <HAL_UART_IRQHandler+0x590>
 8005dc2:	bf00      	nop
 8005dc4:	04000120 	.word	0x04000120
 8005dc8:	080069df 	.word	0x080069df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	f040 814c 	bne.w	800606e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8145 	beq.w	800606e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 813e 	beq.w	800606e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2210      	movs	r2, #16
 8005df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	f040 80b6 	bne.w	8005f76 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8150 	beq.w	80060c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f080 8148 	bcs.w	80060c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e44:	f000 8086 	beq.w	8005f54 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1da      	bne.n	8005e48 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e1      	bne.n	8005e92 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ef2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	f023 0310 	bic.w	r3, r3, #16
 8005f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e4      	bne.n	8005f14 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc f885 	bl	800205e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8c2 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f74:	e0a4      	b.n	80060c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8096 	beq.w	80060c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8091 	beq.w	80060c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	60fb      	str	r3, [r7, #12]
   return(result);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0310 	bic.w	r3, r3, #16
 8006038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	617b      	str	r3, [r7, #20]
   return(result);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e4      	bne.n	8006024 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f846 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800606c:	e02a      	b.n	80060c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01c      	beq.n	80060c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
    }
    return;
 8006096:	e017      	b.n	80060c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d012      	beq.n	80060ca <HAL_UART_IRQHandler+0x59e>
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fcaa 	bl	8006a0a <UART_EndTransmit_IT>
    return;
 80060b6:	e008      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060b8:	bf00      	nop
 80060ba:	e006      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
    return;
 80060bc:	bf00      	nop
 80060be:	e004      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
    return;
 80060c8:	bf00      	nop
  }

}
 80060ca:	37e8      	adds	r7, #232	; 0xe8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4ba6      	ldr	r3, [pc, #664]	; (80063d4 <UART_SetConfig+0x2c4>)
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	430b      	orrs	r3, r1
 8006146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a94      	ldr	r2, [pc, #592]	; (80063d8 <UART_SetConfig+0x2c8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d120      	bne.n	80061ce <UART_SetConfig+0xbe>
 800618c:	4b93      	ldr	r3, [pc, #588]	; (80063dc <UART_SetConfig+0x2cc>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d816      	bhi.n	80061c8 <UART_SetConfig+0xb8>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x90>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061b1 	.word	0x080061b1
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061b7 	.word	0x080061b7
 80061ac:	080061c3 	.word	0x080061c3
 80061b0:	2301      	movs	r3, #1
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e150      	b.n	8006458 <UART_SetConfig+0x348>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e14d      	b.n	8006458 <UART_SetConfig+0x348>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e14a      	b.n	8006458 <UART_SetConfig+0x348>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e147      	b.n	8006458 <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e144      	b.n	8006458 <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a83      	ldr	r2, [pc, #524]	; (80063e0 <UART_SetConfig+0x2d0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d132      	bne.n	800623e <UART_SetConfig+0x12e>
 80061d8:	4b80      	ldr	r3, [pc, #512]	; (80063dc <UART_SetConfig+0x2cc>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d828      	bhi.n	8006238 <UART_SetConfig+0x128>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0xdc>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006221 	.word	0x08006221
 80061f0:	08006239 	.word	0x08006239
 80061f4:	08006239 	.word	0x08006239
 80061f8:	08006239 	.word	0x08006239
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	08006239 	.word	0x08006239
 8006204:	08006239 	.word	0x08006239
 8006208:	08006239 	.word	0x08006239
 800620c:	08006227 	.word	0x08006227
 8006210:	08006239 	.word	0x08006239
 8006214:	08006239 	.word	0x08006239
 8006218:	08006239 	.word	0x08006239
 800621c:	08006233 	.word	0x08006233
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e118      	b.n	8006458 <UART_SetConfig+0x348>
 8006226:	2302      	movs	r3, #2
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e115      	b.n	8006458 <UART_SetConfig+0x348>
 800622c:	2304      	movs	r3, #4
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e112      	b.n	8006458 <UART_SetConfig+0x348>
 8006232:	2308      	movs	r3, #8
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e10f      	b.n	8006458 <UART_SetConfig+0x348>
 8006238:	2310      	movs	r3, #16
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e10c      	b.n	8006458 <UART_SetConfig+0x348>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a68      	ldr	r2, [pc, #416]	; (80063e4 <UART_SetConfig+0x2d4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d120      	bne.n	800628a <UART_SetConfig+0x17a>
 8006248:	4b64      	ldr	r3, [pc, #400]	; (80063dc <UART_SetConfig+0x2cc>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006252:	2b30      	cmp	r3, #48	; 0x30
 8006254:	d013      	beq.n	800627e <UART_SetConfig+0x16e>
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d814      	bhi.n	8006284 <UART_SetConfig+0x174>
 800625a:	2b20      	cmp	r3, #32
 800625c:	d009      	beq.n	8006272 <UART_SetConfig+0x162>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d810      	bhi.n	8006284 <UART_SetConfig+0x174>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <UART_SetConfig+0x15c>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d006      	beq.n	8006278 <UART_SetConfig+0x168>
 800626a:	e00b      	b.n	8006284 <UART_SetConfig+0x174>
 800626c:	2300      	movs	r3, #0
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e0f2      	b.n	8006458 <UART_SetConfig+0x348>
 8006272:	2302      	movs	r3, #2
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e0ef      	b.n	8006458 <UART_SetConfig+0x348>
 8006278:	2304      	movs	r3, #4
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e0ec      	b.n	8006458 <UART_SetConfig+0x348>
 800627e:	2308      	movs	r3, #8
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e0e9      	b.n	8006458 <UART_SetConfig+0x348>
 8006284:	2310      	movs	r3, #16
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0e6      	b.n	8006458 <UART_SetConfig+0x348>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a56      	ldr	r2, [pc, #344]	; (80063e8 <UART_SetConfig+0x2d8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d120      	bne.n	80062d6 <UART_SetConfig+0x1c6>
 8006294:	4b51      	ldr	r3, [pc, #324]	; (80063dc <UART_SetConfig+0x2cc>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800629e:	2bc0      	cmp	r3, #192	; 0xc0
 80062a0:	d013      	beq.n	80062ca <UART_SetConfig+0x1ba>
 80062a2:	2bc0      	cmp	r3, #192	; 0xc0
 80062a4:	d814      	bhi.n	80062d0 <UART_SetConfig+0x1c0>
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d009      	beq.n	80062be <UART_SetConfig+0x1ae>
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d810      	bhi.n	80062d0 <UART_SetConfig+0x1c0>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <UART_SetConfig+0x1a8>
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d006      	beq.n	80062c4 <UART_SetConfig+0x1b4>
 80062b6:	e00b      	b.n	80062d0 <UART_SetConfig+0x1c0>
 80062b8:	2300      	movs	r3, #0
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e0cc      	b.n	8006458 <UART_SetConfig+0x348>
 80062be:	2302      	movs	r3, #2
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e0c9      	b.n	8006458 <UART_SetConfig+0x348>
 80062c4:	2304      	movs	r3, #4
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e0c6      	b.n	8006458 <UART_SetConfig+0x348>
 80062ca:	2308      	movs	r3, #8
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e0c3      	b.n	8006458 <UART_SetConfig+0x348>
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e0c0      	b.n	8006458 <UART_SetConfig+0x348>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a44      	ldr	r2, [pc, #272]	; (80063ec <UART_SetConfig+0x2dc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d125      	bne.n	800632c <UART_SetConfig+0x21c>
 80062e0:	4b3e      	ldr	r3, [pc, #248]	; (80063dc <UART_SetConfig+0x2cc>)
 80062e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ee:	d017      	beq.n	8006320 <UART_SetConfig+0x210>
 80062f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f4:	d817      	bhi.n	8006326 <UART_SetConfig+0x216>
 80062f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fa:	d00b      	beq.n	8006314 <UART_SetConfig+0x204>
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006300:	d811      	bhi.n	8006326 <UART_SetConfig+0x216>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <UART_SetConfig+0x1fe>
 8006306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630a:	d006      	beq.n	800631a <UART_SetConfig+0x20a>
 800630c:	e00b      	b.n	8006326 <UART_SetConfig+0x216>
 800630e:	2300      	movs	r3, #0
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e0a1      	b.n	8006458 <UART_SetConfig+0x348>
 8006314:	2302      	movs	r3, #2
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e09e      	b.n	8006458 <UART_SetConfig+0x348>
 800631a:	2304      	movs	r3, #4
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e09b      	b.n	8006458 <UART_SetConfig+0x348>
 8006320:	2308      	movs	r3, #8
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e098      	b.n	8006458 <UART_SetConfig+0x348>
 8006326:	2310      	movs	r3, #16
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e095      	b.n	8006458 <UART_SetConfig+0x348>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <UART_SetConfig+0x2e0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d125      	bne.n	8006382 <UART_SetConfig+0x272>
 8006336:	4b29      	ldr	r3, [pc, #164]	; (80063dc <UART_SetConfig+0x2cc>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006344:	d017      	beq.n	8006376 <UART_SetConfig+0x266>
 8006346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634a:	d817      	bhi.n	800637c <UART_SetConfig+0x26c>
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d00b      	beq.n	800636a <UART_SetConfig+0x25a>
 8006352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006356:	d811      	bhi.n	800637c <UART_SetConfig+0x26c>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <UART_SetConfig+0x254>
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x260>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x26c>
 8006364:	2301      	movs	r3, #1
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e076      	b.n	8006458 <UART_SetConfig+0x348>
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e073      	b.n	8006458 <UART_SetConfig+0x348>
 8006370:	2304      	movs	r3, #4
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e070      	b.n	8006458 <UART_SetConfig+0x348>
 8006376:	2308      	movs	r3, #8
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e06d      	b.n	8006458 <UART_SetConfig+0x348>
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e06a      	b.n	8006458 <UART_SetConfig+0x348>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <UART_SetConfig+0x2e4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d138      	bne.n	80063fe <UART_SetConfig+0x2ee>
 800638c:	4b13      	ldr	r3, [pc, #76]	; (80063dc <UART_SetConfig+0x2cc>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639a:	d017      	beq.n	80063cc <UART_SetConfig+0x2bc>
 800639c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063a0:	d82a      	bhi.n	80063f8 <UART_SetConfig+0x2e8>
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	d00b      	beq.n	80063c0 <UART_SetConfig+0x2b0>
 80063a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ac:	d824      	bhi.n	80063f8 <UART_SetConfig+0x2e8>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <UART_SetConfig+0x2aa>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d006      	beq.n	80063c6 <UART_SetConfig+0x2b6>
 80063b8:	e01e      	b.n	80063f8 <UART_SetConfig+0x2e8>
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e04b      	b.n	8006458 <UART_SetConfig+0x348>
 80063c0:	2302      	movs	r3, #2
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e048      	b.n	8006458 <UART_SetConfig+0x348>
 80063c6:	2304      	movs	r3, #4
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e045      	b.n	8006458 <UART_SetConfig+0x348>
 80063cc:	2308      	movs	r3, #8
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e042      	b.n	8006458 <UART_SetConfig+0x348>
 80063d2:	bf00      	nop
 80063d4:	efff69f3 	.word	0xefff69f3
 80063d8:	40011000 	.word	0x40011000
 80063dc:	40023800 	.word	0x40023800
 80063e0:	40004400 	.word	0x40004400
 80063e4:	40004800 	.word	0x40004800
 80063e8:	40004c00 	.word	0x40004c00
 80063ec:	40005000 	.word	0x40005000
 80063f0:	40011400 	.word	0x40011400
 80063f4:	40007800 	.word	0x40007800
 80063f8:	2310      	movs	r3, #16
 80063fa:	77fb      	strb	r3, [r7, #31]
 80063fc:	e02c      	b.n	8006458 <UART_SetConfig+0x348>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a72      	ldr	r2, [pc, #456]	; (80065cc <UART_SetConfig+0x4bc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d125      	bne.n	8006454 <UART_SetConfig+0x344>
 8006408:	4b71      	ldr	r3, [pc, #452]	; (80065d0 <UART_SetConfig+0x4c0>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006412:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006416:	d017      	beq.n	8006448 <UART_SetConfig+0x338>
 8006418:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641c:	d817      	bhi.n	800644e <UART_SetConfig+0x33e>
 800641e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006422:	d00b      	beq.n	800643c <UART_SetConfig+0x32c>
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006428:	d811      	bhi.n	800644e <UART_SetConfig+0x33e>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <UART_SetConfig+0x326>
 800642e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006432:	d006      	beq.n	8006442 <UART_SetConfig+0x332>
 8006434:	e00b      	b.n	800644e <UART_SetConfig+0x33e>
 8006436:	2300      	movs	r3, #0
 8006438:	77fb      	strb	r3, [r7, #31]
 800643a:	e00d      	b.n	8006458 <UART_SetConfig+0x348>
 800643c:	2302      	movs	r3, #2
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e00a      	b.n	8006458 <UART_SetConfig+0x348>
 8006442:	2304      	movs	r3, #4
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e007      	b.n	8006458 <UART_SetConfig+0x348>
 8006448:	2308      	movs	r3, #8
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e004      	b.n	8006458 <UART_SetConfig+0x348>
 800644e:	2310      	movs	r3, #16
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e001      	b.n	8006458 <UART_SetConfig+0x348>
 8006454:	2310      	movs	r3, #16
 8006456:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006460:	d15b      	bne.n	800651a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006462:	7ffb      	ldrb	r3, [r7, #31]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d828      	bhi.n	80064ba <UART_SetConfig+0x3aa>
 8006468:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0x360>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006495 	.word	0x08006495
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064a5 	.word	0x080064a5
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064ab 	.word	0x080064ab
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064bb 	.word	0x080064bb
 8006490:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006494:	f7fd f980 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8006498:	61b8      	str	r0, [r7, #24]
        break;
 800649a:	e013      	b.n	80064c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fd f990 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 80064a0:	61b8      	str	r0, [r7, #24]
        break;
 80064a2:	e00f      	b.n	80064c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b4b      	ldr	r3, [pc, #300]	; (80065d4 <UART_SetConfig+0x4c4>)
 80064a6:	61bb      	str	r3, [r7, #24]
        break;
 80064a8:	e00c      	b.n	80064c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064aa:	f7fd f863 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 80064ae:	61b8      	str	r0, [r7, #24]
        break;
 80064b0:	e008      	b.n	80064c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b6:	61bb      	str	r3, [r7, #24]
        break;
 80064b8:	e004      	b.n	80064c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77bb      	strb	r3, [r7, #30]
        break;
 80064c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d074      	beq.n	80065b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	005a      	lsls	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	d916      	bls.n	8006514 <UART_SetConfig+0x404>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ec:	d212      	bcs.n	8006514 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f023 030f 	bic.w	r3, r3, #15
 80064f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	b29a      	uxth	r2, r3
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	4313      	orrs	r3, r2
 8006508:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	89fa      	ldrh	r2, [r7, #14]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e04f      	b.n	80065b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	77bb      	strb	r3, [r7, #30]
 8006518:	e04c      	b.n	80065b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800651a:	7ffb      	ldrb	r3, [r7, #31]
 800651c:	2b08      	cmp	r3, #8
 800651e:	d828      	bhi.n	8006572 <UART_SetConfig+0x462>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x418>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
 8006534:	08006573 	.word	0x08006573
 8006538:	08006563 	.word	0x08006563
 800653c:	08006573 	.word	0x08006573
 8006540:	08006573 	.word	0x08006573
 8006544:	08006573 	.word	0x08006573
 8006548:	0800656b 	.word	0x0800656b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fd f924 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8006550:	61b8      	str	r0, [r7, #24]
        break;
 8006552:	e013      	b.n	800657c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fd f934 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8006558:	61b8      	str	r0, [r7, #24]
        break;
 800655a:	e00f      	b.n	800657c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <UART_SetConfig+0x4c4>)
 800655e:	61bb      	str	r3, [r7, #24]
        break;
 8006560:	e00c      	b.n	800657c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fd f807 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8006566:	61b8      	str	r0, [r7, #24]
        break;
 8006568:	e008      	b.n	800657c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	61bb      	str	r3, [r7, #24]
        break;
 8006570:	e004      	b.n	800657c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	77bb      	strb	r3, [r7, #30]
        break;
 800657a:	bf00      	nop
    }

    if (pclk != 0U)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	085a      	lsrs	r2, r3, #1
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	441a      	add	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b0f      	cmp	r3, #15
 800659a:	d909      	bls.n	80065b0 <UART_SetConfig+0x4a0>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a2:	d205      	bcs.n	80065b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e001      	b.n	80065b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40007c00 	.word	0x40007c00
 80065d0:	40023800 	.word	0x40023800
 80065d4:	00f42400 	.word	0x00f42400

080065d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01a      	beq.n	80066ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d6:	d10a      	bne.n	80066ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800672c:	f7fb f8c2 	bl	80018b4 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10e      	bne.n	800675e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f81b 	bl	800678a <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e011      	b.n	8006782 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b09c      	sub	sp, #112	; 0x70
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	e0a7      	b.n	80068ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	f000 80a3 	beq.w	80068ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fb f885 	bl	80018b4 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <UART_WaitOnFlagUntilTimeout+0x32>
 80067b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d13f      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d0:	667b      	str	r3, [r7, #100]	; 0x64
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3308      	adds	r3, #8
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	663b      	str	r3, [r7, #96]	; 0x60
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800680e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e068      	b.n	800690e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d050      	beq.n	80068ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006858:	d148      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006862:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
 8006884:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e6      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	613b      	str	r3, [r7, #16]
   return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068b6:	623a      	str	r2, [r7, #32]
 80068b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	69f9      	ldr	r1, [r7, #28]
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e010      	b.n	800690e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69da      	ldr	r2, [r3, #28]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4013      	ands	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	461a      	mov	r2, r3
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	429a      	cmp	r2, r3
 8006908:	f43f af48 	beq.w	800679c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3770      	adds	r7, #112	; 0x70
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006916:	b480      	push	{r7}
 8006918:	b095      	sub	sp, #84	; 0x54
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	643b      	str	r3, [r7, #64]	; 0x40
 800693e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e6      	bne.n	800691e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	64bb      	str	r3, [r7, #72]	; 0x48
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e5      	bne.n	8006950 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006988:	2b01      	cmp	r3, #1
 800698a:	d118      	bne.n	80069be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	60bb      	str	r3, [r7, #8]
   return(result);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	613b      	str	r3, [r7, #16]
   return(result);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069d2:	bf00      	nop
 80069d4:	3754      	adds	r7, #84	; 0x54
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff fb71 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b088      	sub	sp, #32
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	61bb      	str	r3, [r7, #24]
 8006a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6979      	ldr	r1, [r7, #20]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e6      	bne.n	8006a12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fb3d 	bl	80060d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a56:	bf00      	nop
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a60:	b084      	sub	sp, #16
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	f107 001c 	add.w	r0, r7, #28
 8006a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d120      	bne.n	8006aba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	4b20      	ldr	r3, [pc, #128]	; (8006b0c <USB_CoreInit+0xac>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d105      	bne.n	8006aae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa96 	bl	8006fe0 <USB_CoreReset>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
 8006ab8:	e010      	b.n	8006adc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa8a 	bl	8006fe0 <USB_CoreReset>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d10b      	bne.n	8006afa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f043 0206 	orr.w	r2, r3, #6
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b06:	b004      	add	sp, #16
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	ffbdffbf 	.word	0xffbdffbf

08006b10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f023 0201 	bic.w	r2, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d115      	bne.n	8006b80 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b60:	2001      	movs	r0, #1
 8006b62:	f7fa feb3 	bl	80018cc <HAL_Delay>
      ms++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa29 	bl	8006fc4 <USB_GetMode>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d01e      	beq.n	8006bb6 <USB_SetCurrentMode+0x84>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b31      	cmp	r3, #49	; 0x31
 8006b7c:	d9f0      	bls.n	8006b60 <USB_SetCurrentMode+0x2e>
 8006b7e:	e01a      	b.n	8006bb6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d115      	bne.n	8006bb2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b92:	2001      	movs	r0, #1
 8006b94:	f7fa fe9a 	bl	80018cc <HAL_Delay>
      ms++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa10 	bl	8006fc4 <USB_GetMode>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <USB_SetCurrentMode+0x84>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b31      	cmp	r3, #49	; 0x31
 8006bae:	d9f0      	bls.n	8006b92 <USB_SetCurrentMode+0x60>
 8006bb0:	e001      	b.n	8006bb6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e005      	b.n	8006bc2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b32      	cmp	r3, #50	; 0x32
 8006bba:	d101      	bne.n	8006bc0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bcc:	b084      	sub	sp, #16
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	613b      	str	r3, [r7, #16]
 8006bea:	e009      	b.n	8006c00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3340      	adds	r3, #64	; 0x40
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b0e      	cmp	r3, #14
 8006c04:	d9f2      	bls.n	8006bec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11c      	bne.n	8006c46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1a:	f043 0302 	orr.w	r3, r3, #2
 8006c1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e005      	b.n	8006c52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	4619      	mov	r1, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	680b      	ldr	r3, [r1, #0]
 8006c70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d10c      	bne.n	8006c92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f965 	bl	8006f50 <USB_SetDevSpeed>
 8006c86:	e008      	b.n	8006c9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c88:	2101      	movs	r1, #1
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f960 	bl	8006f50 <USB_SetDevSpeed>
 8006c90:	e003      	b.n	8006c9a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c92:	2103      	movs	r1, #3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f95b 	bl	8006f50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c9a:	2110      	movs	r1, #16
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f8f3 	bl	8006e88 <USB_FlushTxFifo>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f91f 	bl	8006ef0 <USB_FlushRxFifo>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	e043      	b.n	8006d6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cfc:	d118      	bne.n	8006d30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d10:	461a      	mov	r2, r3
 8006d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e013      	b.n	8006d42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	461a      	mov	r2, r3
 8006d28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	e008      	b.n	8006d42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2300      	movs	r3, #0
 8006d40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d60:	461a      	mov	r2, r3
 8006d62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d3b7      	bcc.n	8006ce6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e043      	b.n	8006e04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d92:	d118      	bne.n	8006dc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	461a      	mov	r2, r3
 8006da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	e013      	b.n	8006dd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dc2:	6013      	str	r3, [r2, #0]
 8006dc4:	e008      	b.n	8006dd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df6:	461a      	mov	r2, r3
 8006df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3301      	adds	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d3b7      	bcc.n	8006d7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f043 0210 	orr.w	r2, r3, #16
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <USB_DevInit+0x2b4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f043 0208 	orr.w	r2, r3, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d105      	bne.n	8006e70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <USB_DevInit+0x2b8>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e7c:	b004      	add	sp, #16
 8006e7e:	4770      	bx	lr
 8006e80:	803c3800 	.word	0x803c3800
 8006e84:	40000004 	.word	0x40000004

08006e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a13      	ldr	r2, [pc, #76]	; (8006eec <USB_FlushTxFifo+0x64>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e01b      	b.n	8006ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	daf2      	bge.n	8006e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	019b      	lsls	r3, r3, #6
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <USB_FlushTxFifo+0x64>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d901      	bls.n	8006ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e006      	b.n	8006ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0320 	and.w	r3, r3, #32
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d0f0      	beq.n	8006ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	00030d40 	.word	0x00030d40

08006ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <USB_FlushRxFifo+0x5c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d901      	bls.n	8006f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e018      	b.n	8006f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	daf2      	bge.n	8006efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <USB_FlushRxFifo+0x5c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e006      	b.n	8006f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d0f0      	beq.n	8006f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	00030d40 	.word	0x00030d40

08006f50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f70:	4313      	orrs	r3, r2
 8006f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fb0:	f043 0302 	orr.w	r3, r3, #2
 8006fb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a13      	ldr	r2, [pc, #76]	; (8007044 <USB_CoreReset+0x64>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e01b      	b.n	8007036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	daf2      	bge.n	8006fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <USB_CoreReset+0x64>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d901      	bls.n	8007028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d0f0      	beq.n	8007016 <USB_CoreReset+0x36>

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	00030d40 	.word	0x00030d40

08007048 <memset>:
 8007048:	4402      	add	r2, r0
 800704a:	4603      	mov	r3, r0
 800704c:	4293      	cmp	r3, r2
 800704e:	d100      	bne.n	8007052 <memset+0xa>
 8007050:	4770      	bx	lr
 8007052:	f803 1b01 	strb.w	r1, [r3], #1
 8007056:	e7f9      	b.n	800704c <memset+0x4>

08007058 <__libc_init_array>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	4d0d      	ldr	r5, [pc, #52]	; (8007090 <__libc_init_array+0x38>)
 800705c:	4c0d      	ldr	r4, [pc, #52]	; (8007094 <__libc_init_array+0x3c>)
 800705e:	1b64      	subs	r4, r4, r5
 8007060:	10a4      	asrs	r4, r4, #2
 8007062:	2600      	movs	r6, #0
 8007064:	42a6      	cmp	r6, r4
 8007066:	d109      	bne.n	800707c <__libc_init_array+0x24>
 8007068:	4d0b      	ldr	r5, [pc, #44]	; (8007098 <__libc_init_array+0x40>)
 800706a:	4c0c      	ldr	r4, [pc, #48]	; (800709c <__libc_init_array+0x44>)
 800706c:	f000 f818 	bl	80070a0 <_init>
 8007070:	1b64      	subs	r4, r4, r5
 8007072:	10a4      	asrs	r4, r4, #2
 8007074:	2600      	movs	r6, #0
 8007076:	42a6      	cmp	r6, r4
 8007078:	d105      	bne.n	8007086 <__libc_init_array+0x2e>
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007080:	4798      	blx	r3
 8007082:	3601      	adds	r6, #1
 8007084:	e7ee      	b.n	8007064 <__libc_init_array+0xc>
 8007086:	f855 3b04 	ldr.w	r3, [r5], #4
 800708a:	4798      	blx	r3
 800708c:	3601      	adds	r6, #1
 800708e:	e7f2      	b.n	8007076 <__libc_init_array+0x1e>
 8007090:	080070d8 	.word	0x080070d8
 8007094:	080070d8 	.word	0x080070d8
 8007098:	080070d8 	.word	0x080070d8
 800709c:	080070dc 	.word	0x080070dc

080070a0 <_init>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr

080070ac <_fini>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr
