
Prodzektv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000910c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b8  080094b8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08009558  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  080095f8  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a48  200001d8  08009698  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c20  08009698  00020c20  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001abd8  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003f3c  00000000  00000000  0003ae23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001610  00000000  00000000  0003ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000010e3  00000000  00000000  00040370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a42b  00000000  00000000  00041453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001da5f  00000000  00000000  0006b87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fef44  00000000  00000000  000892dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000062fc  00000000  00000000  00188224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  0018e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092c4 	.word	0x080092c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080092c4 	.word	0x080092c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <BTN_DIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button DIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_DIO_State_TypeDef BTN_DIO_Read(const BTN_DIO_Handle_TypeDef* hbtn)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	_Bool state = DIO_Read(&(hbtn->Input));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f836 	bl	8000638 <DIO_Read>
 80005cc:	4603      	mov	r3, r0
 80005ce:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7a1b      	ldrb	r3, [r3, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <BTN_DIO_Read+0x20>
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	e003      	b.n	80005e4 <BTN_DIO_Read+0x28>
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f083 0301 	eor.w	r3, r3, #1
 80005e2:	b2db      	uxtb	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BTN_DIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button DIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_DIO_Edge_TypeDef BTN_DIO_EdgeDetected(BTN_DIO_Handle_TypeDef* hbtn)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	BTN_DIO_State_TypeDef state = BTN_DIO_Read(hbtn);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe1 	bl	80005bc <BTN_DIO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73bb      	strb	r3, [r7, #14]
	BTN_DIO_Edge_TypeDef edge = BTN_NO_EDGE;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d106      	bne.n	8000616 <BTN_DIO_EdgeDetected+0x2a>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7a5b      	ldrb	r3, [r3, #9]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d102      	bne.n	8000616 <BTN_DIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e008      	b.n	8000628 <BTN_DIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d105      	bne.n	8000628 <BTN_DIO_EdgeDetected+0x3c>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7a5b      	ldrb	r3, [r3, #9]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <BTN_DIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000624:	2302      	movs	r3, #2
 8000626:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7bba      	ldrb	r2, [r7, #14]
 800062c:	725a      	strb	r2, [r3, #9]
	return edge;
 800062e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <DIO_Read>:
 * @brief Reads digital input
 * @param[in] hdio  : Digital I/O handler
 * @retval Input state (0 or 1)
 */
_Bool DIO_Read(const DIO_Handle_TypeDef* hdio)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  return (_Bool)HAL_GPIO_ReadPin(hdio->Port, hdio->Pin);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	889b      	ldrh	r3, [r3, #4]
 8000648:	4619      	mov	r1, r3
 800064a:	4610      	mov	r0, r2
 800064c:	f002 fe0c 	bl	8003268 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	bf14      	ite	ne
 8000656:	2301      	movne	r3, #1
 8000658:	2300      	moveq	r3, #0
 800065a:	b2db      	uxtb	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Lcd_create>:

Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000664:	b5b0      	push	{r4, r5, r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000672:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800067a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800067e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000682:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000684:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000686:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f80e 	bl	80006ba <Lcd_init>

	return lcd;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	461d      	mov	r5, r3
 80006a2:	f107 0410 	add.w	r4, r7, #16
 80006a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80006b2:	68f8      	ldr	r0, [r7, #12]
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}

080006ba <Lcd_init>:

void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	7d9b      	ldrb	r3, [r3, #22]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10c      	bne.n	80006e4 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80006ca:	2133      	movs	r1, #51	; 0x33
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f87b 	bl	80007c8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80006d2:	2132      	movs	r1, #50	; 0x32
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f877 	bl	80007c8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80006da:	2128      	movs	r1, #40	; 0x28
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f873 	bl	80007c8 <lcd_write_command>
 80006e2:	e003      	b.n	80006ec <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80006e4:	2138      	movs	r1, #56	; 0x38
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f86e 	bl	80007c8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f86a 	bl	80007c8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80006f4:	210c      	movs	r1, #12
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f866 	bl	80007c8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80006fc:	2106      	movs	r1, #6
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f862 	bl	80007c8 <lcd_write_command>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <Lcd_int>:
	}
	strncpy(buffer_out, buffer, period + 4);
	Lcd_string(lcd, buffer_out);
}
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4906      	ldr	r1, [pc, #24]	; (8000738 <Lcd_int+0x2c>)
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fc72 	bl	8008008 <siprintf>
	Lcd_string(lcd, buffer);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f806 	bl	800073c <Lcd_string>
}
 8000730:	bf00      	nop
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	080092e0 	.word	0x080092e0

0800073c <Lcd_string>:

void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e00a      	b.n	8000762 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f864 	bl	8000824 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	3301      	adds	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	7bfc      	ldrb	r4, [r7, #15]
 8000764:	6838      	ldr	r0, [r7, #0]
 8000766:	f7ff fd53 	bl	8000210 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	429c      	cmp	r4, r3
 800076e:	d3ed      	bcc.n	800074c <Lcd_string+0x10>
	}
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <Lcd_cursor>:


void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
 8000788:	4613      	mov	r3, r2
 800078a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <Lcd_cursor+0x30>)
 8000790:	5cd2      	ldrb	r2, [r2, r3]
 8000792:	78bb      	ldrb	r3, [r7, #2]
 8000794:	4413      	add	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	3b80      	subs	r3, #128	; 0x80
 800079a:	b2db      	uxtb	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f812 	bl	80007c8 <lcd_write_command>
	#endif
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08009344 	.word	0x08009344

080007b0 <Lcd_clear>:


void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80007b8:	2101      	movs	r1, #1
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f804 	bl	80007c8 <lcd_write_command>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_write_command>:

/************************************** Static function definition **************************************/


void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6898      	ldr	r0, [r3, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f002 fd5a 	bl	8003298 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7d9b      	ldrb	r3, [r3, #22]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d111      	bne.n	8000810 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	091b      	lsrs	r3, r3, #4
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2204      	movs	r2, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f842 	bl	8000880 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2204      	movs	r2, #4
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f839 	bl	8000880 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800080e:	e005      	b.n	800081c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2208      	movs	r2, #8
 8000814:	4619      	mov	r1, r3
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f832 	bl	8000880 <lcd_write>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_write_data>:


void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6898      	ldr	r0, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	899b      	ldrh	r3, [r3, #12]
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	f002 fd2c 	bl	8003298 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7d9b      	ldrb	r3, [r3, #22]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d111      	bne.n	800086c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2204      	movs	r2, #4
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f000 f814 	bl	8000880 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2204      	movs	r2, #4
 8000862:	4619      	mov	r1, r3
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f80b 	bl	8000880 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800086a:	e005      	b.n	8000878 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	2208      	movs	r2, #8
 8000870:	4619      	mov	r1, r3
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 f804 	bl	8000880 <lcd_write>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <lcd_write>:


void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
 800088c:	4613      	mov	r3, r2
 800088e:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e019      	b.n	80008ca <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	6818      	ldr	r0, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	8819      	ldrh	r1, [r3, #0]
 80008ae:	78fa      	ldrb	r2, [r7, #3]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	fa42 f303 	asr.w	r3, r2, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	f002 fcea 	bl	8003298 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	3301      	adds	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	78bb      	ldrb	r3, [r7, #2]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d3e1      	bcc.n	8000896 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6918      	ldr	r0, [r3, #16]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	8a9b      	ldrh	r3, [r3, #20]
 80008da:	2201      	movs	r2, #1
 80008dc:	4619      	mov	r1, r3
 80008de:	f002 fcdb 	bl	8003298 <HAL_GPIO_WritePin>
	DELAY(1);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f001 fb92 	bl	800200c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6918      	ldr	r0, [r3, #16]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	8a9b      	ldrh	r3, [r3, #20]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f002 fcd0 	bl	8003298 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC1_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC1_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC1_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC1_Init+0x98>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC1_Init+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC1_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ADC1_Init+0x98>)
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC1_Init+0xa0>)
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_ADC1_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC1_Init+0x98>)
 800095a:	2201      	movs	r2, #1
 800095c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_ADC1_Init+0x98>)
 8000960:	f001 fb78 	bl	8002054 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fcc3 	bl	80012f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000972:	2301      	movs	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_ADC1_Init+0x98>)
 8000980:	f001 fbac 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800098a:	f000 fcb3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001f4 	.word	0x200001f4
 800099c:	40012000 	.word	0x40012000
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x74>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d123      	bne.n	8000a0e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x78>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x7c>)
 8000a0a:	f002 fa81 	bl	8002f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a2a:	4a20      	ldr	r2, [pc, #128]	; (8000aac <MX_ETH_Init+0x88>)
 8000a2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a3c:	22e1      	movs	r2, #225	; 0xe1
 8000a3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <MX_ETH_Init+0x8c>)
 8000a56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a5e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <MX_ETH_Init+0x90>)
 8000a64:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <MX_ETH_Init+0x94>)
 8000a6a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a72:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_ETH_Init+0x84>)
 8000a76:	f001 ff25 	bl	80028c4 <HAL_ETH_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 fc38 	bl	80012f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a84:	2238      	movs	r2, #56	; 0x38
 8000a86:	2100      	movs	r1, #0
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_ETH_Init+0x98>)
 8000a8a:	f007 fb0b 	bl	80080a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_ETH_Init+0x98>)
 8000a90:	2221      	movs	r2, #33	; 0x21
 8000a92:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_ETH_Init+0x98>)
 8000a96:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a9a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_ETH_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000274 	.word	0x20000274
 8000aac:	40028000 	.word	0x40028000
 8000ab0:	20000324 	.word	0x20000324
 8000ab4:	20000138 	.word	0x20000138
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	2000023c 	.word	0x2000023c

08000ac0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a4e      	ldr	r2, [pc, #312]	; (8000c18 <HAL_ETH_MspInit+0x158>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	f040 8096 	bne.w	8000c10 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ae4:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000aea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af8:	623b      	str	r3, [r7, #32]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a46      	ldr	r2, [pc, #280]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b44      	ldr	r3, [pc, #272]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b10:	61fb      	str	r3, [r7, #28]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a40      	ldr	r2, [pc, #256]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2c:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a2e      	ldr	r2, [pc, #184]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b74:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b8c:	2332      	movs	r3, #50	; 0x32
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_ETH_MspInit+0x160>)
 8000ba8:	f002 f9b2 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bac:	2386      	movs	r3, #134	; 0x86
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4817      	ldr	r0, [pc, #92]	; (8000c24 <HAL_ETH_MspInit+0x164>)
 8000bc8:	f002 f9a2 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <HAL_ETH_MspInit+0x168>)
 8000bea:	f002 f991 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <HAL_ETH_MspInit+0x16c>)
 8000c0c:	f002 f980 	bl	8002f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000c10:	bf00      	nop
 8000c12:	3738      	adds	r7, #56	; 0x38
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021800 	.word	0x40021800

08000c30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b75      	ldr	r3, [pc, #468]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a74      	ldr	r2, [pc, #464]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b72      	ldr	r3, [pc, #456]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	4b6f      	ldr	r3, [pc, #444]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a6e      	ldr	r2, [pc, #440]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	4b69      	ldr	r3, [pc, #420]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a68      	ldr	r2, [pc, #416]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a62      	ldr	r2, [pc, #392]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a5c      	ldr	r2, [pc, #368]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbe:	4b57      	ldr	r3, [pc, #348]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a56      	ldr	r2, [pc, #344]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd6:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b4e      	ldr	r3, [pc, #312]	; (8000e1c <MX_GPIO_Init+0x1ec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8000cf4:	484a      	ldr	r0, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000cf6:	f002 facf 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D5_Pin|D6_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2109      	movs	r1, #9
 8000cfe:	4849      	ldr	r0, [pc, #292]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d00:	f002 faca 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2108      	movs	r1, #8
 8000d08:	4847      	ldr	r0, [pc, #284]	; (8000e28 <MX_GPIO_Init+0x1f8>)
 8000d0a:	f002 fac5 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d14:	4845      	ldr	r0, [pc, #276]	; (8000e2c <MX_GPIO_Init+0x1fc>)
 8000d16:	f002 fabf 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	4844      	ldr	r0, [pc, #272]	; (8000e30 <MX_GPIO_Init+0x200>)
 8000d20:	f002 faba 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	483a      	ldr	r0, [pc, #232]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d3c:	f002 f8e8 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin|E_Pin;
 8000d40:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4831      	ldr	r0, [pc, #196]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000d5a:	f002 f8d9 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D5_Pin|D6_Pin;
 8000d5e:	2309      	movs	r3, #9
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	482b      	ldr	r0, [pc, #172]	; (8000e24 <MX_GPIO_Init+0x1f4>)
 8000d76:	f002 f8cb 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4825      	ldr	r0, [pc, #148]	; (8000e28 <MX_GPIO_Init+0x1f8>)
 8000d92:	f002 f8bd 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d96:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	481f      	ldr	r0, [pc, #124]	; (8000e2c <MX_GPIO_Init+0x1fc>)
 8000db0:	f002 f8ae 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tach_Pin;
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Tach_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4815      	ldr	r0, [pc, #84]	; (8000e20 <MX_GPIO_Init+0x1f0>)
 8000dcc:	f002 f8a0 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_GPIO_Init+0x200>)
 8000de8:	f002 f892 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_GPIO_Init+0x200>)
 8000e00:	f002 f886 	bl	8002f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f001 fc92 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e0e:	2028      	movs	r0, #40	; 0x28
 8000e10:	f001 fcab 	bl	800276a <HAL_NVIC_EnableIRQ>

}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	; 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40021400 	.word	0x40021400
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40021800 	.word	0x40021800

08000e34 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	/********************************************//**
	 *  Pomiar z tachometru
	 ***********************************************/


	if(htim == &htim2)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d153      	bne.n	8000eec <HAL_TIM_IC_CaptureCallback+0xb8>
	{
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	482b      	ldr	r0, [pc, #172]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000e4a:	f002 fa25 	bl	8003298 <HAL_GPIO_WritePin>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7f1b      	ldrb	r3, [r3, #28]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d14a      	bne.n	8000eec <HAL_TIM_IC_CaptureCallback+0xb8>
				{
					if (Is_First_Captured==0) // if the first rising edge is not captured
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10a      	bne.n	8000e74 <HAL_TIM_IC_CaptureCallback+0x40>
					{
						IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e5e:	2100      	movs	r1, #0
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f004 fd0b 	bl	800587c <HAL_TIM_ReadCapturedValue>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e6a:	6013      	str	r3, [r2, #0]
						Is_First_Captured = 1;  // set the first captured as true
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
						Is_First_Captured = 0; // set it back to false
				}
			}
	}
}
 8000e72:	e03b      	b.n	8000eec <HAL_TIM_IC_CaptureCallback+0xb8>
						IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e74:	2100      	movs	r1, #0
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f004 fd00 	bl	800587c <HAL_TIM_ReadCapturedValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e80:	6013      	str	r3, [r2, #0]
						if (IC_Val2 > IC_Val1)
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d907      	bls.n	8000e9e <HAL_TIM_IC_CaptureCallback+0x6a>
							Difference = IC_Val2-IC_Val1;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e00d      	b.n	8000eba <HAL_TIM_IC_CaptureCallback+0x86>
						else if (IC_Val1 > IC_Val2)
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d907      	bls.n	8000eba <HAL_TIM_IC_CaptureCallback+0x86>
							Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000eb8:	6013      	str	r3, [r2, #0]
						frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // read frequency from timer clock
 8000eba:	f003 f825 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000eca:	6013      	str	r3, [r2, #0]
						rpm = frequency*30;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000edc:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
						Is_First_Captured = 0; // set it back to false
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000037c 	.word	0x2000037c
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	20000344 	.word	0x20000344
 8000f00:	20000338 	.word	0x20000338
 8000f04:	2000033c 	.word	0x2000033c
 8000f08:	20000340 	.word	0x20000340
 8000f0c:	20000348 	.word	0x20000348
 8000f10:	2000032c 	.word	0x2000032c

08000f14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a43      	ldr	r2, [pc, #268]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d165      	bne.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0xdc>
	  /********************************************//**
	   *  Sterowanie pwm za pomocą regulatora PID
	   ***********************************************/


		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b42      	ldr	r3, [pc, #264]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
	  	  Duty = PID_GetOutput(&hpid1, rpm_ref, rpm);
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	ee07 3a10 	vmov	s14, r3
 8000f42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f46:	eef0 0a47 	vmov.f32	s1, s14
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	483c      	ldr	r0, [pc, #240]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000f50:	f000 f9d5 	bl	80012fe <PID_GetOutput>
 8000f54:	eef0 7a40 	vmov.f32	s15, s0
 8000f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5c:	ee17 2a90 	vmov	r2, s15
 8000f60:	4b33      	ldr	r3, [pc, #204]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f62:	601a      	str	r2, [r3, #0]
	  	  e = rpm_ref - rpm;
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b34      	ldr	r3, [pc, #208]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
		  /********************************************//**
		   *  Zmiana trybu sterowania wartością ustalaną
		   ***********************************************/


	  	if(BTN_DIO_EdgeDetected(&husrbtn) == BTN_PRESSED_EDGE){
 8000f7c:	4832      	ldr	r0, [pc, #200]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000f7e:	f7ff fb35 	bl	80005ec <BTN_DIO_EdgeDetected>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d111      	bne.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x98>
	  		if (mode == 1)
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_TIM_PeriodElapsedCallback+0x84>
	  			mode = 0;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e009      	b.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x98>
	  		else if(mode == 0)
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x98>
	  			mode=1;
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
		  /********************************************//**
		   *  Sterowanie wartością ustalaną za pomocą enkodera
		   ***********************************************/


	  	enc_raw = __HAL_TIM_GET_COUNTER(&htim8);
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fb6:	601a      	str	r2, [r3, #0]
	  	if(enc_raw<100)
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b63      	cmp	r3, #99	; 0x63
 8000fbe:	dc06      	bgt.n	8000fce <HAL_TIM_PeriodElapsedCallback+0xba>
	  		enc_mod=1000+enc_raw;  // if enc value is below the minimum work range put it to the minimum working value and add unmodified amount
 8000fc0:	4b24      	ldr	r3, [pc, #144]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fc8:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e008      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0xcc>
	  	else
	  		enc_mod=enc_raw * 10; // if enc value is within the work range multiply it for easier maneuverability
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000fde:	601a      	str	r2, [r3, #0]
 if(mode==1)
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0xdc>
	 rpm_ref = enc_mod;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000fee:	6013      	str	r3, [r2, #0]

  /********************************************//**
   *  Wysyłanie informacji o działaniu układu przez port szeregowy
   ***********************************************/

 if(htim == &htim7)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d115      	bne.n	8001024 <HAL_TIM_PeriodElapsedCallback+0x110>
 {
	 uint8_t tx_buffer[64];
	 int resp_len = sprintf((char*)tx_buffer, "{ \"RPM\":%d, \"RPM_REF\":%d, \"Duty\":%d }\r", rpm, rpm_ref, Duty); // Creating a message with RPM, RPM_REF, DUTY to send to termial
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f107 000c 	add.w	r0, r7, #12
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	460b      	mov	r3, r1
 800100c:	4914      	ldr	r1, [pc, #80]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800100e:	f006 fffb 	bl	8008008 <siprintf>
 8001012:	64f8      	str	r0, [r7, #76]	; 0x4c
	 HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8001014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001016:	b29a      	uxth	r2, r3
 8001018:	f107 010c 	add.w	r1, r7, #12
 800101c:	230a      	movs	r3, #10
 800101e:	4811      	ldr	r0, [pc, #68]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001020:	f005 fa70 	bl	8006504 <HAL_UART_Transmit>
	 }
 }
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000414 	.word	0x20000414
 8001030:	2000000c 	.word	0x2000000c
 8001034:	200003c8 	.word	0x200003c8
 8001038:	20000010 	.word	0x20000010
 800103c:	2000032c 	.word	0x2000032c
 8001040:	20000014 	.word	0x20000014
 8001044:	20000330 	.word	0x20000330
 8001048:	20000000 	.word	0x20000000
 800104c:	20000334 	.word	0x20000334
 8001050:	200004f8 	.word	0x200004f8
 8001054:	20000370 	.word	0x20000370
 8001058:	20000374 	.word	0x20000374
 800105c:	200004ac 	.word	0x200004ac
 8001060:	080092e4 	.word	0x080092e4
 8001064:	20000544 	.word	0x20000544

08001068 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	  /********************************************//**
	   *  Kontrolowanie wartości ustalanej za pomocą terminalu
	   ***********************************************/
	if(mode == 0){
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_UART_RxCpltCallback+0x40>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f083 0301 	eor.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <HAL_UART_RxCpltCallback+0x36>
  if(huart == &huart3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_UART_RxCpltCallback+0x44>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d104      	bne.n	8001090 <HAL_UART_RxCpltCallback+0x28>
	  {
      sscanf((char*)&rx_buffer, "%d", &rpm_ref); // Get value from terminal
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0x48>)
 8001088:	490a      	ldr	r1, [pc, #40]	; (80010b4 <HAL_UART_RxCpltCallback+0x4c>)
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <HAL_UART_RxCpltCallback+0x50>)
 800108c:	f006 ffdc 	bl	8008048 <siscanf>
	  }
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_UART_RxCpltCallback+0x54>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <HAL_UART_RxCpltCallback+0x50>)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <HAL_UART_RxCpltCallback+0x44>)
 800109a:	f005 fab6 	bl	800660a <HAL_UART_Receive_IT>
}
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000334 	.word	0x20000334
 80010ac:	20000544 	.word	0x20000544
 80010b0:	20000010 	.word	0x20000010
 80010b4:	0800930c 	.word	0x0800930c
 80010b8:	2000034c 	.word	0x2000034c
 80010bc:	2000036c 	.word	0x2000036c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b091      	sub	sp, #68	; 0x44
 80010c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 ff44 	bl	8001f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f8ab 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f7ff fdaf 	bl	8000c30 <MX_GPIO_Init>
  MX_ETH_Init();
 80010d2:	f7ff fca7 	bl	8000a24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010d6:	f000 fdd3 	bl	8001c80 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010da:	f000 fe69 	bl	8001db0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80010de:	f000 fa9d 	bl	800161c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010e2:	f000 faef 	bl	80016c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010e6:	f000 fb6b 	bl	80017c0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80010ea:	f000 fbb9 	bl	8001860 <MX_TIM6_Init>
  MX_TIM7_Init();
 80010ee:	f000 fbed 	bl	80018cc <MX_TIM7_Init>
  MX_ADC1_Init();
 80010f2:	f7ff fc05 	bl	8000900 <MX_ADC1_Init>
  MX_TIM8_Init();
 80010f6:	f000 fc21 	bl	800193c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Inicjacja timerów //
  HAL_TIM_Base_Start_IT(&htim2);
 80010fa:	483b      	ldr	r0, [pc, #236]	; (80011e8 <main+0x128>)
 80010fc:	f003 fb74 	bl	80047e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001100:	2100      	movs	r1, #0
 8001102:	4839      	ldr	r0, [pc, #228]	; (80011e8 <main+0x128>)
 8001104:	f003 fd9c 	bl	8004c40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	4838      	ldr	r0, [pc, #224]	; (80011ec <main+0x12c>)
 800110c:	f003 fc46 	bl	800499c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001110:	4837      	ldr	r0, [pc, #220]	; (80011f0 <main+0x130>)
 8001112:	f003 fb69 	bl	80047e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8001116:	4837      	ldr	r0, [pc, #220]	; (80011f4 <main+0x134>)
 8001118:	f003 fb66 	bl	80047e8 <HAL_TIM_Base_Start_IT>
  msg_len = strlen("000\r");
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <main+0x138>)
 800111e:	2204      	movs	r2, #4
 8001120:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <main+0x138>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <main+0x13c>)
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <main+0x140>)
 800112c:	f005 fa6d 	bl	800660a <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001130:	213c      	movs	r1, #60	; 0x3c
 8001132:	4834      	ldr	r0, [pc, #208]	; (8001204 <main+0x144>)
 8001134:	f003 ff7a 	bl	800502c <HAL_TIM_Encoder_Start>

  // Inicjacja lcd //
  Lcd_PortType ports[] = {
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <main+0x148>)
 800113a:	f107 0420 	add.w	r4, r7, #32
 800113e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 		  D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
  };
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <main+0x14c>)
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114e:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, E_GPIO_Port, E_Pin, LCD_4_BIT_MODE);
 8001152:	4638      	mov	r0, r7
 8001154:	f107 0218 	add.w	r2, r7, #24
 8001158:	f107 0120 	add.w	r1, r7, #32
 800115c:	2300      	movs	r3, #0
 800115e:	9303      	str	r3, [sp, #12]
 8001160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <main+0x150>)
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2320      	movs	r3, #32
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <main+0x150>)
 8001170:	f7ff fa78 	bl	8000664 <Lcd_create>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f000 ff48 	bl	800200c <HAL_Delay>
	  	  Lcd_clear(&lcd);
 800117c:	463b      	mov	r3, r7
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb16 	bl	80007b0 <Lcd_clear>
	  	  Lcd_cursor(&lcd, 0,1);
 8001184:	463b      	mov	r3, r7
 8001186:	2201      	movs	r2, #1
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff faf6 	bl	800077c <Lcd_cursor>
	  	  Lcd_string(&lcd, "RPM: ");
 8001190:	463b      	mov	r3, r7
 8001192:	4920      	ldr	r1, [pc, #128]	; (8001214 <main+0x154>)
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fad1 	bl	800073c <Lcd_string>
	  	  Lcd_cursor(&lcd, 0,7);
 800119a:	463b      	mov	r3, r7
 800119c:	2207      	movs	r2, #7
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff faeb 	bl	800077c <Lcd_cursor>
	  	  Lcd_int(&lcd, rpm);
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <main+0x158>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	463b      	mov	r3, r7
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff faac 	bl	800070c <Lcd_int>
	  	  Lcd_cursor(&lcd, 1,1);
 80011b4:	463b      	mov	r3, r7
 80011b6:	2201      	movs	r2, #1
 80011b8:	2101      	movs	r1, #1
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fade 	bl	800077c <Lcd_cursor>
	  	  Lcd_string(&lcd, "REF: ");
 80011c0:	463b      	mov	r3, r7
 80011c2:	4916      	ldr	r1, [pc, #88]	; (800121c <main+0x15c>)
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fab9 	bl	800073c <Lcd_string>
	  	  Lcd_cursor(&lcd, 1,7);
 80011ca:	463b      	mov	r3, r7
 80011cc:	2207      	movs	r2, #7
 80011ce:	2101      	movs	r1, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fad3 	bl	800077c <Lcd_cursor>
	  	  Lcd_int(&lcd, rpm_ref);
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <main+0x160>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	463b      	mov	r3, r7
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fa94 	bl	800070c <Lcd_int>
	  	  HAL_Delay(1000);
 80011e4:	e7c6      	b.n	8001174 <main+0xb4>
 80011e6:	bf00      	nop
 80011e8:	2000037c 	.word	0x2000037c
 80011ec:	200003c8 	.word	0x200003c8
 80011f0:	20000414 	.word	0x20000414
 80011f4:	200004ac 	.word	0x200004ac
 80011f8:	2000036c 	.word	0x2000036c
 80011fc:	2000034c 	.word	0x2000034c
 8001200:	20000544 	.word	0x20000544
 8001204:	200004f8 	.word	0x200004f8
 8001208:	08009320 	.word	0x08009320
 800120c:	08009330 	.word	0x08009330
 8001210:	40021400 	.word	0x40021400
 8001214:	08009310 	.word	0x08009310
 8001218:	2000032c 	.word	0x2000032c
 800121c:	08009318 	.word	0x08009318
 8001220:	20000010 	.word	0x20000010

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	; 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	; 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 ff36 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001248:	f002 f9ac 	bl	80035a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <SystemClock_Config+0xc8>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	4a26      	ldr	r2, [pc, #152]	; (80012ec <SystemClock_Config+0xc8>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	; 0x40
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <SystemClock_Config+0xc8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <SystemClock_Config+0xcc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <SystemClock_Config+0xcc>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <SystemClock_Config+0xcc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001284:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001294:	2304      	movs	r3, #4
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001298:	2348      	movs	r3, #72	; 0x48
 800129a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012a0:	2303      	movs	r3, #3
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 f98b 	bl	80035c4 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b4:	f000 f81e 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2102      	movs	r1, #2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fc19 	bl	8003b0c <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012e0:	f000 f808 	bl	80012f4 <Error_Handler>
  }
}
 80012e4:	bf00      	nop
 80012e6:	3750      	adds	r7, #80	; 0x50
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>

080012fe <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}

float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 80012fe:	b480      	push	{r7}
 8001300:	b089      	sub	sp, #36	; 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	ed87 0a02 	vstr	s0, [r7, #8]
 800130a:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 800130e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001312:	edd7 7a01 	vldr	s15, [r7, #4]
 8001316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131a:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	ed93 7a06 	vldr	s14, [r3, #24]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	edd3 6a01 	vldr	s13, [r3, #4]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001330:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001334:	edd7 7a06 	vldr	s15, [r7, #24]
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	ed93 7a02 	vldr	s14, [r3, #8]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a05 	vldr	s15, [r3, #20]
 800135c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001360:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	edd3 6a03 	vldr	s13, [r3, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	edd3 7a04 	vldr	s15, [r3, #16]
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800137c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	edd3 7a07 	vldr	s15, [r3, #28]
 8001386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80013c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd03      	ble.n	80013dc <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e00f      	b.n	80013fc <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d503      	bpl.n	80013f8 <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e001      	b.n	80013fc <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 80013fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001400:	edd7 7a07 	vldr	s15, [r7, #28]
 8001404:	eeb4 7a67 	vcmp.f32	s14, s15
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	d013      	beq.n	8001436 <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	ed93 7a06 	vldr	s14, [r3, #24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edd3 6a01 	vldr	s13, [r3, #4]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001420:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001424:	edd7 7a06 	vldr	s15, [r7, #24]
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ee07 3a90 	vmov	s15, r3
}
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_MspInit+0x44>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_MspInit+0x44>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_MspInit+0x44>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x44>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x44>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 fd74 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM2_IRQHandler+0x10>)
 80014ee:	f003 fe2b 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000037c 	.word	0x2000037c

080014fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM3_IRQHandler+0x10>)
 8001502:	f003 fe21 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200003c8 	.word	0x200003c8

08001510 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM4_IRQHandler+0x10>)
 8001516:	f003 fe17 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000414 	.word	0x20000414

08001524 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <USART3_IRQHandler+0x10>)
 800152a:	f005 f8b3 	bl	8006694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000544 	.word	0x20000544

08001538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tach_Pin);
 800153c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001540:	f001 fec4 	bl	80032cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001544:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001548:	f001 fec0 	bl	80032cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001556:	f003 fdf7 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200004f8 	.word	0x200004f8

08001564 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800156a:	f003 fded 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200004f8 	.word	0x200004f8

08001578 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM7_IRQHandler+0x10>)
 800157e:	f003 fde3 	bl	8005148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200004ac 	.word	0x200004ac

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f006 fd7a 	bl	80080b4 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20050000 	.word	0x20050000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000378 	.word	0x20000378
 80015f4:	20000c20 	.word	0x20000c20

080015f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_TIM2_Init+0xa4>)
 800163c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_TIM2_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM2_Init+0xa4>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_TIM2_Init+0xa4>)
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_TIM2_Init+0xa4>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0xa4>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001662:	4817      	ldr	r0, [pc, #92]	; (80016c0 <MX_TIM2_Init+0xa4>)
 8001664:	f003 fa94 	bl	8004b90 <HAL_TIM_IC_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800166e:	f7ff fe41 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_TIM2_Init+0xa4>)
 8001682:	f004 fe45 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800168c:	f7ff fe32 	bl	80012f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_TIM2_Init+0xa4>)
 80016a8:	f003 fe6d 	bl	8005386 <HAL_TIM_IC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016b2:	f7ff fe1f 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000037c 	.word	0x2000037c

080016c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08e      	sub	sp, #56	; 0x38
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <MX_TIM3_Init+0xf4>)
 80016f8:	4a30      	ldr	r2, [pc, #192]	; (80017bc <MX_TIM3_Init+0xf8>)
 80016fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <MX_TIM3_Init+0xf4>)
 80016fe:	221b      	movs	r2, #27
 8001700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <MX_TIM3_Init+0xf4>)
 800170a:	2263      	movs	r2, #99	; 0x63
 800170c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800171a:	4827      	ldr	r0, [pc, #156]	; (80017b8 <MX_TIM3_Init+0xf4>)
 800171c:	f003 f80c 	bl	8004738 <HAL_TIM_Base_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001726:	f7ff fde5 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001730:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001734:	4619      	mov	r1, r3
 8001736:	4820      	ldr	r0, [pc, #128]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001738:	f003 ffd6 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001742:	f7ff fdd7 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001746:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001748:	f003 f8c6 	bl	80048d8 <HAL_TIM_PWM_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001752:	f7ff fdcf 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	; (80017b8 <MX_TIM3_Init+0xf4>)
 8001766:	f004 fdd3 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001770:	f7ff fdc0 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 39;
 8001778:	2327      	movs	r3, #39	; 0x27
 800177a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	2200      	movs	r2, #0
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <MX_TIM3_Init+0xf4>)
 800178c:	f003 fe98 	bl	80054c0 <HAL_TIM_PWM_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001796:	f7ff fdad 	bl	80012f4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_TIM3_Init+0xf4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699a      	ldr	r2, [r3, #24]
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <MX_TIM3_Init+0xf4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <MX_TIM3_Init+0xf4>)
 80017ac:	f000 fa30 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80017b0:	bf00      	nop
 80017b2:	3738      	adds	r7, #56	; 0x38
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200003c8 	.word	0x200003c8
 80017bc:	40000400 	.word	0x40000400

080017c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_TIM4_Init+0x98>)
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <MX_TIM4_Init+0x9c>)
 80017e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_TIM4_Init+0x98>)
 80017e6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80017ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_TIM4_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <MX_TIM4_Init+0x98>)
 80017f4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_TIM4_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_TIM4_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001806:	4814      	ldr	r0, [pc, #80]	; (8001858 <MX_TIM4_Init+0x98>)
 8001808:	f002 ff96 	bl	8004738 <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001812:	f7ff fd6f 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_TIM4_Init+0x98>)
 8001824:	f003 ff60 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800182e:	f7ff fd61 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <MX_TIM4_Init+0x98>)
 8001840:	f004 fd66 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800184a:	f7ff fd53 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000414 	.word	0x20000414
 800185c:	40000800 	.word	0x40000800

08001860 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_TIM6_Init+0x64>)
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <MX_TIM6_Init+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_TIM6_Init+0x64>)
 8001878:	2247      	movs	r2, #71	; 0x47
 800187a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_TIM6_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_TIM6_Init+0x64>)
 8001884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001888:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_TIM6_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_TIM6_Init+0x64>)
 8001892:	f002 ff51 	bl	8004738 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800189c:	f7ff fd2a 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_TIM6_Init+0x64>)
 80018ae:	f004 fd2f 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f7ff fd1c 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000460 	.word	0x20000460
 80018c8:	40001000 	.word	0x40001000

080018cc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_TIM7_Init+0x68>)
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <MX_TIM7_Init+0x6c>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_TIM7_Init+0x68>)
 80018e4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80018e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_TIM7_Init+0x68>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_TIM7_Init+0x68>)
 80018f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_TIM7_Init+0x68>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_TIM7_Init+0x68>)
 8001900:	f002 ff1a 	bl	8004738 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800190a:	f7ff fcf3 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <MX_TIM7_Init+0x68>)
 800191c:	f004 fcf8 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001926:	f7ff fce5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200004ac 	.word	0x200004ac
 8001938:	40001400 	.word	0x40001400

0800193c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	2224      	movs	r2, #36	; 0x24
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f006 fbaa 	bl	80080a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <MX_TIM8_Init+0xac>)
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <MX_TIM8_Init+0xb0>)
 800195e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001960:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_TIM8_Init+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <MX_TIM8_Init+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 300;
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_TIM8_Init+0xac>)
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM8_Init+0xac>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_TIM8_Init+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM8_Init+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001986:	2303      	movs	r3, #3
 8001988:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800198e:	2301      	movs	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800199e:	2301      	movs	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4619      	mov	r1, r3
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM8_Init+0xac>)
 80019b2:	f003 fa95 	bl	8004ee0 <HAL_TIM_Encoder_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80019bc:	f7ff fc9a 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_TIM8_Init+0xac>)
 80019d2:	f004 fc9d 	bl	8006310 <HAL_TIMEx_MasterConfigSynchronization>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80019dc:	f7ff fc8a 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200004f8 	.word	0x200004f8
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d12f      	bne.n	8001a72 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_TIM_IC_MspInit+0x8c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a42:	2320      	movs	r3, #32
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <HAL_TIM_IC_MspInit+0x90>)
 8001a5e:	f001 fa57 	bl	8002f10 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201c      	movs	r0, #28
 8001a68:	f000 fe63 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 fe7c 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a30      	ldr	r2, [pc, #192]	; (8001b54 <HAL_TIM_Base_MspInit+0xd0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d114      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a96:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201d      	movs	r0, #29
 8001ab4:	f000 fe3d 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ab8:	201d      	movs	r0, #29
 8001aba:	f000 fe56 	bl	800276a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001abe:	e044      	b.n	8001b4a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <HAL_TIM_Base_MspInit+0xd8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d114      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	201e      	movs	r0, #30
 8001ae8:	f000 fe23 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001aec:	201e      	movs	r0, #30
 8001aee:	f000 fe3c 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8001af2:	e02a      	b.n	8001b4a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_TIM_Base_MspInit+0xdc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10c      	bne.n	8001b18 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	e018      	b.n	8001b4a <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_TIM_Base_MspInit+0xe0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d113      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_TIM_Base_MspInit+0xd4>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2037      	movs	r0, #55	; 0x37
 8001b40:	f000 fdf7 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b44:	2037      	movs	r0, #55	; 0x37
 8001b46:	f000 fe10 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40001000 	.word	0x40001000
 8001b64:	40001400 	.word	0x40001400

08001b68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d137      	bne.n	8001bfa <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <HAL_TIM_Encoder_MspInit+0xa4>)
 8001bd6:	f001 f99b 	bl	8002f10 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	202b      	movs	r0, #43	; 0x2b
 8001be0:	f000 fda7 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001be4:	202b      	movs	r0, #43	; 0x2b
 8001be6:	f000 fdc0 	bl	800276a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	202c      	movs	r0, #44	; 0x2c
 8001bf0:	f000 fd9f 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bf4:	202c      	movs	r0, #44	; 0x2c
 8001bf6:	f000 fdb8 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40010400 	.word	0x40010400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020800 	.word	0x40020800

08001c10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_TIM_MspPostInit+0x64>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d11b      	bne.n	8001c6a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_TIM_MspPostInit+0x68>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_TIM_MspPostInit+0x68>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_TIM_MspPostInit+0x68>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_TIM_MspPostInit+0x6c>)
 8001c66:	f001 f953 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <MX_USART3_UART_Init+0x5c>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_USART3_UART_Init+0x58>)
 8001cc4:	f004 fbd0 	bl	8006468 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cce:	f7ff fb11 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000544 	.word	0x20000544
 8001cdc:	40004800 	.word	0x40004800

08001ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0aa      	sub	sp, #168	; 0xa8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2284      	movs	r2, #132	; 0x84
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f006 f9cf 	bl	80080a4 <memset>
  if(uartHandle->Instance==USART3)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_UART_MspInit+0xc4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d144      	bne.n	8001d9a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f91a 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d2a:	f7ff fae3 	bl	80012f4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_UART_MspInit+0xc8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <HAL_UART_MspInit+0xcc>)
 8001d86:	f001 f8c3 	bl	8002f10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2027      	movs	r0, #39	; 0x27
 8001d90:	f000 fccf 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d94:	2027      	movs	r0, #39	; 0x27
 8001d96:	f000 fce8 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	37a8      	adds	r7, #168	; 0xa8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40004800 	.word	0x40004800
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020c00 	.word	0x40020c00

08001db0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dbe:	2206      	movs	r2, #6
 8001dc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df4:	f001 fa8d 	bl	8003312 <HAL_PCD_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001dfe:	f7ff fa79 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200005cc 	.word	0x200005cc

08001e0c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0ac      	sub	sp, #176	; 0xb0
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	2284      	movs	r2, #132	; 0x84
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 f939 	bl	80080a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3a:	d159      	bne.n	8001ef0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e48:	f107 0318 	add.w	r3, r7, #24
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 f883 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e58:	f7ff fa4c 	bl	80012f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e74:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e8e:	230a      	movs	r3, #10
 8001e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <HAL_PCD_MspInit+0xf0>)
 8001e9c:	f001 f838 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <HAL_PCD_MspInit+0xf0>)
 8001ebc:	f001 f828 	bl	8002f10 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	6353      	str	r3, [r2, #52]	; 0x34
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_PCD_MspInit+0xec>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	37b0      	adds	r7, #176	; 0xb0
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000

08001f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f08:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	; (8001f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f1c:	4c0b      	ldr	r4, [pc, #44]	; (8001f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f2a:	f7ff fb65 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f006 f8c7 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f32:	f7ff f8c5 	bl	80010c0 <main>
  bx  lr    
 8001f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001f44:	080094c0 	.word	0x080094c0
  ldr r2, =_sbss
 8001f48:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f4c:	20000c20 	.word	0x20000c20

08001f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC_IRQHandler>

08001f52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f56:	2003      	movs	r0, #3
 8001f58:	f000 fbe0 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f805 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f62:	f7ff fa73 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fbfb 	bl	8002786 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 fbc3 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	2000003c 	.word	0x2000003c
 8001fc4:	20000044 	.word	0x20000044
 8001fc8:	20000040 	.word	0x20000040

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000044 	.word	0x20000044
 8001ff0:	20000ad4 	.word	0x20000ad4

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000ad4 	.word	0x20000ad4

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000044 	.word	0x20000044

08002054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e031      	b.n	80020ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fc96 	bl	80009a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_ADC_Init+0x84>)
 8002098:	4013      	ands	r3, r2
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f970 	bl	8002388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
 80020be:	e001      	b.n	80020c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	ffffeefd 	.word	0xffffeefd

080020dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x1c>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e136      	b.n	8002366 <HAL_ADC_ConfigChannel+0x28a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b09      	cmp	r3, #9
 8002106:	d93a      	bls.n	800217e <HAL_ADC_ConfigChannel+0xa2>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002110:	d035      	beq.n	800217e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68d9      	ldr	r1, [r3, #12]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	3b1e      	subs	r3, #30
 8002128:	2207      	movs	r2, #7
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a8d      	ldr	r2, [pc, #564]	; (8002374 <HAL_ADC_ConfigChannel+0x298>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	061a      	lsls	r2, r3, #24
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002156:	e035      	b.n	80021c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	4603      	mov	r3, r0
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4403      	add	r3, r0
 8002170:	3b1e      	subs	r3, #30
 8002172:	409a      	lsls	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217c:	e022      	b.n	80021c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6919      	ldr	r1, [r3, #16]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	2207      	movs	r2, #7
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43da      	mvns	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	400a      	ands	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	4603      	mov	r3, r0
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4403      	add	r3, r0
 80021ba:	409a      	lsls	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d824      	bhi.n	8002216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b05      	subs	r3, #5
 80021de:	221f      	movs	r2, #31
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43da      	mvns	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	400a      	ands	r2, r1
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b05      	subs	r3, #5
 8002208:	fa00 f203 	lsl.w	r2, r0, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	635a      	str	r2, [r3, #52]	; 0x34
 8002214:	e04c      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d824      	bhi.n	8002268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	3b23      	subs	r3, #35	; 0x23
 8002230:	221f      	movs	r2, #31
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b23      	subs	r3, #35	; 0x23
 800225a:	fa00 f203 	lsl.w	r2, r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
 8002266:	e023      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	3b41      	subs	r3, #65	; 0x41
 800227a:	221f      	movs	r2, #31
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43da      	mvns	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	400a      	ands	r2, r1
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b41      	subs	r3, #65	; 0x41
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a30      	ldr	r2, [pc, #192]	; (8002378 <HAL_ADC_ConfigChannel+0x29c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10a      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1f4>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_ADC_ConfigChannel+0x29c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10f      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x21e>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b12      	cmp	r3, #18
 80022e0:	d10b      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 80022f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1e      	ldr	r2, [pc, #120]	; (8002378 <HAL_ADC_ConfigChannel+0x29c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d12b      	bne.n	800235c <HAL_ADC_ConfigChannel+0x280>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <HAL_ADC_ConfigChannel+0x298>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <HAL_ADC_ConfigChannel+0x23a>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b11      	cmp	r3, #17
 8002314:	d122      	bne.n	800235c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a18      	ldr	r2, [pc, #96]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 800231c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002320:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_ADC_ConfigChannel+0x2a0>)
 8002328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_ADC_ConfigChannel+0x298>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_ADC_ConfigChannel+0x2a4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x2a8>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9a      	lsrs	r2, r3, #18
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800234e:	e002      	b.n	8002356 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	10000012 	.word	0x10000012
 8002378:	40012000 	.word	0x40012000
 800237c:	40012300 	.word	0x40012300
 8002380:	2000003c 	.word	0x2000003c
 8002384:	431bde83 	.word	0x431bde83

08002388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002390:	4b78      	ldr	r3, [pc, #480]	; (8002574 <ADC_Init+0x1ec>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a77      	ldr	r2, [pc, #476]	; (8002574 <ADC_Init+0x1ec>)
 8002396:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800239a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800239c:	4b75      	ldr	r3, [pc, #468]	; (8002574 <ADC_Init+0x1ec>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4973      	ldr	r1, [pc, #460]	; (8002574 <ADC_Init+0x1ec>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	021a      	lsls	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	4a58      	ldr	r2, [pc, #352]	; (8002578 <ADC_Init+0x1f0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d022      	beq.n	8002462 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800244c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e00f      	b.n	8002482 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002480:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0202 	bic.w	r2, r2, #2
 8002490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	005a      	lsls	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	3b01      	subs	r3, #1
 80024dc:	035a      	lsls	r2, r3, #13
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	e007      	b.n	80024f8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	3b01      	subs	r3, #1
 8002514:	051a      	lsls	r2, r3, #20
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800252c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800253a:	025a      	lsls	r2, r3, #9
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	029a      	lsls	r2, r3, #10
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	0f000001 	.word	0x0f000001

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x40>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	05fa0000 	.word	0x05fa0000

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	; (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff3e 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff8e 	bl	8002670 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff31 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fc22 	bl	8001ff4 <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d008      	beq.n	80027d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e052      	b.n	8002876 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0216 	bic.w	r2, r2, #22
 80027de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <HAL_DMA_Abort+0x62>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002820:	e013      	b.n	800284a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002822:	f7ff fbe7 	bl	8001ff4 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b05      	cmp	r3, #5
 800282e:	d90c      	bls.n	800284a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e015      	b.n	8002876 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e4      	bne.n	8002822 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	223f      	movs	r2, #63	; 0x3f
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e00c      	b.n	80028b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2205      	movs	r2, #5
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06a      	b.n	80029ac <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2223      	movs	r2, #35	; 0x23
 80028e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe f8e9 	bl	8000ac0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <HAL_ETH_Init+0xf0>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <HAL_ETH_Init+0xf0>)
 80028f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_ETH_Init+0xf0>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002906:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_ETH_Init+0xf4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_ETH_Init+0xf4>)
 800290c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002910:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_ETH_Init+0xf4>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4927      	ldr	r1, [pc, #156]	; (80029b8 <HAL_ETH_Init+0xf4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_ETH_Init+0xf4>)
 8002922:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800293a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293c:	f7ff fb5a 	bl	8001ff4 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002942:	e011      	b.n	8002968 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002944:	f7ff fb56 	bl	8001ff4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002952:	d909      	bls.n	8002968 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	22e0      	movs	r2, #224	; 0xe0
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e021      	b.n	80029ac <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e4      	bne.n	8002944 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f958 	bl	8002c30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f9ff 	bl	8002d84 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa55 	bl	8002e36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	461a      	mov	r2, r3
 8002992:	2100      	movs	r1, #0
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f9bd 	bl	8002d14 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2210      	movs	r2, #16
 80029a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40013800 	.word	0x40013800

080029bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <ETH_SetMACConfig+0x15c>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	7c1b      	ldrb	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <ETH_SetMACConfig+0x28>
 80029de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029e2:	e000      	b.n	80029e6 <ETH_SetMACConfig+0x2a>
 80029e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	7c5b      	ldrb	r3, [r3, #17]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <ETH_SetMACConfig+0x38>
 80029ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029f2:	e000      	b.n	80029f6 <ETH_SetMACConfig+0x3a>
 80029f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	7fdb      	ldrb	r3, [r3, #31]
 8002a02:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a04:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	7f92      	ldrb	r2, [r2, #30]
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d102      	bne.n	8002a1a <ETH_SetMACConfig+0x5e>
 8002a14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a18:	e000      	b.n	8002a1c <ETH_SetMACConfig+0x60>
 8002a1a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	7f1b      	ldrb	r3, [r3, #28]
 8002a22:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a24:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a3a:	2a00      	cmp	r2, #0
 8002a3c:	d102      	bne.n	8002a44 <ETH_SetMACConfig+0x88>
 8002a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a42:	e000      	b.n	8002a46 <ETH_SetMACConfig+0x8a>
 8002a44:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	7bdb      	ldrb	r3, [r3, #15]
 8002a4c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a4e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a5c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff fac8 	bl	800200c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d101      	bne.n	8002aaa <ETH_SetMACConfig+0xee>
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	e000      	b.n	8002aac <ETH_SetMACConfig+0xf0>
 8002aaa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002aba:	2a01      	cmp	r2, #1
 8002abc:	d101      	bne.n	8002ac2 <ETH_SetMACConfig+0x106>
 8002abe:	2208      	movs	r2, #8
 8002ac0:	e000      	b.n	8002ac4 <ETH_SetMACConfig+0x108>
 8002ac2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ac4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002acc:	2a01      	cmp	r2, #1
 8002ace:	d101      	bne.n	8002ad4 <ETH_SetMACConfig+0x118>
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	e000      	b.n	8002ad6 <ETH_SetMACConfig+0x11a>
 8002ad4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ad6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ade:	2a01      	cmp	r2, #1
 8002ae0:	d101      	bne.n	8002ae6 <ETH_SetMACConfig+0x12a>
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	e000      	b.n	8002ae8 <ETH_SetMACConfig+0x12c>
 8002ae6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7ff fa83 	bl	800200c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	ff20810f 	.word	0xff20810f

08002b1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <ETH_SetDMAConfig+0x110>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7b1b      	ldrb	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <ETH_SetDMAConfig+0x2c>
 8002b42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b46:	e000      	b.n	8002b4a <ETH_SetDMAConfig+0x2e>
 8002b48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	7b5b      	ldrb	r3, [r3, #13]
 8002b4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	7f52      	ldrb	r2, [r2, #29]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	d102      	bne.n	8002b60 <ETH_SetDMAConfig+0x44>
 8002b5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b5e:	e000      	b.n	8002b62 <ETH_SetDMAConfig+0x46>
 8002b60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	7b9b      	ldrb	r3, [r3, #14]
 8002b68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	7f1b      	ldrb	r3, [r3, #28]
 8002b76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	7f9b      	ldrb	r3, [r3, #30]
 8002b7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b90:	4313      	orrs	r3, r2
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff fa2a 	bl	800200c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	791b      	ldrb	r3, [r3, #4]
 8002bca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bd0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002bd6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002bdc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002be4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002be6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bf4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7ff f9fb 	bl	800200c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	f8de3f23 	.word	0xf8de3f23

08002c30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0a6      	sub	sp, #152	; 0x98
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ca4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fe86 	bl	80029bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d00:	f107 0308 	add.w	r3, r7, #8
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff08 	bl	8002b1c <ETH_SetDMAConfig>
}
 8002d0c:	bf00      	nop
 8002d0e:	3798      	adds	r7, #152	; 0x98
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3305      	adds	r3, #5
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	3204      	adds	r2, #4
 8002d2c:	7812      	ldrb	r2, [r2, #0]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <ETH_MACAddressConfig+0x68>)
 8002d36:	4413      	add	r3, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3303      	adds	r3, #3
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	061a      	lsls	r2, r3, #24
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	7812      	ldrb	r2, [r2, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <ETH_MACAddressConfig+0x6c>)
 8002d66:	4413      	add	r3, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40028040 	.word	0x40028040
 8002d80:	40028044 	.word	0x40028044

08002d84 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e03e      	b.n	8002e10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68d9      	ldr	r1, [r3, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	3206      	adds	r2, #6
 8002dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d80c      	bhi.n	8002df4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	461a      	mov	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	e004      	b.n	8002dfe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d9bd      	bls.n	8002d92 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e28:	611a      	str	r2, [r3, #16]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e046      	b.n	8002ed2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6919      	ldr	r1, [r3, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002e88:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	3212      	adds	r2, #18
 8002e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d80c      	bhi.n	8002ec2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6919      	ldr	r1, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	440b      	add	r3, r1
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	e004      	b.n	8002ecc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d9b5      	bls.n	8002e44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f02:	60da      	str	r2, [r3, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e175      	b.n	800321c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f30:	2201      	movs	r2, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	f040 8164 	bne.w	8003216 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d005      	beq.n	8002f66 <HAL_GPIO_Init+0x56>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d130      	bne.n	8002fc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 0201 	and.w	r2, r3, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d017      	beq.n	8003004 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	2203      	movs	r2, #3
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d123      	bne.n	8003058 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	220f      	movs	r2, #15
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3208      	adds	r2, #8
 8003052:	69b9      	ldr	r1, [r7, #24]
 8003054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2203      	movs	r2, #3
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80be 	beq.w	8003216 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	4b66      	ldr	r3, [pc, #408]	; (8003234 <HAL_GPIO_Init+0x324>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_GPIO_Init+0x324>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_GPIO_Init+0x324>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030b2:	4a61      	ldr	r2, [pc, #388]	; (8003238 <HAL_GPIO_Init+0x328>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_GPIO_Init+0x32c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d037      	beq.n	800314e <HAL_GPIO_Init+0x23e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a57      	ldr	r2, [pc, #348]	; (8003240 <HAL_GPIO_Init+0x330>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_GPIO_Init+0x23a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_GPIO_Init+0x334>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02b      	beq.n	8003146 <HAL_GPIO_Init+0x236>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a55      	ldr	r2, [pc, #340]	; (8003248 <HAL_GPIO_Init+0x338>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d025      	beq.n	8003142 <HAL_GPIO_Init+0x232>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_GPIO_Init+0x33c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <HAL_GPIO_Init+0x22e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a53      	ldr	r2, [pc, #332]	; (8003250 <HAL_GPIO_Init+0x340>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d019      	beq.n	800313a <HAL_GPIO_Init+0x22a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a52      	ldr	r2, [pc, #328]	; (8003254 <HAL_GPIO_Init+0x344>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0x226>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a51      	ldr	r2, [pc, #324]	; (8003258 <HAL_GPIO_Init+0x348>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_GPIO_Init+0x222>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a50      	ldr	r2, [pc, #320]	; (800325c <HAL_GPIO_Init+0x34c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <HAL_GPIO_Init+0x21e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4f      	ldr	r2, [pc, #316]	; (8003260 <HAL_GPIO_Init+0x350>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_GPIO_Init+0x21a>
 8003126:	2309      	movs	r3, #9
 8003128:	e012      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800312a:	230a      	movs	r3, #10
 800312c:	e010      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800312e:	2308      	movs	r3, #8
 8003130:	e00e      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003132:	2307      	movs	r3, #7
 8003134:	e00c      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003136:	2306      	movs	r3, #6
 8003138:	e00a      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800313a:	2305      	movs	r3, #5
 800313c:	e008      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800313e:	2304      	movs	r3, #4
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003142:	2303      	movs	r3, #3
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x240>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x240>
 800314e:	2300      	movs	r3, #0
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	; (8003238 <HAL_GPIO_Init+0x328>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_GPIO_Init+0x354>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003192:	4a34      	ldr	r2, [pc, #208]	; (8003264 <HAL_GPIO_Init+0x354>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_GPIO_Init+0x354>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031bc:	4a29      	ldr	r2, [pc, #164]	; (8003264 <HAL_GPIO_Init+0x354>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_GPIO_Init+0x354>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e6:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <HAL_GPIO_Init+0x354>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x354>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_GPIO_Init+0x354>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f ae86 	bls.w	8002f30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40013800 	.word	0x40013800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40021000 	.word	0x40021000
 8003250:	40021400 	.word	0x40021400
 8003254:	40021800 	.word	0x40021800
 8003258:	40021c00 	.word	0x40021c00
 800325c:	40022000 	.word	0x40022000
 8003260:	40022400 	.word	0x40022400
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e001      	b.n	800328a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800328a:	7bfb      	ldrb	r3, [r7, #15]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032b4:	e003      	b.n	80032be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032b6:	887b      	ldrh	r3, [r7, #2]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032d6:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032e2:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f806 	bl	80032fc <HAL_GPIO_EXTI_Callback>
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003314:	b08f      	sub	sp, #60	; 0x3c
 8003316:	af0a      	add	r7, sp, #40	; 0x28
 8003318:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e116      	b.n	8003552 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fd64 	bl	8001e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2203      	movs	r2, #3
 8003348:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fbb4 	bl	8007ad0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	687e      	ldr	r6, [r7, #4]
 8003370:	466d      	mov	r5, sp
 8003372:	f106 0410 	add.w	r4, r6, #16
 8003376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800337c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800337e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003382:	e885 0003 	stmia.w	r5, {r0, r1}
 8003386:	1d33      	adds	r3, r6, #4
 8003388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f004 fb48 	bl	8007a20 <USB_CoreInit>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e0d7      	b.n	8003552 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fba2 	bl	8007af2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	e04a      	b.n	800344a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	333d      	adds	r3, #61	; 0x3d
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	333c      	adds	r3, #60	; 0x3c
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	b298      	uxth	r0, r3
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3344      	adds	r3, #68	; 0x44
 80033f0:	4602      	mov	r2, r0
 80033f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3340      	adds	r3, #64	; 0x40
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3348      	adds	r3, #72	; 0x48
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	334c      	adds	r3, #76	; 0x4c
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3354      	adds	r3, #84	; 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	3301      	adds	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	429a      	cmp	r2, r3
 8003452:	d3af      	bcc.n	80033b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e044      	b.n	80034e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3b5      	bcc.n	800345a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	687e      	ldr	r6, [r7, #4]
 80034f6:	466d      	mov	r5, sp
 80034f8:	f106 0410 	add.w	r4, r6, #16
 80034fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003508:	e885 0003 	stmia.w	r5, {r0, r1}
 800350c:	1d33      	adds	r3, r6, #4
 800350e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	f004 fb3b 	bl	8007b8c <USB_DevInit>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e014      	b.n	8003552 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	d102      	bne.n	8003546 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f80b 	bl	800355c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fcf9 	bl	8007f42 <USB_DevDisconnect>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800355c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800358c:	4313      	orrs	r3, r2
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	10000003 	.word	0x10000003

080035a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e291      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8087 	beq.w	80036f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f4:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
 8003600:	4b90      	ldr	r3, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x130>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e26b      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x7a>
 8003630:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x9c>
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7e      	ldr	r2, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7b      	ldr	r2, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xc0>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6b      	ldr	r2, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fca6 	bl	8001ff4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fca2 	bl	8001ff4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e21f      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fc92 	bl	8001ff4 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fc8e 	bl	8001ff4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e20b      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x110>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d069      	beq.n	80037d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1df      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	493d      	ldr	r1, [pc, #244]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e040      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fc44 	bl	8001ff4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe fc40 	bl	8001ff4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1bd      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4929      	ldr	r1, [pc, #164]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e018      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe fc20 	bl	8001ff4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fe fc1c 	bl	8001ff4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e199      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d038      	beq.n	8003854 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe fbfd 	bl	8001ff4 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe fbf9 	bl	8001ff4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e176      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x23a>
 800381c:	e01a      	b.n	8003854 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fbe3 	bl	8001ff4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe fbdf 	bl	8001ff4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d903      	bls.n	8003848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e15c      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
 8003844:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	4b91      	ldr	r3, [pc, #580]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a4 	beq.w	80039aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	4b88      	ldr	r3, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a87      	ldr	r2, [pc, #540]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	; 0x40
 800387a:	4b85      	ldr	r3, [pc, #532]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	4b82      	ldr	r3, [pc, #520]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003896:	4b7f      	ldr	r3, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7e      	ldr	r2, [pc, #504]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a2:	f7fe fba7 	bl	8001ff4 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fe fba3 	bl	8001ff4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e120      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038bc:	4b75      	ldr	r3, [pc, #468]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x31a>
 80038d0:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a6e      	ldr	r2, [pc, #440]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	e02d      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x33c>
 80038e6:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a69      	ldr	r2, [pc, #420]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a66      	ldr	r2, [pc, #408]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	e01c      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_OscConfig+0x35e>
 8003908:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a60      	ldr	r2, [pc, #384]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e00b      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003922:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5a      	ldr	r2, [pc, #360]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a57      	ldr	r2, [pc, #348]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe fb57 	bl	8001ff4 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe fb53 	bl	8001ff4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0ce      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCC_OscConfig+0x386>
 800396c:	e014      	b.n	8003998 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fe fb41 	bl	8001ff4 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe fb3d 	bl	8001ff4 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0b8      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a3b      	ldr	r2, [pc, #236]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a4 	beq.w	8003afc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d06b      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d149      	bne.n	8003a5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fb0e 	bl	8001ff4 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fb0a 	bl	8001ff4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e087      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fade 	bl	8001ff4 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fada 	bl	8001ff4 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e057      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x478>
 8003a5a:	e04f      	b.n	8003afc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fac4 	bl	8001ff4 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe fac0 	bl	8001ff4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e03d      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4ac>
 8003a8e:	e035      	b.n	8003afc <HAL_RCC_OscConfig+0x538>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x544>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d028      	beq.n	8003af8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d11a      	bne.n	8003af8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ace:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d111      	bne.n	8003af8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0d0      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d910      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 020f 	bic.w	r2, r3, #15
 8003b3a:	4965      	ldr	r1, [pc, #404]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0b8      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a58      	ldr	r2, [pc, #352]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b84:	4b53      	ldr	r3, [pc, #332]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d040      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d115      	bne.n	8003bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07f      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	4b41      	ldr	r3, [pc, #260]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e073      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b3d      	ldr	r3, [pc, #244]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06b      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4936      	ldr	r1, [pc, #216]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe f9f8 	bl	8001ff4 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe f9f4 	bl	8001ff4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e053      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d210      	bcs.n	8003c60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e032      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6c:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4916      	ldr	r1, [pc, #88]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	490e      	ldr	r1, [pc, #56]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c9e:	f000 f821 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	490a      	ldr	r1, [pc, #40]	; (8003cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cb0:	5ccb      	ldrb	r3, [r1, r3]
 8003cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1d0>)
 8003cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1d4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe f954 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08009348 	.word	0x08009348
 8003cdc:	2000003c 	.word	0x2000003c
 8003ce0:	20000040 	.word	0x20000040

08003ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b094      	sub	sp, #80	; 0x50
 8003cea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfc:	4b79      	ldr	r3, [pc, #484]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 030c 	and.w	r3, r3, #12
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d00d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x40>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	f200 80e1 	bhi.w	8003ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x34>
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d16:	e0db      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1c:	e0db      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1e:	4b73      	ldr	r3, [pc, #460]	; (8003eec <HAL_RCC_GetSysClockFreq+0x208>)
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d22:	e0d8      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d24:	4b6f      	ldr	r3, [pc, #444]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d063      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	099b      	lsrs	r3, r3, #6
 8003d40:	2200      	movs	r2, #0
 8003d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4e:	2300      	movs	r3, #0
 8003d50:	637b      	str	r3, [r7, #52]	; 0x34
 8003d52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d56:	4622      	mov	r2, r4
 8003d58:	462b      	mov	r3, r5
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	0159      	lsls	r1, r3, #5
 8003d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d68:	0150      	lsls	r0, r2, #5
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4621      	mov	r1, r4
 8003d70:	1a51      	subs	r1, r2, r1
 8003d72:	6139      	str	r1, [r7, #16]
 8003d74:	4629      	mov	r1, r5
 8003d76:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d88:	4659      	mov	r1, fp
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d92:	4651      	mov	r1, sl
 8003d94:	018a      	lsls	r2, r1, #6
 8003d96:	4651      	mov	r1, sl
 8003d98:	ebb2 0801 	subs.w	r8, r2, r1
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db6:	4690      	mov	r8, r2
 8003db8:	4699      	mov	r9, r3
 8003dba:	4623      	mov	r3, r4
 8003dbc:	eb18 0303 	adds.w	r3, r8, r3
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	eb49 0303 	adc.w	r3, r9, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	024b      	lsls	r3, r1, #9
 8003dda:	4621      	mov	r1, r4
 8003ddc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de0:	4621      	mov	r1, r4
 8003de2:	024a      	lsls	r2, r1, #9
 8003de4:	4610      	mov	r0, r2
 8003de6:	4619      	mov	r1, r3
 8003de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dea:	2200      	movs	r2, #0
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003df4:	f7fc fa64 	bl	80002c0 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e00:	e058      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e02:	4b38      	ldr	r3, [pc, #224]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	464b      	mov	r3, r9
 8003e20:	f04f 0000 	mov.w	r0, #0
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	0159      	lsls	r1, r3, #5
 8003e2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e2e:	0150      	lsls	r0, r2, #5
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4641      	mov	r1, r8
 8003e36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e54:	ebb2 040a 	subs.w	r4, r2, sl
 8003e58:	eb63 050b 	sbc.w	r5, r3, fp
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	00eb      	lsls	r3, r5, #3
 8003e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6a:	00e2      	lsls	r2, r4, #3
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	461d      	mov	r5, r3
 8003e70:	4643      	mov	r3, r8
 8003e72:	18e3      	adds	r3, r4, r3
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	464b      	mov	r3, r9
 8003e78:	eb45 0303 	adc.w	r3, r5, r3
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	028b      	lsls	r3, r1, #10
 8003e8e:	4621      	mov	r1, r4
 8003e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e94:	4621      	mov	r1, r4
 8003e96:	028a      	lsls	r2, r1, #10
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	61fa      	str	r2, [r7, #28]
 8003ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea8:	f7fc fa0a 	bl	80002c0 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ece:	e002      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3750      	adds	r7, #80	; 0x50
 8003edc:	46bd      	mov	sp, r7
 8003ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	007a1200 	.word	0x007a1200

08003ef0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2000003c 	.word	0x2000003c

08003f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f0c:	f7ff fff0 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f10:	4602      	mov	r2, r0
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	0a9b      	lsrs	r3, r3, #10
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1e:	5ccb      	ldrb	r3, [r1, r3]
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	08009358 	.word	0x08009358

08003f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f34:	f7ff ffdc 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0b5b      	lsrs	r3, r3, #13
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4903      	ldr	r1, [pc, #12]	; (8003f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40023800 	.word	0x40023800
 8003f54:	08009358 	.word	0x08009358

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f80:	4b69      	ldr	r3, [pc, #420]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a68      	ldr	r2, [pc, #416]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f8a:	6093      	str	r3, [r2, #8]
 8003f8c:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	4964      	ldr	r1, [pc, #400]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb2:	4b5d      	ldr	r3, [pc, #372]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	4959      	ldr	r1, [pc, #356]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d017      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fee:	4b4e      	ldr	r3, [pc, #312]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	494a      	ldr	r1, [pc, #296]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400c:	d101      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 808b 	beq.w	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800403c:	4b3a      	ldr	r3, [pc, #232]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	4a39      	ldr	r2, [pc, #228]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	; 0x40
 8004048:	4b37      	ldr	r3, [pc, #220]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004054:	4b35      	ldr	r3, [pc, #212]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a34      	ldr	r2, [pc, #208]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800405a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004060:	f7fd ffc8 	bl	8001ff4 <HAL_GetTick>
 8004064:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004068:	f7fd ffc4 	bl	8001ff4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e357      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800407a:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004086:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d035      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d02e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d114      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd ff8c 	bl	8001ff4 <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	e00a      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fd ff88 	bl	8001ff4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e319      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ee      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410e:	d111      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800411e:	400b      	ands	r3, r1
 8004120:	4901      	ldr	r1, [pc, #4]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
 8004126:	e00b      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000
 8004130:	0ffffcff 	.word	0x0ffffcff
 8004134:	4baa      	ldr	r3, [pc, #680]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4aa9      	ldr	r2, [pc, #676]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	4ba7      	ldr	r3, [pc, #668]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414c:	49a4      	ldr	r1, [pc, #656]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414e:	4313      	orrs	r3, r2
 8004150:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800415e:	4ba0      	ldr	r3, [pc, #640]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004164:	4a9e      	ldr	r2, [pc, #632]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800416e:	4b9c      	ldr	r3, [pc, #624]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004170:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	4999      	ldr	r1, [pc, #612]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418c:	4b94      	ldr	r3, [pc, #592]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419a:	4991      	ldr	r1, [pc, #580]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ae:	4b8c      	ldr	r3, [pc, #560]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041bc:	4988      	ldr	r1, [pc, #544]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d0:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041de:	4980      	ldr	r1, [pc, #512]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004200:	4977      	ldr	r1, [pc, #476]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004214:	4b72      	ldr	r3, [pc, #456]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	496f      	ldr	r1, [pc, #444]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004236:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	f023 020c 	bic.w	r2, r3, #12
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	4966      	ldr	r1, [pc, #408]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004258:	4b61      	ldr	r3, [pc, #388]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	495e      	ldr	r1, [pc, #376]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800427a:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	4955      	ldr	r1, [pc, #340]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800429c:	4b50      	ldr	r3, [pc, #320]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	494d      	ldr	r1, [pc, #308]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042be:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	4944      	ldr	r1, [pc, #272]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042e0:	4b3f      	ldr	r3, [pc, #252]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	493c      	ldr	r1, [pc, #240]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004302:	4b37      	ldr	r3, [pc, #220]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	4933      	ldr	r1, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004324:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004332:	492b      	ldr	r1, [pc, #172]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d011      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004354:	4922      	ldr	r1, [pc, #136]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004364:	d101      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004394:	4912      	ldr	r1, [pc, #72]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b8:	4909      	ldr	r1, [pc, #36]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d006      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80d9 	beq.w	8004586 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d4:	4b02      	ldr	r3, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a01      	ldr	r2, [pc, #4]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043de:	e001      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e6:	f7fd fe05 	bl	8001ff4 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ee:	f7fd fe01 	bl	8001ff4 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b64      	cmp	r3, #100	; 0x64
 80043fa:	d901      	bls.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e194      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004400:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d021      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11d      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004420:	4b64      	ldr	r3, [pc, #400]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	0c1b      	lsrs	r3, r3, #16
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800442e:	4b61      	ldr	r3, [pc, #388]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004434:	0e1b      	lsrs	r3, r3, #24
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	019a      	lsls	r2, r3, #6
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	071b      	lsls	r3, r3, #28
 8004454:	4957      	ldr	r1, [pc, #348]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02e      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004486:	d129      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004488:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	0f1b      	lsrs	r3, r3, #28
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	019a      	lsls	r2, r3, #6
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	071b      	lsls	r3, r3, #28
 80044bc:	493d      	ldr	r1, [pc, #244]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ca:	f023 021f 	bic.w	r2, r3, #31
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	3b01      	subs	r3, #1
 80044d4:	4937      	ldr	r1, [pc, #220]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ee:	0e1b      	lsrs	r3, r3, #24
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	0f1b      	lsrs	r3, r3, #28
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	019a      	lsls	r2, r3, #6
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	431a      	orrs	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	071b      	lsls	r3, r3, #28
 800451c:	4925      	ldr	r1, [pc, #148]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d011      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	019a      	lsls	r2, r3, #6
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	071b      	lsls	r3, r3, #28
 800454c:	4919      	ldr	r1, [pc, #100]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800455e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004560:	f7fd fd48 	bl	8001ff4 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004568:	f7fd fd44 	bl	8001ff4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0d7      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 80cd 	bne.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459a:	f7fd fd2b 	bl	8001ff4 <HAL_GetTick>
 800459e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045a0:	e00a      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a2:	f7fd fd27 	bl	8001ff4 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b64      	cmp	r3, #100	; 0x64
 80045ae:	d903      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0ba      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b8:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d0ed      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12a      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ee:	4b51      	ldr	r3, [pc, #324]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045fc:	4b4d      	ldr	r3, [pc, #308]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4944      	ldr	r1, [pc, #272]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004630:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	3b01      	subs	r3, #1
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	493d      	ldr	r1, [pc, #244]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004658:	d11d      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	0e1b      	lsrs	r3, r3, #24
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	019a      	lsls	r2, r3, #6
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	431a      	orrs	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	071b      	lsls	r3, r3, #28
 800468e:	4929      	ldr	r1, [pc, #164]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d028      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	0e1b      	lsrs	r3, r3, #24
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	019a      	lsls	r2, r3, #6
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	4917      	ldr	r1, [pc, #92]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	4911      	ldr	r1, [pc, #68]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fd fc78 	bl	8001ff4 <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004708:	f7fd fc74 	bl	8001ff4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e007      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004726:	d1ef      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e049      	b.n	80047de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd f990 	bl	8001a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f001 f8e2 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d001      	beq.n	8004800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e054      	b.n	80048aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482a:	d01d      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a22      	ldr	r2, [pc, #136]	; (80048bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_Base_Start_IT+0xe4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1b      	ldr	r2, [pc, #108]	; (80048d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d115      	bne.n	8004894 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d015      	beq.n	80048a6 <HAL_TIM_Base_Start_IT+0xbe>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004880:	d011      	beq.n	80048a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004892:	e008      	b.n	80048a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e000      	b.n	80048a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40000400 	.word	0x40000400
 80048c0:	40000800 	.word	0x40000800
 80048c4:	40000c00 	.word	0x40000c00
 80048c8:	40010400 	.word	0x40010400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40001800 	.word	0x40001800
 80048d4:	00010007 	.word	0x00010007

080048d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e049      	b.n	800497e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f841 	bl	8004986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3304      	adds	r3, #4
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f001 f812 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_TIM_PWM_Start+0x24>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e03c      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d109      	bne.n	80049da <HAL_TIM_PWM_Start+0x3e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	bf14      	ite	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	2300      	moveq	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	e02f      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d109      	bne.n	80049f4 <HAL_TIM_PWM_Start+0x58>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e022      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d109      	bne.n	8004a0e <HAL_TIM_PWM_Start+0x72>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	e015      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d109      	bne.n	8004a28 <HAL_TIM_PWM_Start+0x8c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e008      	b.n	8004a3a <HAL_TIM_PWM_Start+0x9e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e092      	b.n	8004b68 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xb6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a50:	e023      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xc6>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	e01b      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0xd6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xe6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xf6>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_PWM_Start+0xfe>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fc0e 	bl	80062c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_TIM_PWM_Start+0x1d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d004      	beq.n	8004abc <HAL_TIM_PWM_Start+0x120>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a2f      	ldr	r2, [pc, #188]	; (8004b74 <HAL_TIM_PWM_Start+0x1d8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x124>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_TIM_PWM_Start+0x126>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <HAL_TIM_PWM_Start+0x1d4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d01d      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <HAL_TIM_PWM_Start+0x1dc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d018      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a20      	ldr	r2, [pc, #128]	; (8004b7c <HAL_TIM_PWM_Start+0x1e0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_TIM_PWM_Start+0x1e4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <HAL_TIM_PWM_Start+0x1d8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_TIM_PWM_Start+0x1e8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x18a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_TIM_PWM_Start+0x1ec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d115      	bne.n	8004b52 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b17      	ldr	r3, [pc, #92]	; (8004b8c <HAL_TIM_PWM_Start+0x1f0>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b06      	cmp	r3, #6
 8004b36:	d015      	beq.n	8004b64 <HAL_TIM_PWM_Start+0x1c8>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d011      	beq.n	8004b64 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b50:	e008      	b.n	8004b64 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e000      	b.n	8004b66 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40001800 	.word	0x40001800
 8004b8c:	00010007 	.word	0x00010007

08004b90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e049      	b.n	8004c36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc ff1a 	bl	80019f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 feb6 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_IC_Start_IT+0x1e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	e023      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x66>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_IC_Start_IT+0x2e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e01b      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x66>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_IC_Start_IT+0x3e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	e013      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x66>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_IC_Start_IT+0x4e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e00b      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x66>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_IC_Start_IT+0x5e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	e003      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x66>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d104      	bne.n	8004cb8 <HAL_TIM_IC_Start_IT+0x78>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	e013      	b.n	8004ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d104      	bne.n	8004cc8 <HAL_TIM_IC_Start_IT+0x88>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e00b      	b.n	8004ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d104      	bne.n	8004cd8 <HAL_TIM_IC_Start_IT+0x98>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e003      	b.n	8004ce0 <HAL_TIM_IC_Start_IT+0xa0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ce8:	7b7b      	ldrb	r3, [r7, #13]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0e2      	b.n	8004eb8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_IC_Start_IT+0xc2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d00:	e023      	b.n	8004d4a <HAL_TIM_IC_Start_IT+0x10a>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_IC_Start_IT+0xd2>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d10:	e01b      	b.n	8004d4a <HAL_TIM_IC_Start_IT+0x10a>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_IC_Start_IT+0xe2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	e013      	b.n	8004d4a <HAL_TIM_IC_Start_IT+0x10a>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_IC_Start_IT+0xf2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d30:	e00b      	b.n	8004d4a <HAL_TIM_IC_Start_IT+0x10a>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_IC_Start_IT+0x102>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d40:	e003      	b.n	8004d4a <HAL_TIM_IC_Start_IT+0x10a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_TIM_IC_Start_IT+0x11a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d58:	e013      	b.n	8004d82 <HAL_TIM_IC_Start_IT+0x142>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_IC_Start_IT+0x12a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	e00b      	b.n	8004d82 <HAL_TIM_IC_Start_IT+0x142>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_IC_Start_IT+0x13a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d78:	e003      	b.n	8004d82 <HAL_TIM_IC_Start_IT+0x142>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d841      	bhi.n	8004e0c <HAL_TIM_IC_Start_IT+0x1cc>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <HAL_TIM_IC_Start_IT+0x150>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004e0d 	.word	0x08004e0d
 8004d98:	08004e0d 	.word	0x08004e0d
 8004d9c:	08004e0d 	.word	0x08004e0d
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004e0d 	.word	0x08004e0d
 8004dac:	08004e0d 	.word	0x08004e0d
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004e0d 	.word	0x08004e0d
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	08004dfb 	.word	0x08004dfb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0202 	orr.w	r2, r2, #2
 8004dd2:	60da      	str	r2, [r3, #12]
      break;
 8004dd4:	e01d      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0204 	orr.w	r2, r2, #4
 8004de4:	60da      	str	r2, [r3, #12]
      break;
 8004de6:	e014      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0208 	orr.w	r2, r2, #8
 8004df6:	60da      	str	r2, [r3, #12]
      break;
 8004df8:	e00b      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0210 	orr.w	r2, r2, #16
 8004e08:	60da      	str	r2, [r3, #12]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e10:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d14e      	bne.n	8004eb6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fa4f 	bl	80062c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <HAL_TIM_IC_Start_IT+0x280>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d01d      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_TIM_IC_Start_IT+0x284>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d018      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_TIM_IC_Start_IT+0x288>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <HAL_TIM_IC_Start_IT+0x28c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_TIM_IC_Start_IT+0x290>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <HAL_TIM_IC_Start_IT+0x294>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_TIM_IC_Start_IT+0x236>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a19      	ldr	r2, [pc, #100]	; (8004ed8 <HAL_TIM_IC_Start_IT+0x298>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d115      	bne.n	8004ea2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	4b17      	ldr	r3, [pc, #92]	; (8004edc <HAL_TIM_IC_Start_IT+0x29c>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d015      	beq.n	8004eb4 <HAL_TIM_IC_Start_IT+0x274>
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8e:	d011      	beq.n	8004eb4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	e008      	b.n	8004eb4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e000      	b.n	8004eb6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40001800 	.word	0x40001800
 8004edc:	00010007 	.word	0x00010007

08004ee0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e08f      	b.n	8005014 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fe2d 	bl	8001b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6899      	ldr	r1, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_TIM_Encoder_Init+0x13c>)
 8004f22:	400b      	ands	r3, r1
 8004f24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f000 fd05 	bl	8005940 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_TIM_Encoder_Init+0x140>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4b2b      	ldr	r3, [pc, #172]	; (8005024 <HAL_TIM_Encoder_Init+0x144>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <HAL_TIM_Encoder_Init+0x148>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	031b      	lsls	r3, r3, #12
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	fffebff8 	.word	0xfffebff8
 8005020:	fffffcfc 	.word	0xfffffcfc
 8005024:	fffff3f3 	.word	0xfffff3f3
 8005028:	ffff0f0f 	.word	0xffff0f0f

0800502c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005044:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800504c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005054:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d102      	bne.n	8005068 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005062:	7b7b      	ldrb	r3, [r7, #13]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d001      	beq.n	800506c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e069      	b.n	8005140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800507c:	e031      	b.n	80050e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b04      	cmp	r3, #4
 8005082:	d110      	bne.n	80050a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800508a:	7b3b      	ldrb	r3, [r7, #12]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d001      	beq.n	8005094 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e055      	b.n	8005140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050a4:	e01d      	b.n	80050e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d108      	bne.n	80050be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d105      	bne.n	80050be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d102      	bne.n	80050be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b8:	7b3b      	ldrb	r3, [r7, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e03e      	b.n	8005140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_TIM_Encoder_Start+0xc4>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d008      	beq.n	8005100 <HAL_TIM_Encoder_Start+0xd4>
 80050ee:	e00f      	b.n	8005110 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 f8e3 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 80050fe:	e016      	b.n	800512e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	2104      	movs	r1, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f001 f8db 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 800510e:	e00e      	b.n	800512e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2201      	movs	r2, #1
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f8d3 	bl	80062c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	2104      	movs	r1, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f8cc 	bl	80062c4 <TIM_CCxChannelCmd>
      break;
 800512c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b02      	cmp	r3, #2
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0202 	mvn.w	r2, #2
 8005174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb fe52 	bl	8000e34 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fbb6 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fbbd 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d122      	bne.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d11b      	bne.n	80051f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0204 	mvn.w	r2, #4
 80051c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fe28 	bl	8000e34 <HAL_TIM_IC_CaptureCallback>
 80051e4:	e005      	b.n	80051f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb8c 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fb93 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b08      	cmp	r3, #8
 8005204:	d122      	bne.n	800524c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b08      	cmp	r3, #8
 8005212:	d11b      	bne.n	800524c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0208 	mvn.w	r2, #8
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2204      	movs	r2, #4
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fdfe 	bl	8000e34 <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb62 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb69 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b10      	cmp	r3, #16
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b10      	cmp	r3, #16
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0210 	mvn.w	r2, #16
 8005270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2208      	movs	r2, #8
 8005276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fb fdd4 	bl	8000e34 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fb38 	bl	8005904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb3f 	bl	8005918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10e      	bne.n	80052cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d107      	bne.n	80052cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0201 	mvn.w	r2, #1
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fb fe24 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b80      	cmp	r3, #128	; 0x80
 80052d8:	d10e      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d107      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f001 f8a4 	bl	8006440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005306:	d10e      	bne.n	8005326 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f001 f897 	bl	8006454 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d10e      	bne.n	8005352 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d107      	bne.n	8005352 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800534a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 faed 	bl	800592c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b20      	cmp	r3, #32
 800535e:	d10e      	bne.n	800537e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d107      	bne.n	800537e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0220 	mvn.w	r2, #32
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f857 	bl	800642c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e088      	b.n	80054b6 <HAL_TIM_IC_ConfigChannel+0x130>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d11b      	bne.n	80053ea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053c2:	f000 fdbb 	bl	8005f3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 020c 	bic.w	r2, r2, #12
 80053d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6999      	ldr	r1, [r3, #24]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	619a      	str	r2, [r3, #24]
 80053e8:	e060      	b.n	80054ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d11c      	bne.n	800542a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005400:	f000 fe3f 	bl	8006082 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005412:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6999      	ldr	r1, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021a      	lsls	r2, r3, #8
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	619a      	str	r2, [r3, #24]
 8005428:	e040      	b.n	80054ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005440:	f000 fe8c 	bl	800615c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 020c 	bic.w	r2, r2, #12
 8005452:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69d9      	ldr	r1, [r3, #28]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
 8005466:	e021      	b.n	80054ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b0c      	cmp	r3, #12
 800546c:	d11c      	bne.n	80054a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800547e:	f000 fea9 	bl	80061d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005490:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69d9      	ldr	r1, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	61da      	str	r2, [r3, #28]
 80054a6:	e001      	b.n	80054ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054da:	2302      	movs	r3, #2
 80054dc:	e0ff      	b.n	80056de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b14      	cmp	r3, #20
 80054ea:	f200 80f0 	bhi.w	80056ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054ee:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f4:	08005549 	.word	0x08005549
 80054f8:	080056cf 	.word	0x080056cf
 80054fc:	080056cf 	.word	0x080056cf
 8005500:	080056cf 	.word	0x080056cf
 8005504:	08005589 	.word	0x08005589
 8005508:	080056cf 	.word	0x080056cf
 800550c:	080056cf 	.word	0x080056cf
 8005510:	080056cf 	.word	0x080056cf
 8005514:	080055cb 	.word	0x080055cb
 8005518:	080056cf 	.word	0x080056cf
 800551c:	080056cf 	.word	0x080056cf
 8005520:	080056cf 	.word	0x080056cf
 8005524:	0800560b 	.word	0x0800560b
 8005528:	080056cf 	.word	0x080056cf
 800552c:	080056cf 	.word	0x080056cf
 8005530:	080056cf 	.word	0x080056cf
 8005534:	0800564d 	.word	0x0800564d
 8005538:	080056cf 	.word	0x080056cf
 800553c:	080056cf 	.word	0x080056cf
 8005540:	080056cf 	.word	0x080056cf
 8005544:	0800568d 	.word	0x0800568d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fa96 	bl	8005a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	619a      	str	r2, [r3, #24]
      break;
 8005586:	e0a5      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fae8 	bl	8005b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6999      	ldr	r1, [r3, #24]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	619a      	str	r2, [r3, #24]
      break;
 80055c8:	e084      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fb3f 	bl	8005c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0208 	orr.w	r2, r2, #8
 80055e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0204 	bic.w	r2, r2, #4
 80055f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
      break;
 8005608:	e064      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fb95 	bl	8005d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69d9      	ldr	r1, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	021a      	lsls	r2, r3, #8
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	61da      	str	r2, [r3, #28]
      break;
 800564a:	e043      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fbcc 	bl	8005df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0208 	orr.w	r2, r2, #8
 8005666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0204 	bic.w	r2, r2, #4
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800568a:	e023      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fbfe 	bl	8005e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	021a      	lsls	r2, r3, #8
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056cc:	e002      	b.n	80056d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
      break;
 80056d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop

080056e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIM_ConfigClockSource+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e0b4      	b.n	800586e <HAL_TIM_ConfigClockSource+0x186>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4b56      	ldr	r3, [pc, #344]	; (8005878 <HAL_TIM_ConfigClockSource+0x190>)
 8005720:	4013      	ands	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573c:	d03e      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xd4>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	f200 8087 	bhi.w	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574a:	f000 8086 	beq.w	800585a <HAL_TIM_ConfigClockSource+0x172>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d87f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b70      	cmp	r3, #112	; 0x70
 8005756:	d01a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xa6>
 8005758:	2b70      	cmp	r3, #112	; 0x70
 800575a:	d87b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b60      	cmp	r3, #96	; 0x60
 800575e:	d050      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x11a>
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d877      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b50      	cmp	r3, #80	; 0x50
 8005766:	d03c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005768:	2b50      	cmp	r3, #80	; 0x50
 800576a:	d873      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d058      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x13a>
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d86f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b30      	cmp	r3, #48	; 0x30
 8005776:	d064      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d86b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d060      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d867      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005788:	2b10      	cmp	r3, #16
 800578a:	d05a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	e062      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800579e:	f000 fd71 	bl	8006284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e04f      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	f000 fd5a 	bl	8006284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e03c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 fc18 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2150      	movs	r1, #80	; 0x50
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fd27 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005800:	e02c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800580e:	461a      	mov	r2, r3
 8005810:	f000 fc74 	bl	80060fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2160      	movs	r1, #96	; 0x60
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fd17 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005820:	e01c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	461a      	mov	r2, r3
 8005830:	f000 fbf8 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fd07 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005840:	e00c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 fcfe 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005852:	e003      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e000      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	fffeff88 	.word	0xfffeff88

0800587c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d831      	bhi.n	80058f4 <HAL_TIM_ReadCapturedValue+0x78>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058f5 	.word	0x080058f5
 80058a0:	080058f5 	.word	0x080058f5
 80058a4:	080058f5 	.word	0x080058f5
 80058a8:	080058d7 	.word	0x080058d7
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058f5 	.word	0x080058f5
 80058b4:	080058f5 	.word	0x080058f5
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058f5 	.word	0x080058f5
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080058eb 	.word	0x080058eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	60fb      	str	r3, [r7, #12]

      break;
 80058d4:	e00f      	b.n	80058f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	60fb      	str	r3, [r7, #12]

      break;
 80058de:	e00a      	b.n	80058f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	60fb      	str	r3, [r7, #12]

      break;
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	60fb      	str	r3, [r7, #12]

      break;
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058f4:	bf00      	nop
  }

  return tmpreg;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a40      	ldr	r2, [pc, #256]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595e:	d00f      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3d      	ldr	r2, [pc, #244]	; (8005a58 <TIM_Base_SetConfig+0x118>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3c      	ldr	r2, [pc, #240]	; (8005a5c <TIM_Base_SetConfig+0x11c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3b      	ldr	r2, [pc, #236]	; (8005a60 <TIM_Base_SetConfig+0x120>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2f      	ldr	r2, [pc, #188]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a0:	d027      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <TIM_Base_SetConfig+0x118>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d023      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2b      	ldr	r2, [pc, #172]	; (8005a5c <TIM_Base_SetConfig+0x11c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <TIM_Base_SetConfig+0x120>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a29      	ldr	r2, [pc, #164]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d017      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a28      	ldr	r2, [pc, #160]	; (8005a68 <TIM_Base_SetConfig+0x128>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a27      	ldr	r2, [pc, #156]	; (8005a6c <TIM_Base_SetConfig+0x12c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <TIM_Base_SetConfig+0x130>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <TIM_Base_SetConfig+0x134>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a24      	ldr	r2, [pc, #144]	; (8005a78 <TIM_Base_SetConfig+0x138>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <TIM_Base_SetConfig+0x13c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d108      	bne.n	8005a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <TIM_Base_SetConfig+0x114>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0xf8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <TIM_Base_SetConfig+0x124>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	615a      	str	r2, [r3, #20]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40010400 	.word	0x40010400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400
 8005a70:	40014800 	.word	0x40014800
 8005a74:	40001800 	.word	0x40001800
 8005a78:	40001c00 	.word	0x40001c00
 8005a7c:	40002000 	.word	0x40002000

08005a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <TIM_OC1_SetConfig+0xd8>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0303 	bic.w	r3, r3, #3
 8005ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f023 0302 	bic.w	r3, r3, #2
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	; (8005b5c <TIM_OC1_SetConfig+0xdc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC1_SetConfig+0x64>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a20      	ldr	r2, [pc, #128]	; (8005b60 <TIM_OC1_SetConfig+0xe0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10c      	bne.n	8005afe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0308 	bic.w	r3, r3, #8
 8005aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0304 	bic.w	r3, r3, #4
 8005afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a16      	ldr	r2, [pc, #88]	; (8005b5c <TIM_OC1_SetConfig+0xdc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d003      	beq.n	8005b0e <TIM_OC1_SetConfig+0x8e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <TIM_OC1_SetConfig+0xe0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d111      	bne.n	8005b32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	621a      	str	r2, [r3, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	fffeff8f 	.word	0xfffeff8f
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40010400 	.word	0x40010400

08005b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0210 	bic.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <TIM_OC2_SetConfig+0xe4>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a23      	ldr	r2, [pc, #140]	; (8005c4c <TIM_OC2_SetConfig+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_OC2_SetConfig+0x68>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	; (8005c50 <TIM_OC2_SetConfig+0xec>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <TIM_OC2_SetConfig+0xe8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_OC2_SetConfig+0x94>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <TIM_OC2_SetConfig+0xec>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d113      	bne.n	8005c20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	feff8fff 	.word	0xfeff8fff
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40010400 	.word	0x40010400

08005c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4b2d      	ldr	r3, [pc, #180]	; (8005d34 <TIM_OC3_SetConfig+0xe0>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <TIM_OC3_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_OC3_SetConfig+0x66>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <TIM_OC3_SetConfig+0xe8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d10d      	bne.n	8005cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <TIM_OC3_SetConfig+0xe4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_OC3_SetConfig+0x92>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <TIM_OC3_SetConfig+0xe8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d113      	bne.n	8005d0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	621a      	str	r2, [r3, #32]
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	fffeff8f 	.word	0xfffeff8f
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <TIM_OC4_SetConfig+0xa4>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <TIM_OC4_SetConfig+0xa8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d003      	beq.n	8005da8 <TIM_OC4_SetConfig+0x68>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a12      	ldr	r2, [pc, #72]	; (8005dec <TIM_OC4_SetConfig+0xac>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d109      	bne.n	8005dbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	feff8fff 	.word	0xfeff8fff
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40010400 	.word	0x40010400

08005df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <TIM_OC5_SetConfig+0x98>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <TIM_OC5_SetConfig+0x9c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC5_SetConfig+0x5e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a11      	ldr	r2, [pc, #68]	; (8005e90 <TIM_OC5_SetConfig+0xa0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d109      	bne.n	8005e62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	fffeff8f 	.word	0xfffeff8f
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40010400 	.word	0x40010400

08005e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <TIM_OC6_SetConfig+0x9c>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	051b      	lsls	r3, r3, #20
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <TIM_OC6_SetConfig+0xa0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_OC6_SetConfig+0x60>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <TIM_OC6_SetConfig+0xa4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d109      	bne.n	8005f08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	029b      	lsls	r3, r3, #10
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	feff8fff 	.word	0xfeff8fff
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a28      	ldr	r2, [pc, #160]	; (8006008 <TIM_TI1_SetConfig+0xcc>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01b      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d017      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a25      	ldr	r2, [pc, #148]	; (800600c <TIM_TI1_SetConfig+0xd0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a24      	ldr	r2, [pc, #144]	; (8006010 <TIM_TI1_SetConfig+0xd4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a23      	ldr	r2, [pc, #140]	; (8006014 <TIM_TI1_SetConfig+0xd8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4a22      	ldr	r2, [pc, #136]	; (8006018 <TIM_TI1_SetConfig+0xdc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <TIM_TI1_SetConfig+0xe0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_TI1_SetConfig+0x66>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <TIM_TI1_SetConfig+0xe4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <TIM_TI1_SetConfig+0x6a>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <TIM_TI1_SetConfig+0x6c>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0303 	bic.w	r3, r3, #3
 8005fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e003      	b.n	8005fc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f023 030a 	bic.w	r3, r3, #10
 8005fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 030a 	and.w	r3, r3, #10
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800
 8006014:	40000c00 	.word	0x40000c00
 8006018:	40010400 	.word	0x40010400
 800601c:	40014000 	.word	0x40014000
 8006020:	40001800 	.word	0x40001800

08006024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 030a 	bic.w	r3, r3, #10
 8006060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006082:	b480      	push	{r7}
 8006084:	b087      	sub	sp, #28
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 0210 	bic.w	r2, r3, #16
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f023 0210 	bic.w	r2, r3, #16
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006126:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	031b      	lsls	r3, r3, #12
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 0303 	bic.w	r3, r3, #3
 8006188:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006198:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	621a      	str	r2, [r3, #32]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006212:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	031b      	lsls	r3, r3, #12
 8006218:	b29b      	uxth	r3, r3
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006226:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	031b      	lsls	r3, r3, #12
 800622c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	f043 0307 	orr.w	r3, r3, #7
 8006270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	021a      	lsls	r2, r3, #8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2201      	movs	r2, #1
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	401a      	ands	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	fa01 f303 	lsl.w	r3, r1, r3
 80062fc:	431a      	orrs	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e06d      	b.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a30      	ldr	r2, [pc, #192]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2f      	ldr	r2, [pc, #188]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d108      	bne.n	800636e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006362:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a20      	ldr	r2, [pc, #128]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639a:	d01d      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a1a      	ldr	r2, [pc, #104]	; (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a15      	ldr	r2, [pc, #84]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a16      	ldr	r2, [pc, #88]	; (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d10c      	bne.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40010000 	.word	0x40010000
 8006414:	40010400 	.word	0x40010400
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40014000 	.word	0x40014000
 8006428:	40001800 	.word	0x40001800

0800642c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e040      	b.n	80064fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb fc28 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fbe6 	bl	8006c78 <UART_SetConfig>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e022      	b.n	80064fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fe3e 	bl	8007140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fec5 	bl	8007284 <UART_CheckIdleState>
 80064fa:	4603      	mov	r3, r0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006518:	2b20      	cmp	r3, #32
 800651a:	d171      	bne.n	8006600 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_UART_Transmit+0x24>
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e06a      	b.n	8006602 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2221      	movs	r2, #33	; 0x21
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800653a:	f7fb fd5b 	bl	8001ff4 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	88fa      	ldrh	r2, [r7, #6]
 8006544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88fa      	ldrh	r2, [r7, #6]
 800654c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d108      	bne.n	800656c <HAL_UART_Transmit+0x68>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e003      	b.n	8006574 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006574:	e02c      	b.n	80065d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2200      	movs	r2, #0
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 feb6 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e038      	b.n	8006602 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	3302      	adds	r3, #2
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e007      	b.n	80065be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	3301      	adds	r3, #1
 80065bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1cc      	bne.n	8006576 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fe83 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e005      	b.n	8006602 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b08a      	sub	sp, #40	; 0x28
 800660e:	af00      	add	r7, sp, #0
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	4613      	mov	r3, r2
 8006616:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800661e:	2b20      	cmp	r3, #32
 8006620:	d132      	bne.n	8006688 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_UART_Receive_IT+0x24>
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e02b      	b.n	800668a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d018      	beq.n	8006678 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	613b      	str	r3, [r7, #16]
   return(result);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	69f9      	ldr	r1, [r7, #28]
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	e841 2300 	strex	r3, r2, [r1]
 8006670:	61bb      	str	r3, [r7, #24]
   return(result);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e6      	bne.n	8006646 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	461a      	mov	r2, r3
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fefe 	bl	8007480 <UART_Start_Receive_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	e000      	b.n	800668a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3728      	adds	r7, #40	; 0x28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b0ba      	sub	sp, #232	; 0xe8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066be:	f640 030f 	movw	r3, #2063	; 0x80f
 80066c2:	4013      	ands	r3, r2
 80066c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d115      	bne.n	80066fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00f      	beq.n	80066fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e0:	f003 0320 	and.w	r3, r3, #32
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8297 	beq.w	8006c20 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      }
      return;
 80066fa:	e291      	b.n	8006c20 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8117 	beq.w	8006934 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006716:	4b85      	ldr	r3, [pc, #532]	; (800692c <HAL_UART_IRQHandler+0x298>)
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 810a 	beq.w	8006934 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_UART_IRQHandler+0xbc>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2201      	movs	r2, #1
 800673e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006746:	f043 0201 	orr.w	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_UART_IRQHandler+0xec>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2202      	movs	r2, #2
 800676e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d011      	beq.n	80067b0 <HAL_UART_IRQHandler+0x11c>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2204      	movs	r2, #4
 800679e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d017      	beq.n	80067ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2208      	movs	r2, #8
 80067da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e2:	f043 0208 	orr.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <HAL_UART_IRQHandler+0x18a>
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 81fd 	beq.w	8006c24 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d005      	beq.n	8006876 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800686e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006872:	2b00      	cmp	r3, #0
 8006874:	d04f      	beq.n	8006916 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fec8 	bl	800760c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d141      	bne.n	800690e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d9      	bne.n	800688a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d013      	beq.n	8006906 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <HAL_UART_IRQHandler+0x29c>)
 80068e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fb ffc7 	bl	800287e <HAL_DMA_Abort_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d017      	beq.n	8006926 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e00f      	b.n	8006926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f9a0 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690c:	e00b      	b.n	8006926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f99c 	bl	8006c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	e007      	b.n	8006926 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f998 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006924:	e17e      	b.n	8006c24 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006926:	bf00      	nop
    return;
 8006928:	e17c      	b.n	8006c24 <HAL_UART_IRQHandler+0x590>
 800692a:	bf00      	nop
 800692c:	04000120 	.word	0x04000120
 8006930:	080076d5 	.word	0x080076d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006938:	2b01      	cmp	r3, #1
 800693a:	f040 814c 	bne.w	8006bd6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 0310 	and.w	r3, r3, #16
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8145 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006950:	f003 0310 	and.w	r3, r3, #16
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 813e 	beq.w	8006bd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2210      	movs	r2, #16
 8006960:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	f040 80b6 	bne.w	8006ade <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800697e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8150 	beq.w	8006c28 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800698e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006992:	429a      	cmp	r2, r3
 8006994:	f080 8148 	bcs.w	8006c28 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800699e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ac:	f000 8086 	beq.w	8006abc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1da      	bne.n	80069b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e1      	bne.n	80069fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3308      	adds	r3, #8
 8006a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e3      	bne.n	8006a36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8c:	f023 0310 	bic.w	r3, r3, #16
 8006a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e4      	bne.n	8006a7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fb fe71 	bl	800279e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8c2 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006adc:	e0a4      	b.n	8006c28 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8096 	beq.w	8006c2c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8091 	beq.w	8006c2c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e4      	bne.n	8006b0a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f023 0301 	bic.w	r3, r3, #1
 8006b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b64:	633a      	str	r2, [r7, #48]	; 0x30
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e3      	bne.n	8006b40 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f023 0310 	bic.w	r3, r3, #16
 8006ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	69b9      	ldr	r1, [r7, #24]
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e4      	bne.n	8006b8c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f846 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd4:	e02a      	b.n	8006c2c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00e      	beq.n	8006c00 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d008      	beq.n	8006c00 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01c      	beq.n	8006c30 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
    }
    return;
 8006bfe:	e017      	b.n	8006c30 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d012      	beq.n	8006c32 <HAL_UART_IRQHandler+0x59e>
 8006c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd71 	bl	8007700 <UART_EndTransmit_IT>
    return;
 8006c1e:	e008      	b.n	8006c32 <HAL_UART_IRQHandler+0x59e>
      return;
 8006c20:	bf00      	nop
 8006c22:	e006      	b.n	8006c32 <HAL_UART_IRQHandler+0x59e>
    return;
 8006c24:	bf00      	nop
 8006c26:	e004      	b.n	8006c32 <HAL_UART_IRQHandler+0x59e>
      return;
 8006c28:	bf00      	nop
 8006c2a:	e002      	b.n	8006c32 <HAL_UART_IRQHandler+0x59e>
      return;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <HAL_UART_IRQHandler+0x59e>
    return;
 8006c30:	bf00      	nop
  }

}
 8006c32:	37e8      	adds	r7, #232	; 0xe8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4ba6      	ldr	r3, [pc, #664]	; (8006f3c <UART_SetConfig+0x2c4>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	430b      	orrs	r3, r1
 8006cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a94      	ldr	r2, [pc, #592]	; (8006f40 <UART_SetConfig+0x2c8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d120      	bne.n	8006d36 <UART_SetConfig+0xbe>
 8006cf4:	4b93      	ldr	r3, [pc, #588]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f003 0303 	and.w	r3, r3, #3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d816      	bhi.n	8006d30 <UART_SetConfig+0xb8>
 8006d02:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x90>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d19 	.word	0x08006d19
 8006d0c:	08006d25 	.word	0x08006d25
 8006d10:	08006d1f 	.word	0x08006d1f
 8006d14:	08006d2b 	.word	0x08006d2b
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
 8006d1c:	e150      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	77fb      	strb	r3, [r7, #31]
 8006d22:	e14d      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d24:	2304      	movs	r3, #4
 8006d26:	77fb      	strb	r3, [r7, #31]
 8006d28:	e14a      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e147      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d30:	2310      	movs	r3, #16
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e144      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a83      	ldr	r2, [pc, #524]	; (8006f48 <UART_SetConfig+0x2d0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d132      	bne.n	8006da6 <UART_SetConfig+0x12e>
 8006d40:	4b80      	ldr	r3, [pc, #512]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d828      	bhi.n	8006da0 <UART_SetConfig+0x128>
 8006d4e:	a201      	add	r2, pc, #4	; (adr r2, 8006d54 <UART_SetConfig+0xdc>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006da1 	.word	0x08006da1
 8006d5c:	08006da1 	.word	0x08006da1
 8006d60:	08006da1 	.word	0x08006da1
 8006d64:	08006d95 	.word	0x08006d95
 8006d68:	08006da1 	.word	0x08006da1
 8006d6c:	08006da1 	.word	0x08006da1
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006d8f 	.word	0x08006d8f
 8006d78:	08006da1 	.word	0x08006da1
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006d9b 	.word	0x08006d9b
 8006d88:	2300      	movs	r3, #0
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e118      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e115      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e112      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e10f      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e10c      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <UART_SetConfig+0x2d4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d120      	bne.n	8006df2 <UART_SetConfig+0x17a>
 8006db0:	4b64      	ldr	r3, [pc, #400]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d013      	beq.n	8006de6 <UART_SetConfig+0x16e>
 8006dbe:	2b30      	cmp	r3, #48	; 0x30
 8006dc0:	d814      	bhi.n	8006dec <UART_SetConfig+0x174>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d009      	beq.n	8006dda <UART_SetConfig+0x162>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d810      	bhi.n	8006dec <UART_SetConfig+0x174>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <UART_SetConfig+0x15c>
 8006dce:	2b10      	cmp	r3, #16
 8006dd0:	d006      	beq.n	8006de0 <UART_SetConfig+0x168>
 8006dd2:	e00b      	b.n	8006dec <UART_SetConfig+0x174>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e0f2      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e0ef      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006de0:	2304      	movs	r3, #4
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e0ec      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006de6:	2308      	movs	r3, #8
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e0e9      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006dec:	2310      	movs	r3, #16
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e0e6      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a56      	ldr	r2, [pc, #344]	; (8006f50 <UART_SetConfig+0x2d8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d120      	bne.n	8006e3e <UART_SetConfig+0x1c6>
 8006dfc:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d013      	beq.n	8006e32 <UART_SetConfig+0x1ba>
 8006e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e0c:	d814      	bhi.n	8006e38 <UART_SetConfig+0x1c0>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d009      	beq.n	8006e26 <UART_SetConfig+0x1ae>
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d810      	bhi.n	8006e38 <UART_SetConfig+0x1c0>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <UART_SetConfig+0x1a8>
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d006      	beq.n	8006e2c <UART_SetConfig+0x1b4>
 8006e1e:	e00b      	b.n	8006e38 <UART_SetConfig+0x1c0>
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e0cc      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e26:	2302      	movs	r3, #2
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e0c9      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e0c6      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e32:	2308      	movs	r3, #8
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e0c3      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e0c0      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a44      	ldr	r2, [pc, #272]	; (8006f54 <UART_SetConfig+0x2dc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d125      	bne.n	8006e94 <UART_SetConfig+0x21c>
 8006e48:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d017      	beq.n	8006e88 <UART_SetConfig+0x210>
 8006e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5c:	d817      	bhi.n	8006e8e <UART_SetConfig+0x216>
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d00b      	beq.n	8006e7c <UART_SetConfig+0x204>
 8006e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e68:	d811      	bhi.n	8006e8e <UART_SetConfig+0x216>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <UART_SetConfig+0x1fe>
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d006      	beq.n	8006e82 <UART_SetConfig+0x20a>
 8006e74:	e00b      	b.n	8006e8e <UART_SetConfig+0x216>
 8006e76:	2300      	movs	r3, #0
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e0a1      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	77fb      	strb	r3, [r7, #31]
 8006e80:	e09e      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e82:	2304      	movs	r3, #4
 8006e84:	77fb      	strb	r3, [r7, #31]
 8006e86:	e09b      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e098      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e8e:	2310      	movs	r3, #16
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e095      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <UART_SetConfig+0x2e0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d125      	bne.n	8006eea <UART_SetConfig+0x272>
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eac:	d017      	beq.n	8006ede <UART_SetConfig+0x266>
 8006eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eb2:	d817      	bhi.n	8006ee4 <UART_SetConfig+0x26c>
 8006eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb8:	d00b      	beq.n	8006ed2 <UART_SetConfig+0x25a>
 8006eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ebe:	d811      	bhi.n	8006ee4 <UART_SetConfig+0x26c>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <UART_SetConfig+0x254>
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d006      	beq.n	8006ed8 <UART_SetConfig+0x260>
 8006eca:	e00b      	b.n	8006ee4 <UART_SetConfig+0x26c>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e076      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e073      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e070      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006ede:	2308      	movs	r3, #8
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e06d      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e06a      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <UART_SetConfig+0x2e4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d138      	bne.n	8006f66 <UART_SetConfig+0x2ee>
 8006ef4:	4b13      	ldr	r3, [pc, #76]	; (8006f44 <UART_SetConfig+0x2cc>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f02:	d017      	beq.n	8006f34 <UART_SetConfig+0x2bc>
 8006f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f08:	d82a      	bhi.n	8006f60 <UART_SetConfig+0x2e8>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d00b      	beq.n	8006f28 <UART_SetConfig+0x2b0>
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d824      	bhi.n	8006f60 <UART_SetConfig+0x2e8>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <UART_SetConfig+0x2aa>
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1e:	d006      	beq.n	8006f2e <UART_SetConfig+0x2b6>
 8006f20:	e01e      	b.n	8006f60 <UART_SetConfig+0x2e8>
 8006f22:	2300      	movs	r3, #0
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e04b      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e048      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	77fb      	strb	r3, [r7, #31]
 8006f32:	e045      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006f34:	2308      	movs	r3, #8
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e042      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006f3a:	bf00      	nop
 8006f3c:	efff69f3 	.word	0xefff69f3
 8006f40:	40011000 	.word	0x40011000
 8006f44:	40023800 	.word	0x40023800
 8006f48:	40004400 	.word	0x40004400
 8006f4c:	40004800 	.word	0x40004800
 8006f50:	40004c00 	.word	0x40004c00
 8006f54:	40005000 	.word	0x40005000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	40007800 	.word	0x40007800
 8006f60:	2310      	movs	r3, #16
 8006f62:	77fb      	strb	r3, [r7, #31]
 8006f64:	e02c      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a72      	ldr	r2, [pc, #456]	; (8007134 <UART_SetConfig+0x4bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d125      	bne.n	8006fbc <UART_SetConfig+0x344>
 8006f70:	4b71      	ldr	r3, [pc, #452]	; (8007138 <UART_SetConfig+0x4c0>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f7e:	d017      	beq.n	8006fb0 <UART_SetConfig+0x338>
 8006f80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f84:	d817      	bhi.n	8006fb6 <UART_SetConfig+0x33e>
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d00b      	beq.n	8006fa4 <UART_SetConfig+0x32c>
 8006f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f90:	d811      	bhi.n	8006fb6 <UART_SetConfig+0x33e>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <UART_SetConfig+0x326>
 8006f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9a:	d006      	beq.n	8006faa <UART_SetConfig+0x332>
 8006f9c:	e00b      	b.n	8006fb6 <UART_SetConfig+0x33e>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e00d      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e00a      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006faa:	2304      	movs	r3, #4
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e007      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e004      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006fb6:	2310      	movs	r3, #16
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	e001      	b.n	8006fc0 <UART_SetConfig+0x348>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc8:	d15b      	bne.n	8007082 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006fca:	7ffb      	ldrb	r3, [r7, #31]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d828      	bhi.n	8007022 <UART_SetConfig+0x3aa>
 8006fd0:	a201      	add	r2, pc, #4	; (adr r2, 8006fd8 <UART_SetConfig+0x360>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08007005 	.word	0x08007005
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	08007023 	.word	0x08007023
 8006fe8:	08007013 	.word	0x08007013
 8006fec:	08007023 	.word	0x08007023
 8006ff0:	08007023 	.word	0x08007023
 8006ff4:	08007023 	.word	0x08007023
 8006ff8:	0800701b 	.word	0x0800701b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffc:	f7fc ff84 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 8007000:	61b8      	str	r0, [r7, #24]
        break;
 8007002:	e013      	b.n	800702c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007004:	f7fc ff94 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 8007008:	61b8      	str	r0, [r7, #24]
        break;
 800700a:	e00f      	b.n	800702c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800700c:	4b4b      	ldr	r3, [pc, #300]	; (800713c <UART_SetConfig+0x4c4>)
 800700e:	61bb      	str	r3, [r7, #24]
        break;
 8007010:	e00c      	b.n	800702c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007012:	f7fc fe67 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8007016:	61b8      	str	r0, [r7, #24]
        break;
 8007018:	e008      	b.n	800702c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800701a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701e:	61bb      	str	r3, [r7, #24]
        break;
 8007020:	e004      	b.n	800702c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	77bb      	strb	r3, [r7, #30]
        break;
 800702a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d074      	beq.n	800711c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	005a      	lsls	r2, r3, #1
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	441a      	add	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d916      	bls.n	800707c <UART_SetConfig+0x404>
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007054:	d212      	bcs.n	800707c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f023 030f 	bic.w	r3, r3, #15
 800705e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	b29a      	uxth	r2, r3
 800706c:	89fb      	ldrh	r3, [r7, #14]
 800706e:	4313      	orrs	r3, r2
 8007070:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	89fa      	ldrh	r2, [r7, #14]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	e04f      	b.n	800711c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	77bb      	strb	r3, [r7, #30]
 8007080:	e04c      	b.n	800711c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007082:	7ffb      	ldrb	r3, [r7, #31]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d828      	bhi.n	80070da <UART_SetConfig+0x462>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <UART_SetConfig+0x418>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070c5 	.word	0x080070c5
 800709c:	080070db 	.word	0x080070db
 80070a0:	080070cb 	.word	0x080070cb
 80070a4:	080070db 	.word	0x080070db
 80070a8:	080070db 	.word	0x080070db
 80070ac:	080070db 	.word	0x080070db
 80070b0:	080070d3 	.word	0x080070d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fc ff28 	bl	8003f08 <HAL_RCC_GetPCLK1Freq>
 80070b8:	61b8      	str	r0, [r7, #24]
        break;
 80070ba:	e013      	b.n	80070e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070bc:	f7fc ff38 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 80070c0:	61b8      	str	r0, [r7, #24]
        break;
 80070c2:	e00f      	b.n	80070e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c4:	4b1d      	ldr	r3, [pc, #116]	; (800713c <UART_SetConfig+0x4c4>)
 80070c6:	61bb      	str	r3, [r7, #24]
        break;
 80070c8:	e00c      	b.n	80070e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ca:	f7fc fe0b 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 80070ce:	61b8      	str	r0, [r7, #24]
        break;
 80070d0:	e008      	b.n	80070e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d6:	61bb      	str	r3, [r7, #24]
        break;
 80070d8:	e004      	b.n	80070e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	77bb      	strb	r3, [r7, #30]
        break;
 80070e2:	bf00      	nop
    }

    if (pclk != 0U)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d018      	beq.n	800711c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	085a      	lsrs	r2, r3, #1
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	441a      	add	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b0f      	cmp	r3, #15
 8007102:	d909      	bls.n	8007118 <UART_SetConfig+0x4a0>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710a:	d205      	bcs.n	8007118 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	60da      	str	r2, [r3, #12]
 8007116:	e001      	b.n	800711c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007128:	7fbb      	ldrb	r3, [r7, #30]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40007c00 	.word	0x40007c00
 8007138:	40023800 	.word	0x40023800
 800713c:	00f42400 	.word	0x00f42400

08007140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00a      	beq.n	800716a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00a      	beq.n	80071ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00a      	beq.n	80071d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723e:	d10a      	bne.n	8007256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  }
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af02      	add	r7, sp, #8
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007294:	f7fa feae 	bl	8001ff4 <HAL_GetTick>
 8007298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0308 	and.w	r3, r3, #8
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d10e      	bne.n	80072c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f81b 	bl	80072f2 <UART_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e011      	b.n	80072ea <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b09c      	sub	sp, #112	; 0x70
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007302:	e0a7      	b.n	8007454 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	f000 80a3 	beq.w	8007454 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730e:	f7fa fe71 	bl	8001ff4 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800731a:	429a      	cmp	r2, r3
 800731c:	d302      	bcc.n	8007324 <UART_WaitOnFlagUntilTimeout+0x32>
 800731e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007320:	2b00      	cmp	r3, #0
 8007322:	d13f      	bne.n	80073a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007338:	667b      	str	r3, [r7, #100]	; 0x64
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007344:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e6      	bne.n	8007324 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3308      	adds	r3, #8
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	663b      	str	r3, [r7, #96]	; 0x60
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3308      	adds	r3, #8
 8007374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007376:	64ba      	str	r2, [r7, #72]	; 0x48
 8007378:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800737c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e5      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e068      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d050      	beq.n	8007454 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c0:	d148      	bne.n	8007454 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
 80073ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e6      	bne.n	80073cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	613b      	str	r3, [r7, #16]
   return(result);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	66bb      	str	r3, [r7, #104]	; 0x68
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800741e:	623a      	str	r2, [r7, #32]
 8007420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	69f9      	ldr	r1, [r7, #28]
 8007424:	6a3a      	ldr	r2, [r7, #32]
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	61bb      	str	r3, [r7, #24]
   return(result);
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e010      	b.n	8007476 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	4013      	ands	r3, r2
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	429a      	cmp	r2, r3
 8007462:	bf0c      	ite	eq
 8007464:	2301      	moveq	r3, #1
 8007466:	2300      	movne	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	429a      	cmp	r2, r3
 8007470:	f43f af48 	beq.w	8007304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3770      	adds	r7, #112	; 0x70
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007480:	b480      	push	{r7}
 8007482:	b097      	sub	sp, #92	; 0x5c
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	d10e      	bne.n	80074d2 <UART_Start_Receive_IT+0x52>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <UART_Start_Receive_IT+0x48>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80074c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074c6:	e02d      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	22ff      	movs	r2, #255	; 0xff
 80074cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074d0:	e028      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <UART_Start_Receive_IT+0x76>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <UART_Start_Receive_IT+0x6c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074ea:	e01b      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	227f      	movs	r2, #127	; 0x7f
 80074f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074f4:	e016      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074fe:	d10d      	bne.n	800751c <UART_Start_Receive_IT+0x9c>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d104      	bne.n	8007512 <UART_Start_Receive_IT+0x92>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	227f      	movs	r2, #127	; 0x7f
 800750c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007510:	e008      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	223f      	movs	r2, #63	; 0x3f
 8007516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800751a:	e003      	b.n	8007524 <UART_Start_Receive_IT+0xa4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2222      	movs	r2, #34	; 0x22
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	f043 0301 	orr.w	r3, r3, #1
 800754a:	657b      	str	r3, [r7, #84]	; 0x54
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007554:	64ba      	str	r2, [r7, #72]	; 0x48
 8007556:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800755a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d107      	bne.n	8007582 <UART_Start_Receive_IT+0x102>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a21      	ldr	r2, [pc, #132]	; (8007604 <UART_Start_Receive_IT+0x184>)
 800757e:	669a      	str	r2, [r3, #104]	; 0x68
 8007580:	e002      	b.n	8007588 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <UART_Start_Receive_IT+0x188>)
 8007586:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d019      	beq.n	80075c4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80075a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
 80075b0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e6      	bne.n	8007590 <UART_Start_Receive_IT+0x110>
 80075c2:	e018      	b.n	80075f6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f043 0320 	orr.w	r3, r3, #32
 80075d8:	653b      	str	r3, [r7, #80]	; 0x50
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e2:	623b      	str	r3, [r7, #32]
 80075e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	69f9      	ldr	r1, [r7, #28]
 80075e8:	6a3a      	ldr	r2, [r7, #32]
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	375c      	adds	r7, #92	; 0x5c
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	080078bb 	.word	0x080078bb
 8007608:	08007755 	.word	0x08007755

0800760c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b095      	sub	sp, #84	; 0x54
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	643b      	str	r3, [r7, #64]	; 0x40
 8007634:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007638:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3308      	adds	r3, #8
 800764c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	61fb      	str	r3, [r7, #28]
   return(result);
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	64bb      	str	r3, [r7, #72]	; 0x48
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3308      	adds	r3, #8
 8007664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	2b01      	cmp	r3, #1
 8007680:	d118      	bne.n	80076b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0310 	bic.w	r3, r3, #16
 8007696:	647b      	str	r3, [r7, #68]	; 0x44
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076c8:	bf00      	nop
 80076ca:	3754      	adds	r7, #84	; 0x54
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff faaa 	bl	8006c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	60bb      	str	r3, [r7, #8]
   return(result);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	61bb      	str	r3, [r7, #24]
 8007728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	613b      	str	r3, [r7, #16]
   return(result);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fa76 	bl	8006c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800774c:	bf00      	nop
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b096      	sub	sp, #88	; 0x58
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007762:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	2b22      	cmp	r3, #34	; 0x22
 800776e:	f040 8098 	bne.w	80078a2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800777c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007780:	b2d9      	uxtb	r1, r3
 8007782:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007786:	b2da      	uxtb	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778c:	400a      	ands	r2, r1
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d17b      	bne.n	80078b2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ce:	653b      	str	r3, [r7, #80]	; 0x50
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077d8:	647b      	str	r3, [r7, #68]	; 0x44
 80077da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	623b      	str	r3, [r7, #32]
   return(result);
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3308      	adds	r3, #8
 800780a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800780c:	633a      	str	r2, [r7, #48]	; 0x30
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007838:	2b01      	cmp	r3, #1
 800783a:	d12e      	bne.n	800789a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0310 	bic.w	r3, r3, #16
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007860:	61fb      	str	r3, [r7, #28]
 8007862:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	69b9      	ldr	r1, [r7, #24]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	617b      	str	r3, [r7, #20]
   return(result);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e6      	bne.n	8007842 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b10      	cmp	r3, #16
 8007880:	d103      	bne.n	800788a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2210      	movs	r2, #16
 8007888:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff f9e4 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007898:	e00b      	b.n	80078b2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7f9 fbe4 	bl	8001068 <HAL_UART_RxCpltCallback>
}
 80078a0:	e007      	b.n	80078b2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f042 0208 	orr.w	r2, r2, #8
 80078b0:	619a      	str	r2, [r3, #24]
}
 80078b2:	bf00      	nop
 80078b4:	3758      	adds	r7, #88	; 0x58
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b096      	sub	sp, #88	; 0x58
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d2:	2b22      	cmp	r3, #34	; 0x22
 80078d4:	f040 8098 	bne.w	8007a08 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80078e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80078ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078f0:	4013      	ands	r3, r2
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d17b      	bne.n	8007a18 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793e:	643b      	str	r3, [r7, #64]	; 0x40
 8007940:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e6      	bne.n	8007920 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	61fb      	str	r3, [r7, #28]
   return(result);
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	64bb      	str	r3, [r7, #72]	; 0x48
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d12e      	bne.n	8007a00 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	647b      	str	r3, [r7, #68]	; 0x44
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6979      	ldr	r1, [r7, #20]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	613b      	str	r3, [r7, #16]
   return(result);
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e6      	bne.n	80079a8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d103      	bne.n	80079f0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2210      	movs	r2, #16
 80079ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff f931 	bl	8006c60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079fe:	e00b      	b.n	8007a18 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fb31 	bl	8001068 <HAL_UART_RxCpltCallback>
}
 8007a06:	e007      	b.n	8007a18 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0208 	orr.w	r2, r2, #8
 8007a16:	619a      	str	r2, [r3, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	3758      	adds	r7, #88	; 0x58
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a20:	b084      	sub	sp, #16
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	f107 001c 	add.w	r0, r7, #28
 8007a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d120      	bne.n	8007a7a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	4b20      	ldr	r3, [pc, #128]	; (8007acc <USB_CoreInit+0xac>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d105      	bne.n	8007a6e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fa96 	bl	8007fa0 <USB_CoreReset>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e010      	b.n	8007a9c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa8a 	bl	8007fa0 <USB_CoreReset>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10b      	bne.n	8007aba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f043 0206 	orr.w	r2, r3, #6
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f043 0220 	orr.w	r2, r3, #32
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ac6:	b004      	add	sp, #16
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	ffbdffbf 	.word	0xffbdffbf

08007ad0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 0201 	bic.w	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d115      	bne.n	8007b40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b20:	2001      	movs	r0, #1
 8007b22:	f7fa fa73 	bl	800200c <HAL_Delay>
      ms++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa29 	bl	8007f84 <USB_GetMode>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d01e      	beq.n	8007b76 <USB_SetCurrentMode+0x84>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b31      	cmp	r3, #49	; 0x31
 8007b3c:	d9f0      	bls.n	8007b20 <USB_SetCurrentMode+0x2e>
 8007b3e:	e01a      	b.n	8007b76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d115      	bne.n	8007b72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b52:	2001      	movs	r0, #1
 8007b54:	f7fa fa5a 	bl	800200c <HAL_Delay>
      ms++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa10 	bl	8007f84 <USB_GetMode>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <USB_SetCurrentMode+0x84>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b31      	cmp	r3, #49	; 0x31
 8007b6e:	d9f0      	bls.n	8007b52 <USB_SetCurrentMode+0x60>
 8007b70:	e001      	b.n	8007b76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e005      	b.n	8007b82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b32      	cmp	r3, #50	; 0x32
 8007b7a:	d101      	bne.n	8007b80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e000      	b.n	8007b82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b086      	sub	sp, #24
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e009      	b.n	8007bc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3340      	adds	r3, #64	; 0x40
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	2b0e      	cmp	r3, #14
 8007bc4:	d9f2      	bls.n	8007bac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d11c      	bne.n	8007c06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bda:	f043 0302 	orr.w	r3, r3, #2
 8007bde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e005      	b.n	8007c12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c24:	4619      	mov	r1, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	680b      	ldr	r3, [r1, #0]
 8007c30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10c      	bne.n	8007c52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f965 	bl	8007f10 <USB_SetDevSpeed>
 8007c46:	e008      	b.n	8007c5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c48:	2101      	movs	r1, #1
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f960 	bl	8007f10 <USB_SetDevSpeed>
 8007c50:	e003      	b.n	8007c5a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c52:	2103      	movs	r1, #3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f95b 	bl	8007f10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c5a:	2110      	movs	r1, #16
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f8f3 	bl	8007e48 <USB_FlushTxFifo>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f91f 	bl	8007eb0 <USB_FlushRxFifo>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c82:	461a      	mov	r2, r3
 8007c84:	2300      	movs	r3, #0
 8007c86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	e043      	b.n	8007d2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cbc:	d118      	bne.n	8007cf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e013      	b.n	8007d02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e008      	b.n	8007d02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d20:	461a      	mov	r2, r3
 8007d22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d3b7      	bcc.n	8007ca6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	e043      	b.n	8007dc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d52:	d118      	bne.n	8007d86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d66:	461a      	mov	r2, r3
 8007d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e013      	b.n	8007d98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	e008      	b.n	8007d98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	461a      	mov	r2, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db6:	461a      	mov	r2, r3
 8007db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007dbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d3b7      	bcc.n	8007d3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007dec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f043 0210 	orr.w	r2, r3, #16
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699a      	ldr	r2, [r3, #24]
 8007e04:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <USB_DevInit+0x2b4>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f043 0208 	orr.w	r2, r3, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d105      	bne.n	8007e30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <USB_DevInit+0x2b8>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e3c:	b004      	add	sp, #16
 8007e3e:	4770      	bx	lr
 8007e40:	803c3800 	.word	0x803c3800
 8007e44:	40000004 	.word	0x40000004

08007e48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4a13      	ldr	r2, [pc, #76]	; (8007eac <USB_FlushTxFifo+0x64>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d901      	bls.n	8007e68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e01b      	b.n	8007ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	daf2      	bge.n	8007e56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	019b      	lsls	r3, r3, #6
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <USB_FlushTxFifo+0x64>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e006      	b.n	8007ea0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d0f0      	beq.n	8007e80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	00030d40 	.word	0x00030d40

08007eb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4a11      	ldr	r2, [pc, #68]	; (8007f0c <USB_FlushRxFifo+0x5c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e018      	b.n	8007f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	daf2      	bge.n	8007ebc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2210      	movs	r2, #16
 8007ede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <USB_FlushRxFifo+0x5c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d901      	bls.n	8007ef2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e006      	b.n	8007f00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d0f0      	beq.n	8007ee0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	00030d40 	.word	0x00030d40

08007f10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f30:	4313      	orrs	r3, r2
 8007f32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f5c:	f023 0303 	bic.w	r3, r3, #3
 8007f60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f70:	f043 0302 	orr.w	r3, r3, #2
 8007f74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f003 0301 	and.w	r3, r3, #1
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a13      	ldr	r2, [pc, #76]	; (8008004 <USB_CoreReset+0x64>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d901      	bls.n	8007fbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e01b      	b.n	8007ff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	daf2      	bge.n	8007fac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f043 0201 	orr.w	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <USB_CoreReset+0x64>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d901      	bls.n	8007fe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e006      	b.n	8007ff6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d0f0      	beq.n	8007fd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	00030d40 	.word	0x00030d40

08008008 <siprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	b500      	push	{lr}
 800800c:	b09c      	sub	sp, #112	; 0x70
 800800e:	ab1d      	add	r3, sp, #116	; 0x74
 8008010:	9002      	str	r0, [sp, #8]
 8008012:	9006      	str	r0, [sp, #24]
 8008014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008018:	4809      	ldr	r0, [pc, #36]	; (8008040 <siprintf+0x38>)
 800801a:	9107      	str	r1, [sp, #28]
 800801c:	9104      	str	r1, [sp, #16]
 800801e:	4909      	ldr	r1, [pc, #36]	; (8008044 <siprintf+0x3c>)
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	9105      	str	r1, [sp, #20]
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	a902      	add	r1, sp, #8
 800802c:	f000 f9c0 	bl	80083b0 <_svfiprintf_r>
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	b01c      	add	sp, #112	; 0x70
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	20000094 	.word	0x20000094
 8008044:	ffff0208 	.word	0xffff0208

08008048 <siscanf>:
 8008048:	b40e      	push	{r1, r2, r3}
 800804a:	b510      	push	{r4, lr}
 800804c:	b09f      	sub	sp, #124	; 0x7c
 800804e:	ac21      	add	r4, sp, #132	; 0x84
 8008050:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008054:	f854 2b04 	ldr.w	r2, [r4], #4
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800805e:	9004      	str	r0, [sp, #16]
 8008060:	9008      	str	r0, [sp, #32]
 8008062:	f7f8 f8d5 	bl	8000210 <strlen>
 8008066:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <siscanf+0x50>)
 8008068:	9005      	str	r0, [sp, #20]
 800806a:	9009      	str	r0, [sp, #36]	; 0x24
 800806c:	930d      	str	r3, [sp, #52]	; 0x34
 800806e:	480b      	ldr	r0, [pc, #44]	; (800809c <siscanf+0x54>)
 8008070:	9a01      	ldr	r2, [sp, #4]
 8008072:	6800      	ldr	r0, [r0, #0]
 8008074:	9403      	str	r4, [sp, #12]
 8008076:	2300      	movs	r3, #0
 8008078:	9311      	str	r3, [sp, #68]	; 0x44
 800807a:	9316      	str	r3, [sp, #88]	; 0x58
 800807c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008080:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008084:	a904      	add	r1, sp, #16
 8008086:	4623      	mov	r3, r4
 8008088:	f000 faea 	bl	8008660 <__ssvfiscanf_r>
 800808c:	b01f      	add	sp, #124	; 0x7c
 800808e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008092:	b003      	add	sp, #12
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	080080a1 	.word	0x080080a1
 800809c:	20000094 	.word	0x20000094

080080a0 <__seofread>:
 80080a0:	2000      	movs	r0, #0
 80080a2:	4770      	bx	lr

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000094 	.word	0x20000094

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4d0d      	ldr	r5, [pc, #52]	; (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	; (80080fc <__libc_init_array+0x3c>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2600      	movs	r6, #0
 80080cc:	42a6      	cmp	r6, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4d0b      	ldr	r5, [pc, #44]	; (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	; (8008104 <__libc_init_array+0x44>)
 80080d4:	f001 f8f6 	bl	80092c4 <_init>
 80080d8:	1b64      	subs	r4, r4, r5
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2600      	movs	r6, #0
 80080de:	42a6      	cmp	r6, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e8:	4798      	blx	r3
 80080ea:	3601      	adds	r6, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f2:	4798      	blx	r3
 80080f4:	3601      	adds	r6, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	080094b8 	.word	0x080094b8
 80080fc:	080094b8 	.word	0x080094b8
 8008100:	080094b8 	.word	0x080094b8
 8008104:	080094bc 	.word	0x080094bc

08008108 <__retarget_lock_acquire_recursive>:
 8008108:	4770      	bx	lr

0800810a <__retarget_lock_release_recursive>:
 800810a:	4770      	bx	lr

0800810c <_free_r>:
 800810c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800810e:	2900      	cmp	r1, #0
 8008110:	d044      	beq.n	800819c <_free_r+0x90>
 8008112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008116:	9001      	str	r0, [sp, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f1a1 0404 	sub.w	r4, r1, #4
 800811e:	bfb8      	it	lt
 8008120:	18e4      	addlt	r4, r4, r3
 8008122:	f000 f8df 	bl	80082e4 <__malloc_lock>
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <_free_r+0x94>)
 8008128:	9801      	ldr	r0, [sp, #4]
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	b933      	cbnz	r3, 800813c <_free_r+0x30>
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	6014      	str	r4, [r2, #0]
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008138:	f000 b8da 	b.w	80082f0 <__malloc_unlock>
 800813c:	42a3      	cmp	r3, r4
 800813e:	d908      	bls.n	8008152 <_free_r+0x46>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf01      	itttt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	1949      	addeq	r1, r1, r5
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	e7ed      	b.n	800812e <_free_r+0x22>
 8008152:	461a      	mov	r2, r3
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b10b      	cbz	r3, 800815c <_free_r+0x50>
 8008158:	42a3      	cmp	r3, r4
 800815a:	d9fa      	bls.n	8008152 <_free_r+0x46>
 800815c:	6811      	ldr	r1, [r2, #0]
 800815e:	1855      	adds	r5, r2, r1
 8008160:	42a5      	cmp	r5, r4
 8008162:	d10b      	bne.n	800817c <_free_r+0x70>
 8008164:	6824      	ldr	r4, [r4, #0]
 8008166:	4421      	add	r1, r4
 8008168:	1854      	adds	r4, r2, r1
 800816a:	42a3      	cmp	r3, r4
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	d1e0      	bne.n	8008132 <_free_r+0x26>
 8008170:	681c      	ldr	r4, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	440c      	add	r4, r1
 8008178:	6014      	str	r4, [r2, #0]
 800817a:	e7da      	b.n	8008132 <_free_r+0x26>
 800817c:	d902      	bls.n	8008184 <_free_r+0x78>
 800817e:	230c      	movs	r3, #12
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	e7d6      	b.n	8008132 <_free_r+0x26>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf04      	itt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	bf04      	itt	eq
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	6054      	str	r4, [r2, #4]
 800819a:	e7ca      	b.n	8008132 <_free_r+0x26>
 800819c:	b003      	add	sp, #12
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	20000c18 	.word	0x20000c18

080081a4 <sbrk_aligned>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4e0e      	ldr	r6, [pc, #56]	; (80081e0 <sbrk_aligned+0x3c>)
 80081a8:	460c      	mov	r4, r1
 80081aa:	6831      	ldr	r1, [r6, #0]
 80081ac:	4605      	mov	r5, r0
 80081ae:	b911      	cbnz	r1, 80081b6 <sbrk_aligned+0x12>
 80081b0:	f000 ff3a 	bl	8009028 <_sbrk_r>
 80081b4:	6030      	str	r0, [r6, #0]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 ff35 	bl	8009028 <_sbrk_r>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d00a      	beq.n	80081d8 <sbrk_aligned+0x34>
 80081c2:	1cc4      	adds	r4, r0, #3
 80081c4:	f024 0403 	bic.w	r4, r4, #3
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d007      	beq.n	80081dc <sbrk_aligned+0x38>
 80081cc:	1a21      	subs	r1, r4, r0
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 ff2a 	bl	8009028 <_sbrk_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d101      	bne.n	80081dc <sbrk_aligned+0x38>
 80081d8:	f04f 34ff 	mov.w	r4, #4294967295
 80081dc:	4620      	mov	r0, r4
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	20000c1c 	.word	0x20000c1c

080081e4 <_malloc_r>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	1ccd      	adds	r5, r1, #3
 80081ea:	f025 0503 	bic.w	r5, r5, #3
 80081ee:	3508      	adds	r5, #8
 80081f0:	2d0c      	cmp	r5, #12
 80081f2:	bf38      	it	cc
 80081f4:	250c      	movcc	r5, #12
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	4607      	mov	r7, r0
 80081fa:	db01      	blt.n	8008200 <_malloc_r+0x1c>
 80081fc:	42a9      	cmp	r1, r5
 80081fe:	d905      	bls.n	800820c <_malloc_r+0x28>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	2600      	movs	r6, #0
 8008206:	4630      	mov	r0, r6
 8008208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082e0 <_malloc_r+0xfc>
 8008210:	f000 f868 	bl	80082e4 <__malloc_lock>
 8008214:	f8d8 3000 	ldr.w	r3, [r8]
 8008218:	461c      	mov	r4, r3
 800821a:	bb5c      	cbnz	r4, 8008274 <_malloc_r+0x90>
 800821c:	4629      	mov	r1, r5
 800821e:	4638      	mov	r0, r7
 8008220:	f7ff ffc0 	bl	80081a4 <sbrk_aligned>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	4604      	mov	r4, r0
 8008228:	d155      	bne.n	80082d6 <_malloc_r+0xf2>
 800822a:	f8d8 4000 	ldr.w	r4, [r8]
 800822e:	4626      	mov	r6, r4
 8008230:	2e00      	cmp	r6, #0
 8008232:	d145      	bne.n	80082c0 <_malloc_r+0xdc>
 8008234:	2c00      	cmp	r4, #0
 8008236:	d048      	beq.n	80082ca <_malloc_r+0xe6>
 8008238:	6823      	ldr	r3, [r4, #0]
 800823a:	4631      	mov	r1, r6
 800823c:	4638      	mov	r0, r7
 800823e:	eb04 0903 	add.w	r9, r4, r3
 8008242:	f000 fef1 	bl	8009028 <_sbrk_r>
 8008246:	4581      	cmp	r9, r0
 8008248:	d13f      	bne.n	80082ca <_malloc_r+0xe6>
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	1a6d      	subs	r5, r5, r1
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ffa7 	bl	80081a4 <sbrk_aligned>
 8008256:	3001      	adds	r0, #1
 8008258:	d037      	beq.n	80082ca <_malloc_r+0xe6>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	442b      	add	r3, r5
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	f8d8 3000 	ldr.w	r3, [r8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d038      	beq.n	80082da <_malloc_r+0xf6>
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	42a2      	cmp	r2, r4
 800826c:	d12b      	bne.n	80082c6 <_malloc_r+0xe2>
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
 8008272:	e00f      	b.n	8008294 <_malloc_r+0xb0>
 8008274:	6822      	ldr	r2, [r4, #0]
 8008276:	1b52      	subs	r2, r2, r5
 8008278:	d41f      	bmi.n	80082ba <_malloc_r+0xd6>
 800827a:	2a0b      	cmp	r2, #11
 800827c:	d917      	bls.n	80082ae <_malloc_r+0xca>
 800827e:	1961      	adds	r1, r4, r5
 8008280:	42a3      	cmp	r3, r4
 8008282:	6025      	str	r5, [r4, #0]
 8008284:	bf18      	it	ne
 8008286:	6059      	strne	r1, [r3, #4]
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	bf08      	it	eq
 800828c:	f8c8 1000 	streq.w	r1, [r8]
 8008290:	5162      	str	r2, [r4, r5]
 8008292:	604b      	str	r3, [r1, #4]
 8008294:	4638      	mov	r0, r7
 8008296:	f104 060b 	add.w	r6, r4, #11
 800829a:	f000 f829 	bl	80082f0 <__malloc_unlock>
 800829e:	f026 0607 	bic.w	r6, r6, #7
 80082a2:	1d23      	adds	r3, r4, #4
 80082a4:	1af2      	subs	r2, r6, r3
 80082a6:	d0ae      	beq.n	8008206 <_malloc_r+0x22>
 80082a8:	1b9b      	subs	r3, r3, r6
 80082aa:	50a3      	str	r3, [r4, r2]
 80082ac:	e7ab      	b.n	8008206 <_malloc_r+0x22>
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	6862      	ldr	r2, [r4, #4]
 80082b2:	d1dd      	bne.n	8008270 <_malloc_r+0x8c>
 80082b4:	f8c8 2000 	str.w	r2, [r8]
 80082b8:	e7ec      	b.n	8008294 <_malloc_r+0xb0>
 80082ba:	4623      	mov	r3, r4
 80082bc:	6864      	ldr	r4, [r4, #4]
 80082be:	e7ac      	b.n	800821a <_malloc_r+0x36>
 80082c0:	4634      	mov	r4, r6
 80082c2:	6876      	ldr	r6, [r6, #4]
 80082c4:	e7b4      	b.n	8008230 <_malloc_r+0x4c>
 80082c6:	4613      	mov	r3, r2
 80082c8:	e7cc      	b.n	8008264 <_malloc_r+0x80>
 80082ca:	230c      	movs	r3, #12
 80082cc:	603b      	str	r3, [r7, #0]
 80082ce:	4638      	mov	r0, r7
 80082d0:	f000 f80e 	bl	80082f0 <__malloc_unlock>
 80082d4:	e797      	b.n	8008206 <_malloc_r+0x22>
 80082d6:	6025      	str	r5, [r4, #0]
 80082d8:	e7dc      	b.n	8008294 <_malloc_r+0xb0>
 80082da:	605b      	str	r3, [r3, #4]
 80082dc:	deff      	udf	#255	; 0xff
 80082de:	bf00      	nop
 80082e0:	20000c18 	.word	0x20000c18

080082e4 <__malloc_lock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__malloc_lock+0x8>)
 80082e6:	f7ff bf0f 	b.w	8008108 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	20000c14 	.word	0x20000c14

080082f0 <__malloc_unlock>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__malloc_unlock+0x8>)
 80082f2:	f7ff bf0a 	b.w	800810a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	20000c14 	.word	0x20000c14

080082fc <__ssputs_r>:
 80082fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008300:	688e      	ldr	r6, [r1, #8]
 8008302:	461f      	mov	r7, r3
 8008304:	42be      	cmp	r6, r7
 8008306:	680b      	ldr	r3, [r1, #0]
 8008308:	4682      	mov	sl, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4690      	mov	r8, r2
 800830e:	d82c      	bhi.n	800836a <__ssputs_r+0x6e>
 8008310:	898a      	ldrh	r2, [r1, #12]
 8008312:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008316:	d026      	beq.n	8008366 <__ssputs_r+0x6a>
 8008318:	6965      	ldr	r5, [r4, #20]
 800831a:	6909      	ldr	r1, [r1, #16]
 800831c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008320:	eba3 0901 	sub.w	r9, r3, r1
 8008324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008328:	1c7b      	adds	r3, r7, #1
 800832a:	444b      	add	r3, r9
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	429d      	cmp	r5, r3
 8008330:	bf38      	it	cc
 8008332:	461d      	movcc	r5, r3
 8008334:	0553      	lsls	r3, r2, #21
 8008336:	d527      	bpl.n	8008388 <__ssputs_r+0x8c>
 8008338:	4629      	mov	r1, r5
 800833a:	f7ff ff53 	bl	80081e4 <_malloc_r>
 800833e:	4606      	mov	r6, r0
 8008340:	b360      	cbz	r0, 800839c <__ssputs_r+0xa0>
 8008342:	6921      	ldr	r1, [r4, #16]
 8008344:	464a      	mov	r2, r9
 8008346:	f000 fe7f 	bl	8009048 <memcpy>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	6126      	str	r6, [r4, #16]
 8008358:	6165      	str	r5, [r4, #20]
 800835a:	444e      	add	r6, r9
 800835c:	eba5 0509 	sub.w	r5, r5, r9
 8008360:	6026      	str	r6, [r4, #0]
 8008362:	60a5      	str	r5, [r4, #8]
 8008364:	463e      	mov	r6, r7
 8008366:	42be      	cmp	r6, r7
 8008368:	d900      	bls.n	800836c <__ssputs_r+0x70>
 800836a:	463e      	mov	r6, r7
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	4632      	mov	r2, r6
 8008370:	4641      	mov	r1, r8
 8008372:	f000 fe3e 	bl	8008ff2 <memmove>
 8008376:	68a3      	ldr	r3, [r4, #8]
 8008378:	1b9b      	subs	r3, r3, r6
 800837a:	60a3      	str	r3, [r4, #8]
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	4433      	add	r3, r6
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	462a      	mov	r2, r5
 800838a:	f000 fe6b 	bl	8009064 <_realloc_r>
 800838e:	4606      	mov	r6, r0
 8008390:	2800      	cmp	r0, #0
 8008392:	d1e0      	bne.n	8008356 <__ssputs_r+0x5a>
 8008394:	6921      	ldr	r1, [r4, #16]
 8008396:	4650      	mov	r0, sl
 8008398:	f7ff feb8 	bl	800810c <_free_r>
 800839c:	230c      	movs	r3, #12
 800839e:	f8ca 3000 	str.w	r3, [sl]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	e7e9      	b.n	8008384 <__ssputs_r+0x88>

080083b0 <_svfiprintf_r>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	4698      	mov	r8, r3
 80083b6:	898b      	ldrh	r3, [r1, #12]
 80083b8:	061b      	lsls	r3, r3, #24
 80083ba:	b09d      	sub	sp, #116	; 0x74
 80083bc:	4607      	mov	r7, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	4614      	mov	r4, r2
 80083c2:	d50e      	bpl.n	80083e2 <_svfiprintf_r+0x32>
 80083c4:	690b      	ldr	r3, [r1, #16]
 80083c6:	b963      	cbnz	r3, 80083e2 <_svfiprintf_r+0x32>
 80083c8:	2140      	movs	r1, #64	; 0x40
 80083ca:	f7ff ff0b 	bl	80081e4 <_malloc_r>
 80083ce:	6028      	str	r0, [r5, #0]
 80083d0:	6128      	str	r0, [r5, #16]
 80083d2:	b920      	cbnz	r0, 80083de <_svfiprintf_r+0x2e>
 80083d4:	230c      	movs	r3, #12
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	f04f 30ff 	mov.w	r0, #4294967295
 80083dc:	e0d0      	b.n	8008580 <_svfiprintf_r+0x1d0>
 80083de:	2340      	movs	r3, #64	; 0x40
 80083e0:	616b      	str	r3, [r5, #20]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9309      	str	r3, [sp, #36]	; 0x24
 80083e6:	2320      	movs	r3, #32
 80083e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f0:	2330      	movs	r3, #48	; 0x30
 80083f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008598 <_svfiprintf_r+0x1e8>
 80083f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083fa:	f04f 0901 	mov.w	r9, #1
 80083fe:	4623      	mov	r3, r4
 8008400:	469a      	mov	sl, r3
 8008402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008406:	b10a      	cbz	r2, 800840c <_svfiprintf_r+0x5c>
 8008408:	2a25      	cmp	r2, #37	; 0x25
 800840a:	d1f9      	bne.n	8008400 <_svfiprintf_r+0x50>
 800840c:	ebba 0b04 	subs.w	fp, sl, r4
 8008410:	d00b      	beq.n	800842a <_svfiprintf_r+0x7a>
 8008412:	465b      	mov	r3, fp
 8008414:	4622      	mov	r2, r4
 8008416:	4629      	mov	r1, r5
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff ff6f 	bl	80082fc <__ssputs_r>
 800841e:	3001      	adds	r0, #1
 8008420:	f000 80a9 	beq.w	8008576 <_svfiprintf_r+0x1c6>
 8008424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008426:	445a      	add	r2, fp
 8008428:	9209      	str	r2, [sp, #36]	; 0x24
 800842a:	f89a 3000 	ldrb.w	r3, [sl]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80a1 	beq.w	8008576 <_svfiprintf_r+0x1c6>
 8008434:	2300      	movs	r3, #0
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800843e:	f10a 0a01 	add.w	sl, sl, #1
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	9307      	str	r3, [sp, #28]
 8008446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800844a:	931a      	str	r3, [sp, #104]	; 0x68
 800844c:	4654      	mov	r4, sl
 800844e:	2205      	movs	r2, #5
 8008450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008454:	4850      	ldr	r0, [pc, #320]	; (8008598 <_svfiprintf_r+0x1e8>)
 8008456:	f7f7 fee3 	bl	8000220 <memchr>
 800845a:	9a04      	ldr	r2, [sp, #16]
 800845c:	b9d8      	cbnz	r0, 8008496 <_svfiprintf_r+0xe6>
 800845e:	06d0      	lsls	r0, r2, #27
 8008460:	bf44      	itt	mi
 8008462:	2320      	movmi	r3, #32
 8008464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008468:	0711      	lsls	r1, r2, #28
 800846a:	bf44      	itt	mi
 800846c:	232b      	movmi	r3, #43	; 0x2b
 800846e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008472:	f89a 3000 	ldrb.w	r3, [sl]
 8008476:	2b2a      	cmp	r3, #42	; 0x2a
 8008478:	d015      	beq.n	80084a6 <_svfiprintf_r+0xf6>
 800847a:	9a07      	ldr	r2, [sp, #28]
 800847c:	4654      	mov	r4, sl
 800847e:	2000      	movs	r0, #0
 8008480:	f04f 0c0a 	mov.w	ip, #10
 8008484:	4621      	mov	r1, r4
 8008486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800848a:	3b30      	subs	r3, #48	; 0x30
 800848c:	2b09      	cmp	r3, #9
 800848e:	d94d      	bls.n	800852c <_svfiprintf_r+0x17c>
 8008490:	b1b0      	cbz	r0, 80084c0 <_svfiprintf_r+0x110>
 8008492:	9207      	str	r2, [sp, #28]
 8008494:	e014      	b.n	80084c0 <_svfiprintf_r+0x110>
 8008496:	eba0 0308 	sub.w	r3, r0, r8
 800849a:	fa09 f303 	lsl.w	r3, r9, r3
 800849e:	4313      	orrs	r3, r2
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	46a2      	mov	sl, r4
 80084a4:	e7d2      	b.n	800844c <_svfiprintf_r+0x9c>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d19      	adds	r1, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9103      	str	r1, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfbb      	ittet	lt
 80084b2:	425b      	neglt	r3, r3
 80084b4:	f042 0202 	orrlt.w	r2, r2, #2
 80084b8:	9307      	strge	r3, [sp, #28]
 80084ba:	9307      	strlt	r3, [sp, #28]
 80084bc:	bfb8      	it	lt
 80084be:	9204      	strlt	r2, [sp, #16]
 80084c0:	7823      	ldrb	r3, [r4, #0]
 80084c2:	2b2e      	cmp	r3, #46	; 0x2e
 80084c4:	d10c      	bne.n	80084e0 <_svfiprintf_r+0x130>
 80084c6:	7863      	ldrb	r3, [r4, #1]
 80084c8:	2b2a      	cmp	r3, #42	; 0x2a
 80084ca:	d134      	bne.n	8008536 <_svfiprintf_r+0x186>
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	9203      	str	r2, [sp, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfb8      	it	lt
 80084d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80084dc:	3402      	adds	r4, #2
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80085a8 <_svfiprintf_r+0x1f8>
 80084e4:	7821      	ldrb	r1, [r4, #0]
 80084e6:	2203      	movs	r2, #3
 80084e8:	4650      	mov	r0, sl
 80084ea:	f7f7 fe99 	bl	8000220 <memchr>
 80084ee:	b138      	cbz	r0, 8008500 <_svfiprintf_r+0x150>
 80084f0:	9b04      	ldr	r3, [sp, #16]
 80084f2:	eba0 000a 	sub.w	r0, r0, sl
 80084f6:	2240      	movs	r2, #64	; 0x40
 80084f8:	4082      	lsls	r2, r0
 80084fa:	4313      	orrs	r3, r2
 80084fc:	3401      	adds	r4, #1
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008504:	4825      	ldr	r0, [pc, #148]	; (800859c <_svfiprintf_r+0x1ec>)
 8008506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800850a:	2206      	movs	r2, #6
 800850c:	f7f7 fe88 	bl	8000220 <memchr>
 8008510:	2800      	cmp	r0, #0
 8008512:	d038      	beq.n	8008586 <_svfiprintf_r+0x1d6>
 8008514:	4b22      	ldr	r3, [pc, #136]	; (80085a0 <_svfiprintf_r+0x1f0>)
 8008516:	bb1b      	cbnz	r3, 8008560 <_svfiprintf_r+0x1b0>
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	3307      	adds	r3, #7
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	3308      	adds	r3, #8
 8008522:	9303      	str	r3, [sp, #12]
 8008524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008526:	4433      	add	r3, r6
 8008528:	9309      	str	r3, [sp, #36]	; 0x24
 800852a:	e768      	b.n	80083fe <_svfiprintf_r+0x4e>
 800852c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008530:	460c      	mov	r4, r1
 8008532:	2001      	movs	r0, #1
 8008534:	e7a6      	b.n	8008484 <_svfiprintf_r+0xd4>
 8008536:	2300      	movs	r3, #0
 8008538:	3401      	adds	r4, #1
 800853a:	9305      	str	r3, [sp, #20]
 800853c:	4619      	mov	r1, r3
 800853e:	f04f 0c0a 	mov.w	ip, #10
 8008542:	4620      	mov	r0, r4
 8008544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008548:	3a30      	subs	r2, #48	; 0x30
 800854a:	2a09      	cmp	r2, #9
 800854c:	d903      	bls.n	8008556 <_svfiprintf_r+0x1a6>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0c6      	beq.n	80084e0 <_svfiprintf_r+0x130>
 8008552:	9105      	str	r1, [sp, #20]
 8008554:	e7c4      	b.n	80084e0 <_svfiprintf_r+0x130>
 8008556:	fb0c 2101 	mla	r1, ip, r1, r2
 800855a:	4604      	mov	r4, r0
 800855c:	2301      	movs	r3, #1
 800855e:	e7f0      	b.n	8008542 <_svfiprintf_r+0x192>
 8008560:	ab03      	add	r3, sp, #12
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	462a      	mov	r2, r5
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <_svfiprintf_r+0x1f4>)
 8008568:	a904      	add	r1, sp, #16
 800856a:	4638      	mov	r0, r7
 800856c:	f3af 8000 	nop.w
 8008570:	1c42      	adds	r2, r0, #1
 8008572:	4606      	mov	r6, r0
 8008574:	d1d6      	bne.n	8008524 <_svfiprintf_r+0x174>
 8008576:	89ab      	ldrh	r3, [r5, #12]
 8008578:	065b      	lsls	r3, r3, #25
 800857a:	f53f af2d 	bmi.w	80083d8 <_svfiprintf_r+0x28>
 800857e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008580:	b01d      	add	sp, #116	; 0x74
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	ab03      	add	r3, sp, #12
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	462a      	mov	r2, r5
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <_svfiprintf_r+0x1f4>)
 800858e:	a904      	add	r1, sp, #16
 8008590:	4638      	mov	r0, r7
 8008592:	f000 fa4b 	bl	8008a2c <_printf_i>
 8008596:	e7eb      	b.n	8008570 <_svfiprintf_r+0x1c0>
 8008598:	08009360 	.word	0x08009360
 800859c:	0800936a 	.word	0x0800936a
 80085a0:	00000000 	.word	0x00000000
 80085a4:	080082fd 	.word	0x080082fd
 80085a8:	08009366 	.word	0x08009366

080085ac <_sungetc_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	1c4b      	adds	r3, r1, #1
 80085b0:	4614      	mov	r4, r2
 80085b2:	d103      	bne.n	80085bc <_sungetc_r+0x10>
 80085b4:	f04f 35ff 	mov.w	r5, #4294967295
 80085b8:	4628      	mov	r0, r5
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	8993      	ldrh	r3, [r2, #12]
 80085be:	f023 0320 	bic.w	r3, r3, #32
 80085c2:	8193      	strh	r3, [r2, #12]
 80085c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085c6:	6852      	ldr	r2, [r2, #4]
 80085c8:	b2cd      	uxtb	r5, r1
 80085ca:	b18b      	cbz	r3, 80085f0 <_sungetc_r+0x44>
 80085cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085ce:	4293      	cmp	r3, r2
 80085d0:	dd08      	ble.n	80085e4 <_sungetc_r+0x38>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	1e5a      	subs	r2, r3, #1
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80085dc:	6863      	ldr	r3, [r4, #4]
 80085de:	3301      	adds	r3, #1
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	e7e9      	b.n	80085b8 <_sungetc_r+0xc>
 80085e4:	4621      	mov	r1, r4
 80085e6:	f000 fcca 	bl	8008f7e <__submore>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d0f1      	beq.n	80085d2 <_sungetc_r+0x26>
 80085ee:	e7e1      	b.n	80085b4 <_sungetc_r+0x8>
 80085f0:	6921      	ldr	r1, [r4, #16]
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	b151      	cbz	r1, 800860c <_sungetc_r+0x60>
 80085f6:	4299      	cmp	r1, r3
 80085f8:	d208      	bcs.n	800860c <_sungetc_r+0x60>
 80085fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80085fe:	42a9      	cmp	r1, r5
 8008600:	d104      	bne.n	800860c <_sungetc_r+0x60>
 8008602:	3b01      	subs	r3, #1
 8008604:	3201      	adds	r2, #1
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	6062      	str	r2, [r4, #4]
 800860a:	e7d5      	b.n	80085b8 <_sungetc_r+0xc>
 800860c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008614:	6363      	str	r3, [r4, #52]	; 0x34
 8008616:	2303      	movs	r3, #3
 8008618:	63a3      	str	r3, [r4, #56]	; 0x38
 800861a:	4623      	mov	r3, r4
 800861c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2301      	movs	r3, #1
 8008624:	e7dc      	b.n	80085e0 <_sungetc_r+0x34>

08008626 <__ssrefill_r>:
 8008626:	b510      	push	{r4, lr}
 8008628:	460c      	mov	r4, r1
 800862a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800862c:	b169      	cbz	r1, 800864a <__ssrefill_r+0x24>
 800862e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008632:	4299      	cmp	r1, r3
 8008634:	d001      	beq.n	800863a <__ssrefill_r+0x14>
 8008636:	f7ff fd69 	bl	800810c <_free_r>
 800863a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	2000      	movs	r0, #0
 8008640:	6360      	str	r0, [r4, #52]	; 0x34
 8008642:	b113      	cbz	r3, 800864a <__ssrefill_r+0x24>
 8008644:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	bd10      	pop	{r4, pc}
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	6063      	str	r3, [r4, #4]
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f043 0320 	orr.w	r3, r3, #32
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295
 800865e:	e7f3      	b.n	8008648 <__ssrefill_r+0x22>

08008660 <__ssvfiscanf_r>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	460c      	mov	r4, r1
 8008666:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800866a:	2100      	movs	r1, #0
 800866c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008670:	49a6      	ldr	r1, [pc, #664]	; (800890c <__ssvfiscanf_r+0x2ac>)
 8008672:	91a0      	str	r1, [sp, #640]	; 0x280
 8008674:	f10d 0804 	add.w	r8, sp, #4
 8008678:	49a5      	ldr	r1, [pc, #660]	; (8008910 <__ssvfiscanf_r+0x2b0>)
 800867a:	4fa6      	ldr	r7, [pc, #664]	; (8008914 <__ssvfiscanf_r+0x2b4>)
 800867c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008918 <__ssvfiscanf_r+0x2b8>
 8008680:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008684:	4606      	mov	r6, r0
 8008686:	91a1      	str	r1, [sp, #644]	; 0x284
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	7813      	ldrb	r3, [r2, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 815a 	beq.w	8008946 <__ssvfiscanf_r+0x2e6>
 8008692:	5cf9      	ldrb	r1, [r7, r3]
 8008694:	f011 0108 	ands.w	r1, r1, #8
 8008698:	f102 0501 	add.w	r5, r2, #1
 800869c:	d019      	beq.n	80086d2 <__ssvfiscanf_r+0x72>
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd0f      	ble.n	80086c4 <__ssvfiscanf_r+0x64>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	5cba      	ldrb	r2, [r7, r2]
 80086aa:	0712      	lsls	r2, r2, #28
 80086ac:	d401      	bmi.n	80086b2 <__ssvfiscanf_r+0x52>
 80086ae:	462a      	mov	r2, r5
 80086b0:	e7eb      	b.n	800868a <__ssvfiscanf_r+0x2a>
 80086b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80086b4:	3201      	adds	r2, #1
 80086b6:	9245      	str	r2, [sp, #276]	; 0x114
 80086b8:	6862      	ldr	r2, [r4, #4]
 80086ba:	3301      	adds	r3, #1
 80086bc:	3a01      	subs	r2, #1
 80086be:	6062      	str	r2, [r4, #4]
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	e7ec      	b.n	800869e <__ssvfiscanf_r+0x3e>
 80086c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80086c6:	4621      	mov	r1, r4
 80086c8:	4630      	mov	r0, r6
 80086ca:	4798      	blx	r3
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d0e9      	beq.n	80086a4 <__ssvfiscanf_r+0x44>
 80086d0:	e7ed      	b.n	80086ae <__ssvfiscanf_r+0x4e>
 80086d2:	2b25      	cmp	r3, #37	; 0x25
 80086d4:	d012      	beq.n	80086fc <__ssvfiscanf_r+0x9c>
 80086d6:	469a      	mov	sl, r3
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f340 8091 	ble.w	8008802 <__ssvfiscanf_r+0x1a2>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	7813      	ldrb	r3, [r2, #0]
 80086e4:	4553      	cmp	r3, sl
 80086e6:	f040 812e 	bne.w	8008946 <__ssvfiscanf_r+0x2e6>
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	6063      	str	r3, [r4, #4]
 80086f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80086f2:	3201      	adds	r2, #1
 80086f4:	3301      	adds	r3, #1
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	9345      	str	r3, [sp, #276]	; 0x114
 80086fa:	e7d8      	b.n	80086ae <__ssvfiscanf_r+0x4e>
 80086fc:	9141      	str	r1, [sp, #260]	; 0x104
 80086fe:	9143      	str	r1, [sp, #268]	; 0x10c
 8008700:	7853      	ldrb	r3, [r2, #1]
 8008702:	2b2a      	cmp	r3, #42	; 0x2a
 8008704:	bf02      	ittt	eq
 8008706:	2310      	moveq	r3, #16
 8008708:	1c95      	addeq	r5, r2, #2
 800870a:	9341      	streq	r3, [sp, #260]	; 0x104
 800870c:	220a      	movs	r2, #10
 800870e:	46aa      	mov	sl, r5
 8008710:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008714:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008718:	2b09      	cmp	r3, #9
 800871a:	d91c      	bls.n	8008756 <__ssvfiscanf_r+0xf6>
 800871c:	487e      	ldr	r0, [pc, #504]	; (8008918 <__ssvfiscanf_r+0x2b8>)
 800871e:	2203      	movs	r2, #3
 8008720:	f7f7 fd7e 	bl	8000220 <memchr>
 8008724:	b138      	cbz	r0, 8008736 <__ssvfiscanf_r+0xd6>
 8008726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008728:	eba0 0009 	sub.w	r0, r0, r9
 800872c:	2301      	movs	r3, #1
 800872e:	4083      	lsls	r3, r0
 8008730:	4313      	orrs	r3, r2
 8008732:	9341      	str	r3, [sp, #260]	; 0x104
 8008734:	4655      	mov	r5, sl
 8008736:	f815 3b01 	ldrb.w	r3, [r5], #1
 800873a:	2b78      	cmp	r3, #120	; 0x78
 800873c:	d806      	bhi.n	800874c <__ssvfiscanf_r+0xec>
 800873e:	2b57      	cmp	r3, #87	; 0x57
 8008740:	d810      	bhi.n	8008764 <__ssvfiscanf_r+0x104>
 8008742:	2b25      	cmp	r3, #37	; 0x25
 8008744:	d0c7      	beq.n	80086d6 <__ssvfiscanf_r+0x76>
 8008746:	d857      	bhi.n	80087f8 <__ssvfiscanf_r+0x198>
 8008748:	2b00      	cmp	r3, #0
 800874a:	d065      	beq.n	8008818 <__ssvfiscanf_r+0x1b8>
 800874c:	2303      	movs	r3, #3
 800874e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008750:	230a      	movs	r3, #10
 8008752:	9342      	str	r3, [sp, #264]	; 0x108
 8008754:	e076      	b.n	8008844 <__ssvfiscanf_r+0x1e4>
 8008756:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008758:	fb02 1103 	mla	r1, r2, r3, r1
 800875c:	3930      	subs	r1, #48	; 0x30
 800875e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008760:	4655      	mov	r5, sl
 8008762:	e7d4      	b.n	800870e <__ssvfiscanf_r+0xae>
 8008764:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008768:	2a20      	cmp	r2, #32
 800876a:	d8ef      	bhi.n	800874c <__ssvfiscanf_r+0xec>
 800876c:	a101      	add	r1, pc, #4	; (adr r1, 8008774 <__ssvfiscanf_r+0x114>)
 800876e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008827 	.word	0x08008827
 8008778:	0800874d 	.word	0x0800874d
 800877c:	0800874d 	.word	0x0800874d
 8008780:	08008885 	.word	0x08008885
 8008784:	0800874d 	.word	0x0800874d
 8008788:	0800874d 	.word	0x0800874d
 800878c:	0800874d 	.word	0x0800874d
 8008790:	0800874d 	.word	0x0800874d
 8008794:	0800874d 	.word	0x0800874d
 8008798:	0800874d 	.word	0x0800874d
 800879c:	0800874d 	.word	0x0800874d
 80087a0:	0800889b 	.word	0x0800889b
 80087a4:	08008881 	.word	0x08008881
 80087a8:	080087ff 	.word	0x080087ff
 80087ac:	080087ff 	.word	0x080087ff
 80087b0:	080087ff 	.word	0x080087ff
 80087b4:	0800874d 	.word	0x0800874d
 80087b8:	0800883d 	.word	0x0800883d
 80087bc:	0800874d 	.word	0x0800874d
 80087c0:	0800874d 	.word	0x0800874d
 80087c4:	0800874d 	.word	0x0800874d
 80087c8:	0800874d 	.word	0x0800874d
 80087cc:	080088ab 	.word	0x080088ab
 80087d0:	08008879 	.word	0x08008879
 80087d4:	0800881f 	.word	0x0800881f
 80087d8:	0800874d 	.word	0x0800874d
 80087dc:	0800874d 	.word	0x0800874d
 80087e0:	080088a7 	.word	0x080088a7
 80087e4:	0800874d 	.word	0x0800874d
 80087e8:	08008881 	.word	0x08008881
 80087ec:	0800874d 	.word	0x0800874d
 80087f0:	0800874d 	.word	0x0800874d
 80087f4:	08008827 	.word	0x08008827
 80087f8:	3b45      	subs	r3, #69	; 0x45
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d8a6      	bhi.n	800874c <__ssvfiscanf_r+0xec>
 80087fe:	2305      	movs	r3, #5
 8008800:	e01f      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 8008802:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008804:	4621      	mov	r1, r4
 8008806:	4630      	mov	r0, r6
 8008808:	4798      	blx	r3
 800880a:	2800      	cmp	r0, #0
 800880c:	f43f af68 	beq.w	80086e0 <__ssvfiscanf_r+0x80>
 8008810:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008812:	2800      	cmp	r0, #0
 8008814:	f040 808d 	bne.w	8008932 <__ssvfiscanf_r+0x2d2>
 8008818:	f04f 30ff 	mov.w	r0, #4294967295
 800881c:	e08f      	b.n	800893e <__ssvfiscanf_r+0x2de>
 800881e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008820:	f042 0220 	orr.w	r2, r2, #32
 8008824:	9241      	str	r2, [sp, #260]	; 0x104
 8008826:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800882c:	9241      	str	r2, [sp, #260]	; 0x104
 800882e:	2210      	movs	r2, #16
 8008830:	2b6f      	cmp	r3, #111	; 0x6f
 8008832:	9242      	str	r2, [sp, #264]	; 0x108
 8008834:	bf34      	ite	cc
 8008836:	2303      	movcc	r3, #3
 8008838:	2304      	movcs	r3, #4
 800883a:	e002      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 800883c:	2300      	movs	r3, #0
 800883e:	9342      	str	r3, [sp, #264]	; 0x108
 8008840:	2303      	movs	r3, #3
 8008842:	9347      	str	r3, [sp, #284]	; 0x11c
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	dd3d      	ble.n	80088c6 <__ssvfiscanf_r+0x266>
 800884a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800884c:	0659      	lsls	r1, r3, #25
 800884e:	d404      	bmi.n	800885a <__ssvfiscanf_r+0x1fa>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	781a      	ldrb	r2, [r3, #0]
 8008854:	5cba      	ldrb	r2, [r7, r2]
 8008856:	0712      	lsls	r2, r2, #28
 8008858:	d43c      	bmi.n	80088d4 <__ssvfiscanf_r+0x274>
 800885a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800885c:	2b02      	cmp	r3, #2
 800885e:	dc4b      	bgt.n	80088f8 <__ssvfiscanf_r+0x298>
 8008860:	466b      	mov	r3, sp
 8008862:	4622      	mov	r2, r4
 8008864:	a941      	add	r1, sp, #260	; 0x104
 8008866:	4630      	mov	r0, r6
 8008868:	f000 fa02 	bl	8008c70 <_scanf_chars>
 800886c:	2801      	cmp	r0, #1
 800886e:	d06a      	beq.n	8008946 <__ssvfiscanf_r+0x2e6>
 8008870:	2802      	cmp	r0, #2
 8008872:	f47f af1c 	bne.w	80086ae <__ssvfiscanf_r+0x4e>
 8008876:	e7cb      	b.n	8008810 <__ssvfiscanf_r+0x1b0>
 8008878:	2308      	movs	r3, #8
 800887a:	9342      	str	r3, [sp, #264]	; 0x108
 800887c:	2304      	movs	r3, #4
 800887e:	e7e0      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 8008880:	220a      	movs	r2, #10
 8008882:	e7d5      	b.n	8008830 <__ssvfiscanf_r+0x1d0>
 8008884:	4629      	mov	r1, r5
 8008886:	4640      	mov	r0, r8
 8008888:	f000 fb40 	bl	8008f0c <__sccl>
 800888c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800888e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008892:	9341      	str	r3, [sp, #260]	; 0x104
 8008894:	4605      	mov	r5, r0
 8008896:	2301      	movs	r3, #1
 8008898:	e7d3      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 800889a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800889c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a0:	9341      	str	r3, [sp, #260]	; 0x104
 80088a2:	2300      	movs	r3, #0
 80088a4:	e7cd      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e7cb      	b.n	8008842 <__ssvfiscanf_r+0x1e2>
 80088aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80088ac:	06c3      	lsls	r3, r0, #27
 80088ae:	f53f aefe 	bmi.w	80086ae <__ssvfiscanf_r+0x4e>
 80088b2:	9b00      	ldr	r3, [sp, #0]
 80088b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088b6:	1d19      	adds	r1, r3, #4
 80088b8:	9100      	str	r1, [sp, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	07c0      	lsls	r0, r0, #31
 80088be:	bf4c      	ite	mi
 80088c0:	801a      	strhmi	r2, [r3, #0]
 80088c2:	601a      	strpl	r2, [r3, #0]
 80088c4:	e6f3      	b.n	80086ae <__ssvfiscanf_r+0x4e>
 80088c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088c8:	4621      	mov	r1, r4
 80088ca:	4630      	mov	r0, r6
 80088cc:	4798      	blx	r3
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d0bb      	beq.n	800884a <__ssvfiscanf_r+0x1ea>
 80088d2:	e79d      	b.n	8008810 <__ssvfiscanf_r+0x1b0>
 80088d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80088d6:	3201      	adds	r2, #1
 80088d8:	9245      	str	r2, [sp, #276]	; 0x114
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	3a01      	subs	r2, #1
 80088de:	2a00      	cmp	r2, #0
 80088e0:	6062      	str	r2, [r4, #4]
 80088e2:	dd02      	ble.n	80088ea <__ssvfiscanf_r+0x28a>
 80088e4:	3301      	adds	r3, #1
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	e7b2      	b.n	8008850 <__ssvfiscanf_r+0x1f0>
 80088ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088ec:	4621      	mov	r1, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	4798      	blx	r3
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0ac      	beq.n	8008850 <__ssvfiscanf_r+0x1f0>
 80088f6:	e78b      	b.n	8008810 <__ssvfiscanf_r+0x1b0>
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	dc0f      	bgt.n	800891c <__ssvfiscanf_r+0x2bc>
 80088fc:	466b      	mov	r3, sp
 80088fe:	4622      	mov	r2, r4
 8008900:	a941      	add	r1, sp, #260	; 0x104
 8008902:	4630      	mov	r0, r6
 8008904:	f000 fa0e 	bl	8008d24 <_scanf_i>
 8008908:	e7b0      	b.n	800886c <__ssvfiscanf_r+0x20c>
 800890a:	bf00      	nop
 800890c:	080085ad 	.word	0x080085ad
 8008910:	08008627 	.word	0x08008627
 8008914:	080093af 	.word	0x080093af
 8008918:	08009366 	.word	0x08009366
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <__ssvfiscanf_r+0x2ec>)
 800891e:	2b00      	cmp	r3, #0
 8008920:	f43f aec5 	beq.w	80086ae <__ssvfiscanf_r+0x4e>
 8008924:	466b      	mov	r3, sp
 8008926:	4622      	mov	r2, r4
 8008928:	a941      	add	r1, sp, #260	; 0x104
 800892a:	4630      	mov	r0, r6
 800892c:	f3af 8000 	nop.w
 8008930:	e79c      	b.n	800886c <__ssvfiscanf_r+0x20c>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008938:	bf18      	it	ne
 800893a:	f04f 30ff 	movne.w	r0, #4294967295
 800893e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008948:	e7f9      	b.n	800893e <__ssvfiscanf_r+0x2de>
 800894a:	bf00      	nop
 800894c:	00000000 	.word	0x00000000

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	4699      	mov	r9, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008960:	4293      	cmp	r3, r2
 8008962:	bfb8      	it	lt
 8008964:	4613      	movlt	r3, r2
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b10a      	cbz	r2, 8008976 <_printf_common+0x26>
 8008972:	3301      	adds	r3, #1
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0699      	lsls	r1, r3, #26
 800897a:	bf42      	ittt	mi
 800897c:	6833      	ldrmi	r3, [r6, #0]
 800897e:	3302      	addmi	r3, #2
 8008980:	6033      	strmi	r3, [r6, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	f015 0506 	ands.w	r5, r5, #6
 8008988:	d106      	bne.n	8008998 <_printf_common+0x48>
 800898a:	f104 0a19 	add.w	sl, r4, #25
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc26      	bgt.n	80089e6 <_printf_common+0x96>
 8008998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800899c:	1e13      	subs	r3, r2, #0
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	0692      	lsls	r2, r2, #26
 80089a6:	d42b      	bmi.n	8008a00 <_printf_common+0xb0>
 80089a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ac:	4649      	mov	r1, r9
 80089ae:	4638      	mov	r0, r7
 80089b0:	47c0      	blx	r8
 80089b2:	3001      	adds	r0, #1
 80089b4:	d01e      	beq.n	80089f4 <_printf_common+0xa4>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	f003 0306 	and.w	r3, r3, #6
 80089be:	2b04      	cmp	r3, #4
 80089c0:	bf02      	ittt	eq
 80089c2:	68e5      	ldreq	r5, [r4, #12]
 80089c4:	6833      	ldreq	r3, [r6, #0]
 80089c6:	1aed      	subeq	r5, r5, r3
 80089c8:	68a3      	ldr	r3, [r4, #8]
 80089ca:	bf0c      	ite	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	2500      	movne	r5, #0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bfc4      	itt	gt
 80089d6:	1a9b      	subgt	r3, r3, r2
 80089d8:	18ed      	addgt	r5, r5, r3
 80089da:	2600      	movs	r6, #0
 80089dc:	341a      	adds	r4, #26
 80089de:	42b5      	cmp	r5, r6
 80089e0:	d11a      	bne.n	8008a18 <_printf_common+0xc8>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e008      	b.n	80089f8 <_printf_common+0xa8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	4649      	mov	r1, r9
 80089ec:	4638      	mov	r0, r7
 80089ee:	47c0      	blx	r8
 80089f0:	3001      	adds	r0, #1
 80089f2:	d103      	bne.n	80089fc <_printf_common+0xac>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	3501      	adds	r5, #1
 80089fe:	e7c6      	b.n	800898e <_printf_common+0x3e>
 8008a00:	18e1      	adds	r1, r4, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	2030      	movs	r0, #48	; 0x30
 8008a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a0a:	4422      	add	r2, r4
 8008a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7c7      	b.n	80089a8 <_printf_common+0x58>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	3001      	adds	r0, #1
 8008a24:	d0e6      	beq.n	80089f4 <_printf_common+0xa4>
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7d9      	b.n	80089de <_printf_common+0x8e>
	...

08008a2c <_printf_i>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	7e0f      	ldrb	r7, [r1, #24]
 8008a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a34:	2f78      	cmp	r7, #120	; 0x78
 8008a36:	4691      	mov	r9, r2
 8008a38:	4680      	mov	r8, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a42:	d807      	bhi.n	8008a54 <_printf_i+0x28>
 8008a44:	2f62      	cmp	r7, #98	; 0x62
 8008a46:	d80a      	bhi.n	8008a5e <_printf_i+0x32>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	f000 80d4 	beq.w	8008bf6 <_printf_i+0x1ca>
 8008a4e:	2f58      	cmp	r7, #88	; 0x58
 8008a50:	f000 80c0 	beq.w	8008bd4 <_printf_i+0x1a8>
 8008a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a5c:	e03a      	b.n	8008ad4 <_printf_i+0xa8>
 8008a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a62:	2b15      	cmp	r3, #21
 8008a64:	d8f6      	bhi.n	8008a54 <_printf_i+0x28>
 8008a66:	a101      	add	r1, pc, #4	; (adr r1, 8008a6c <_printf_i+0x40>)
 8008a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008a55 	.word	0x08008a55
 8008a78:	08008a55 	.word	0x08008a55
 8008a7c:	08008a55 	.word	0x08008a55
 8008a80:	08008a55 	.word	0x08008a55
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008a55 	.word	0x08008a55
 8008a8c:	08008a55 	.word	0x08008a55
 8008a90:	08008a55 	.word	0x08008a55
 8008a94:	08008a55 	.word	0x08008a55
 8008a98:	08008bdd 	.word	0x08008bdd
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008b97 	.word	0x08008b97
 8008aa4:	08008a55 	.word	0x08008a55
 8008aa8:	08008a55 	.word	0x08008a55
 8008aac:	08008bff 	.word	0x08008bff
 8008ab0:	08008a55 	.word	0x08008a55
 8008ab4:	08008b05 	.word	0x08008b05
 8008ab8:	08008a55 	.word	0x08008a55
 8008abc:	08008a55 	.word	0x08008a55
 8008ac0:	08008b9f 	.word	0x08008b9f
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	602a      	str	r2, [r5, #0]
 8008acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e09f      	b.n	8008c18 <_printf_i+0x1ec>
 8008ad8:	6820      	ldr	r0, [r4, #0]
 8008ada:	682b      	ldr	r3, [r5, #0]
 8008adc:	0607      	lsls	r7, r0, #24
 8008ade:	f103 0104 	add.w	r1, r3, #4
 8008ae2:	6029      	str	r1, [r5, #0]
 8008ae4:	d501      	bpl.n	8008aea <_printf_i+0xbe>
 8008ae6:	681e      	ldr	r6, [r3, #0]
 8008ae8:	e003      	b.n	8008af2 <_printf_i+0xc6>
 8008aea:	0646      	lsls	r6, r0, #25
 8008aec:	d5fb      	bpl.n	8008ae6 <_printf_i+0xba>
 8008aee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	da03      	bge.n	8008afe <_printf_i+0xd2>
 8008af6:	232d      	movs	r3, #45	; 0x2d
 8008af8:	4276      	negs	r6, r6
 8008afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afe:	485a      	ldr	r0, [pc, #360]	; (8008c68 <_printf_i+0x23c>)
 8008b00:	230a      	movs	r3, #10
 8008b02:	e012      	b.n	8008b2a <_printf_i+0xfe>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	1d19      	adds	r1, r3, #4
 8008b0a:	6029      	str	r1, [r5, #0]
 8008b0c:	0605      	lsls	r5, r0, #24
 8008b0e:	d501      	bpl.n	8008b14 <_printf_i+0xe8>
 8008b10:	681e      	ldr	r6, [r3, #0]
 8008b12:	e002      	b.n	8008b1a <_printf_i+0xee>
 8008b14:	0641      	lsls	r1, r0, #25
 8008b16:	d5fb      	bpl.n	8008b10 <_printf_i+0xe4>
 8008b18:	881e      	ldrh	r6, [r3, #0]
 8008b1a:	4853      	ldr	r0, [pc, #332]	; (8008c68 <_printf_i+0x23c>)
 8008b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b1e:	bf0c      	ite	eq
 8008b20:	2308      	moveq	r3, #8
 8008b22:	230a      	movne	r3, #10
 8008b24:	2100      	movs	r1, #0
 8008b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b2a:	6865      	ldr	r5, [r4, #4]
 8008b2c:	60a5      	str	r5, [r4, #8]
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	bfa2      	ittt	ge
 8008b32:	6821      	ldrge	r1, [r4, #0]
 8008b34:	f021 0104 	bicge.w	r1, r1, #4
 8008b38:	6021      	strge	r1, [r4, #0]
 8008b3a:	b90e      	cbnz	r6, 8008b40 <_printf_i+0x114>
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	d04b      	beq.n	8008bd8 <_printf_i+0x1ac>
 8008b40:	4615      	mov	r5, r2
 8008b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b46:	fb03 6711 	mls	r7, r3, r1, r6
 8008b4a:	5dc7      	ldrb	r7, [r0, r7]
 8008b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b50:	4637      	mov	r7, r6
 8008b52:	42bb      	cmp	r3, r7
 8008b54:	460e      	mov	r6, r1
 8008b56:	d9f4      	bls.n	8008b42 <_printf_i+0x116>
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d10b      	bne.n	8008b74 <_printf_i+0x148>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	07de      	lsls	r6, r3, #31
 8008b60:	d508      	bpl.n	8008b74 <_printf_i+0x148>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	6861      	ldr	r1, [r4, #4]
 8008b66:	4299      	cmp	r1, r3
 8008b68:	bfde      	ittt	le
 8008b6a:	2330      	movle	r3, #48	; 0x30
 8008b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b74:	1b52      	subs	r2, r2, r5
 8008b76:	6122      	str	r2, [r4, #16]
 8008b78:	f8cd a000 	str.w	sl, [sp]
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	aa03      	add	r2, sp, #12
 8008b80:	4621      	mov	r1, r4
 8008b82:	4640      	mov	r0, r8
 8008b84:	f7ff fee4 	bl	8008950 <_printf_common>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d14a      	bne.n	8008c22 <_printf_i+0x1f6>
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	b004      	add	sp, #16
 8008b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	f043 0320 	orr.w	r3, r3, #32
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	4833      	ldr	r0, [pc, #204]	; (8008c6c <_printf_i+0x240>)
 8008ba0:	2778      	movs	r7, #120	; 0x78
 8008ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	6829      	ldr	r1, [r5, #0]
 8008baa:	061f      	lsls	r7, r3, #24
 8008bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bb0:	d402      	bmi.n	8008bb8 <_printf_i+0x18c>
 8008bb2:	065f      	lsls	r7, r3, #25
 8008bb4:	bf48      	it	mi
 8008bb6:	b2b6      	uxthmi	r6, r6
 8008bb8:	07df      	lsls	r7, r3, #31
 8008bba:	bf48      	it	mi
 8008bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8008bc0:	6029      	str	r1, [r5, #0]
 8008bc2:	bf48      	it	mi
 8008bc4:	6023      	strmi	r3, [r4, #0]
 8008bc6:	b91e      	cbnz	r6, 8008bd0 <_printf_i+0x1a4>
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	f023 0320 	bic.w	r3, r3, #32
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	e7a7      	b.n	8008b24 <_printf_i+0xf8>
 8008bd4:	4824      	ldr	r0, [pc, #144]	; (8008c68 <_printf_i+0x23c>)
 8008bd6:	e7e4      	b.n	8008ba2 <_printf_i+0x176>
 8008bd8:	4615      	mov	r5, r2
 8008bda:	e7bd      	b.n	8008b58 <_printf_i+0x12c>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	6826      	ldr	r6, [r4, #0]
 8008be0:	6961      	ldr	r1, [r4, #20]
 8008be2:	1d18      	adds	r0, r3, #4
 8008be4:	6028      	str	r0, [r5, #0]
 8008be6:	0635      	lsls	r5, r6, #24
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	d501      	bpl.n	8008bf0 <_printf_i+0x1c4>
 8008bec:	6019      	str	r1, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <_printf_i+0x1ca>
 8008bf0:	0670      	lsls	r0, r6, #25
 8008bf2:	d5fb      	bpl.n	8008bec <_printf_i+0x1c0>
 8008bf4:	8019      	strh	r1, [r3, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	4615      	mov	r5, r2
 8008bfc:	e7bc      	b.n	8008b78 <_printf_i+0x14c>
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	1d1a      	adds	r2, r3, #4
 8008c02:	602a      	str	r2, [r5, #0]
 8008c04:	681d      	ldr	r5, [r3, #0]
 8008c06:	6862      	ldr	r2, [r4, #4]
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f7f7 fb08 	bl	8000220 <memchr>
 8008c10:	b108      	cbz	r0, 8008c16 <_printf_i+0x1ea>
 8008c12:	1b40      	subs	r0, r0, r5
 8008c14:	6060      	str	r0, [r4, #4]
 8008c16:	6863      	ldr	r3, [r4, #4]
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c20:	e7aa      	b.n	8008b78 <_printf_i+0x14c>
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	462a      	mov	r2, r5
 8008c26:	4649      	mov	r1, r9
 8008c28:	4640      	mov	r0, r8
 8008c2a:	47d0      	blx	sl
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d0ad      	beq.n	8008b8c <_printf_i+0x160>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	079b      	lsls	r3, r3, #30
 8008c34:	d413      	bmi.n	8008c5e <_printf_i+0x232>
 8008c36:	68e0      	ldr	r0, [r4, #12]
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	4298      	cmp	r0, r3
 8008c3c:	bfb8      	it	lt
 8008c3e:	4618      	movlt	r0, r3
 8008c40:	e7a6      	b.n	8008b90 <_printf_i+0x164>
 8008c42:	2301      	movs	r3, #1
 8008c44:	4632      	mov	r2, r6
 8008c46:	4649      	mov	r1, r9
 8008c48:	4640      	mov	r0, r8
 8008c4a:	47d0      	blx	sl
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d09d      	beq.n	8008b8c <_printf_i+0x160>
 8008c50:	3501      	adds	r5, #1
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	9903      	ldr	r1, [sp, #12]
 8008c56:	1a5b      	subs	r3, r3, r1
 8008c58:	42ab      	cmp	r3, r5
 8008c5a:	dcf2      	bgt.n	8008c42 <_printf_i+0x216>
 8008c5c:	e7eb      	b.n	8008c36 <_printf_i+0x20a>
 8008c5e:	2500      	movs	r5, #0
 8008c60:	f104 0619 	add.w	r6, r4, #25
 8008c64:	e7f5      	b.n	8008c52 <_printf_i+0x226>
 8008c66:	bf00      	nop
 8008c68:	08009371 	.word	0x08009371
 8008c6c:	08009382 	.word	0x08009382

08008c70 <_scanf_chars>:
 8008c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c74:	4615      	mov	r5, r2
 8008c76:	688a      	ldr	r2, [r1, #8]
 8008c78:	4680      	mov	r8, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	b932      	cbnz	r2, 8008c8c <_scanf_chars+0x1c>
 8008c7e:	698a      	ldr	r2, [r1, #24]
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	bf0c      	ite	eq
 8008c84:	2201      	moveq	r2, #1
 8008c86:	f04f 32ff 	movne.w	r2, #4294967295
 8008c8a:	608a      	str	r2, [r1, #8]
 8008c8c:	6822      	ldr	r2, [r4, #0]
 8008c8e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008d20 <_scanf_chars+0xb0>
 8008c92:	06d1      	lsls	r1, r2, #27
 8008c94:	bf5f      	itttt	pl
 8008c96:	681a      	ldrpl	r2, [r3, #0]
 8008c98:	1d11      	addpl	r1, r2, #4
 8008c9a:	6019      	strpl	r1, [r3, #0]
 8008c9c:	6816      	ldrpl	r6, [r2, #0]
 8008c9e:	2700      	movs	r7, #0
 8008ca0:	69a0      	ldr	r0, [r4, #24]
 8008ca2:	b188      	cbz	r0, 8008cc8 <_scanf_chars+0x58>
 8008ca4:	2801      	cmp	r0, #1
 8008ca6:	d107      	bne.n	8008cb8 <_scanf_chars+0x48>
 8008ca8:	682a      	ldr	r2, [r5, #0]
 8008caa:	7811      	ldrb	r1, [r2, #0]
 8008cac:	6962      	ldr	r2, [r4, #20]
 8008cae:	5c52      	ldrb	r2, [r2, r1]
 8008cb0:	b952      	cbnz	r2, 8008cc8 <_scanf_chars+0x58>
 8008cb2:	2f00      	cmp	r7, #0
 8008cb4:	d031      	beq.n	8008d1a <_scanf_chars+0xaa>
 8008cb6:	e022      	b.n	8008cfe <_scanf_chars+0x8e>
 8008cb8:	2802      	cmp	r0, #2
 8008cba:	d120      	bne.n	8008cfe <_scanf_chars+0x8e>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008cc4:	071b      	lsls	r3, r3, #28
 8008cc6:	d41a      	bmi.n	8008cfe <_scanf_chars+0x8e>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	06da      	lsls	r2, r3, #27
 8008ccc:	bf5e      	ittt	pl
 8008cce:	682b      	ldrpl	r3, [r5, #0]
 8008cd0:	781b      	ldrbpl	r3, [r3, #0]
 8008cd2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008cd6:	682a      	ldr	r2, [r5, #0]
 8008cd8:	686b      	ldr	r3, [r5, #4]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	68a2      	ldr	r2, [r4, #8]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	3a01      	subs	r2, #1
 8008ce4:	606b      	str	r3, [r5, #4]
 8008ce6:	3701      	adds	r7, #1
 8008ce8:	60a2      	str	r2, [r4, #8]
 8008cea:	b142      	cbz	r2, 8008cfe <_scanf_chars+0x8e>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dcd7      	bgt.n	8008ca0 <_scanf_chars+0x30>
 8008cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0d0      	beq.n	8008ca0 <_scanf_chars+0x30>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f013 0310 	ands.w	r3, r3, #16
 8008d04:	d105      	bne.n	8008d12 <_scanf_chars+0xa2>
 8008d06:	68e2      	ldr	r2, [r4, #12]
 8008d08:	3201      	adds	r2, #1
 8008d0a:	60e2      	str	r2, [r4, #12]
 8008d0c:	69a2      	ldr	r2, [r4, #24]
 8008d0e:	b102      	cbz	r2, 8008d12 <_scanf_chars+0xa2>
 8008d10:	7033      	strb	r3, [r6, #0]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	443b      	add	r3, r7
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	2000      	movs	r0, #0
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	bf00      	nop
 8008d20:	080093af 	.word	0x080093af

08008d24 <_scanf_i>:
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	4698      	mov	r8, r3
 8008d2a:	4b74      	ldr	r3, [pc, #464]	; (8008efc <_scanf_i+0x1d8>)
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	4682      	mov	sl, r0
 8008d30:	4616      	mov	r6, r2
 8008d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d36:	b087      	sub	sp, #28
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d3e:	4b70      	ldr	r3, [pc, #448]	; (8008f00 <_scanf_i+0x1dc>)
 8008d40:	69a1      	ldr	r1, [r4, #24]
 8008d42:	4a70      	ldr	r2, [pc, #448]	; (8008f04 <_scanf_i+0x1e0>)
 8008d44:	2903      	cmp	r1, #3
 8008d46:	bf18      	it	ne
 8008d48:	461a      	movne	r2, r3
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d54:	bf88      	it	hi
 8008d56:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d5a:	4627      	mov	r7, r4
 8008d5c:	bf82      	ittt	hi
 8008d5e:	eb03 0905 	addhi.w	r9, r3, r5
 8008d62:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d66:	60a3      	strhi	r3, [r4, #8]
 8008d68:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d6c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d70:	bf98      	it	ls
 8008d72:	f04f 0900 	movls.w	r9, #0
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	463d      	mov	r5, r7
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	6831      	ldr	r1, [r6, #0]
 8008d80:	ab03      	add	r3, sp, #12
 8008d82:	7809      	ldrb	r1, [r1, #0]
 8008d84:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f7f7 fa49 	bl	8000220 <memchr>
 8008d8e:	b328      	cbz	r0, 8008ddc <_scanf_i+0xb8>
 8008d90:	f1bb 0f01 	cmp.w	fp, #1
 8008d94:	d159      	bne.n	8008e4a <_scanf_i+0x126>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	b92a      	cbnz	r2, 8008da6 <_scanf_i+0x82>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da2:	6063      	str	r3, [r4, #4]
 8008da4:	6022      	str	r2, [r4, #0]
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008dac:	6022      	str	r2, [r4, #0]
 8008dae:	68a2      	ldr	r2, [r4, #8]
 8008db0:	1e51      	subs	r1, r2, #1
 8008db2:	60a1      	str	r1, [r4, #8]
 8008db4:	b192      	cbz	r2, 8008ddc <_scanf_i+0xb8>
 8008db6:	6832      	ldr	r2, [r6, #0]
 8008db8:	1c51      	adds	r1, r2, #1
 8008dba:	6031      	str	r1, [r6, #0]
 8008dbc:	7812      	ldrb	r2, [r2, #0]
 8008dbe:	f805 2b01 	strb.w	r2, [r5], #1
 8008dc2:	6872      	ldr	r2, [r6, #4]
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	6072      	str	r2, [r6, #4]
 8008dca:	dc07      	bgt.n	8008ddc <_scanf_i+0xb8>
 8008dcc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	4790      	blx	r2
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8085 	bne.w	8008ee6 <_scanf_i+0x1c2>
 8008ddc:	f10b 0b01 	add.w	fp, fp, #1
 8008de0:	f1bb 0f03 	cmp.w	fp, #3
 8008de4:	d1cb      	bne.n	8008d7e <_scanf_i+0x5a>
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	b90b      	cbnz	r3, 8008dee <_scanf_i+0xca>
 8008dea:	230a      	movs	r3, #10
 8008dec:	6063      	str	r3, [r4, #4]
 8008dee:	6863      	ldr	r3, [r4, #4]
 8008df0:	4945      	ldr	r1, [pc, #276]	; (8008f08 <_scanf_i+0x1e4>)
 8008df2:	6960      	ldr	r0, [r4, #20]
 8008df4:	1ac9      	subs	r1, r1, r3
 8008df6:	f000 f889 	bl	8008f0c <__sccl>
 8008dfa:	f04f 0b00 	mov.w	fp, #0
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d03d      	beq.n	8008e82 <_scanf_i+0x15e>
 8008e06:	6831      	ldr	r1, [r6, #0]
 8008e08:	6960      	ldr	r0, [r4, #20]
 8008e0a:	f891 c000 	ldrb.w	ip, [r1]
 8008e0e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d035      	beq.n	8008e82 <_scanf_i+0x15e>
 8008e16:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008e1a:	d124      	bne.n	8008e66 <_scanf_i+0x142>
 8008e1c:	0510      	lsls	r0, r2, #20
 8008e1e:	d522      	bpl.n	8008e66 <_scanf_i+0x142>
 8008e20:	f10b 0b01 	add.w	fp, fp, #1
 8008e24:	f1b9 0f00 	cmp.w	r9, #0
 8008e28:	d003      	beq.n	8008e32 <_scanf_i+0x10e>
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e30:	60a3      	str	r3, [r4, #8]
 8008e32:	6873      	ldr	r3, [r6, #4]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	6073      	str	r3, [r6, #4]
 8008e3a:	dd1b      	ble.n	8008e74 <_scanf_i+0x150>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	e7d9      	b.n	8008dfe <_scanf_i+0xda>
 8008e4a:	f1bb 0f02 	cmp.w	fp, #2
 8008e4e:	d1ae      	bne.n	8008dae <_scanf_i+0x8a>
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e56:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e5a:	d1bf      	bne.n	8008ddc <_scanf_i+0xb8>
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e64:	e7a2      	b.n	8008dac <_scanf_i+0x88>
 8008e66:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	780b      	ldrb	r3, [r1, #0]
 8008e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e72:	e7de      	b.n	8008e32 <_scanf_i+0x10e>
 8008e74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4798      	blx	r3
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d0df      	beq.n	8008e42 <_scanf_i+0x11e>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	05d9      	lsls	r1, r3, #23
 8008e86:	d50d      	bpl.n	8008ea4 <_scanf_i+0x180>
 8008e88:	42bd      	cmp	r5, r7
 8008e8a:	d909      	bls.n	8008ea0 <_scanf_i+0x17c>
 8008e8c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e94:	4632      	mov	r2, r6
 8008e96:	4650      	mov	r0, sl
 8008e98:	4798      	blx	r3
 8008e9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e9e:	464d      	mov	r5, r9
 8008ea0:	42bd      	cmp	r5, r7
 8008ea2:	d028      	beq.n	8008ef6 <_scanf_i+0x1d2>
 8008ea4:	6822      	ldr	r2, [r4, #0]
 8008ea6:	f012 0210 	ands.w	r2, r2, #16
 8008eaa:	d113      	bne.n	8008ed4 <_scanf_i+0x1b0>
 8008eac:	702a      	strb	r2, [r5, #0]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	9e01      	ldr	r6, [sp, #4]
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	47b0      	blx	r6
 8008eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ebc:	6821      	ldr	r1, [r4, #0]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	f8c8 2000 	str.w	r2, [r8]
 8008ec4:	f011 0f20 	tst.w	r1, #32
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	d00f      	beq.n	8008eec <_scanf_i+0x1c8>
 8008ecc:	6018      	str	r0, [r3, #0]
 8008ece:	68e3      	ldr	r3, [r4, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60e3      	str	r3, [r4, #12]
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	1bed      	subs	r5, r5, r7
 8008ed8:	445d      	add	r5, fp
 8008eda:	442b      	add	r3, r5
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	2000      	movs	r0, #0
 8008ee0:	b007      	add	sp, #28
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	f04f 0b00 	mov.w	fp, #0
 8008eea:	e7ca      	b.n	8008e82 <_scanf_i+0x15e>
 8008eec:	07ca      	lsls	r2, r1, #31
 8008eee:	bf4c      	ite	mi
 8008ef0:	8018      	strhmi	r0, [r3, #0]
 8008ef2:	6018      	strpl	r0, [r3, #0]
 8008ef4:	e7eb      	b.n	8008ece <_scanf_i+0x1aa>
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	e7f2      	b.n	8008ee0 <_scanf_i+0x1bc>
 8008efa:	bf00      	nop
 8008efc:	08009338 	.word	0x08009338
 8008f00:	080092b1 	.word	0x080092b1
 8008f04:	080091c9 	.word	0x080091c9
 8008f08:	080093a3 	.word	0x080093a3

08008f0c <__sccl>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	780b      	ldrb	r3, [r1, #0]
 8008f10:	4604      	mov	r4, r0
 8008f12:	2b5e      	cmp	r3, #94	; 0x5e
 8008f14:	bf0b      	itete	eq
 8008f16:	784b      	ldrbeq	r3, [r1, #1]
 8008f18:	1c4a      	addne	r2, r1, #1
 8008f1a:	1c8a      	addeq	r2, r1, #2
 8008f1c:	2100      	movne	r1, #0
 8008f1e:	bf08      	it	eq
 8008f20:	2101      	moveq	r1, #1
 8008f22:	3801      	subs	r0, #1
 8008f24:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008f28:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008f2c:	42a8      	cmp	r0, r5
 8008f2e:	d1fb      	bne.n	8008f28 <__sccl+0x1c>
 8008f30:	b90b      	cbnz	r3, 8008f36 <__sccl+0x2a>
 8008f32:	1e50      	subs	r0, r2, #1
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	f081 0101 	eor.w	r1, r1, #1
 8008f3a:	54e1      	strb	r1, [r4, r3]
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f44:	2d2d      	cmp	r5, #45	; 0x2d
 8008f46:	d005      	beq.n	8008f54 <__sccl+0x48>
 8008f48:	2d5d      	cmp	r5, #93	; 0x5d
 8008f4a:	d016      	beq.n	8008f7a <__sccl+0x6e>
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	d0f1      	beq.n	8008f34 <__sccl+0x28>
 8008f50:	462b      	mov	r3, r5
 8008f52:	e7f2      	b.n	8008f3a <__sccl+0x2e>
 8008f54:	7846      	ldrb	r6, [r0, #1]
 8008f56:	2e5d      	cmp	r6, #93	; 0x5d
 8008f58:	d0fa      	beq.n	8008f50 <__sccl+0x44>
 8008f5a:	42b3      	cmp	r3, r6
 8008f5c:	dcf8      	bgt.n	8008f50 <__sccl+0x44>
 8008f5e:	3002      	adds	r0, #2
 8008f60:	461a      	mov	r2, r3
 8008f62:	3201      	adds	r2, #1
 8008f64:	4296      	cmp	r6, r2
 8008f66:	54a1      	strb	r1, [r4, r2]
 8008f68:	dcfb      	bgt.n	8008f62 <__sccl+0x56>
 8008f6a:	1af2      	subs	r2, r6, r3
 8008f6c:	3a01      	subs	r2, #1
 8008f6e:	1c5d      	adds	r5, r3, #1
 8008f70:	42b3      	cmp	r3, r6
 8008f72:	bfa8      	it	ge
 8008f74:	2200      	movge	r2, #0
 8008f76:	18ab      	adds	r3, r5, r2
 8008f78:	e7e1      	b.n	8008f3e <__sccl+0x32>
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	e7da      	b.n	8008f34 <__sccl+0x28>

08008f7e <__submore>:
 8008f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f82:	460c      	mov	r4, r1
 8008f84:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008f86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	d11d      	bne.n	8008fca <__submore+0x4c>
 8008f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008f92:	f7ff f927 	bl	80081e4 <_malloc_r>
 8008f96:	b918      	cbnz	r0, 8008fa0 <__submore+0x22>
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fa6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008faa:	6360      	str	r0, [r4, #52]	; 0x34
 8008fac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008fb0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008fb4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008fb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008fbc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008fc0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008fc4:	6020      	str	r0, [r4, #0]
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	e7e8      	b.n	8008f9c <__submore+0x1e>
 8008fca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008fcc:	0077      	lsls	r7, r6, #1
 8008fce:	463a      	mov	r2, r7
 8008fd0:	f000 f848 	bl	8009064 <_realloc_r>
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0de      	beq.n	8008f98 <__submore+0x1a>
 8008fda:	eb00 0806 	add.w	r8, r0, r6
 8008fde:	4601      	mov	r1, r0
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	f000 f830 	bl	8009048 <memcpy>
 8008fe8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008fec:	f8c4 8000 	str.w	r8, [r4]
 8008ff0:	e7e9      	b.n	8008fc6 <__submore+0x48>

08008ff2 <memmove>:
 8008ff2:	4288      	cmp	r0, r1
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	eb01 0402 	add.w	r4, r1, r2
 8008ffa:	d902      	bls.n	8009002 <memmove+0x10>
 8008ffc:	4284      	cmp	r4, r0
 8008ffe:	4623      	mov	r3, r4
 8009000:	d807      	bhi.n	8009012 <memmove+0x20>
 8009002:	1e43      	subs	r3, r0, #1
 8009004:	42a1      	cmp	r1, r4
 8009006:	d008      	beq.n	800901a <memmove+0x28>
 8009008:	f811 2b01 	ldrb.w	r2, [r1], #1
 800900c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009010:	e7f8      	b.n	8009004 <memmove+0x12>
 8009012:	4402      	add	r2, r0
 8009014:	4601      	mov	r1, r0
 8009016:	428a      	cmp	r2, r1
 8009018:	d100      	bne.n	800901c <memmove+0x2a>
 800901a:	bd10      	pop	{r4, pc}
 800901c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009020:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009024:	e7f7      	b.n	8009016 <memmove+0x24>
	...

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_sbrk_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f8 faaa 	bl	800158c <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20000c10 	.word	0x20000c10

08009048 <memcpy>:
 8009048:	440a      	add	r2, r1
 800904a:	4291      	cmp	r1, r2
 800904c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009050:	d100      	bne.n	8009054 <memcpy+0xc>
 8009052:	4770      	bx	lr
 8009054:	b510      	push	{r4, lr}
 8009056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800905a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800905e:	4291      	cmp	r1, r2
 8009060:	d1f9      	bne.n	8009056 <memcpy+0xe>
 8009062:	bd10      	pop	{r4, pc}

08009064 <_realloc_r>:
 8009064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009068:	4680      	mov	r8, r0
 800906a:	4614      	mov	r4, r2
 800906c:	460e      	mov	r6, r1
 800906e:	b921      	cbnz	r1, 800907a <_realloc_r+0x16>
 8009070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4611      	mov	r1, r2
 8009076:	f7ff b8b5 	b.w	80081e4 <_malloc_r>
 800907a:	b92a      	cbnz	r2, 8009088 <_realloc_r+0x24>
 800907c:	f7ff f846 	bl	800810c <_free_r>
 8009080:	4625      	mov	r5, r4
 8009082:	4628      	mov	r0, r5
 8009084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009088:	f000 f914 	bl	80092b4 <_malloc_usable_size_r>
 800908c:	4284      	cmp	r4, r0
 800908e:	4607      	mov	r7, r0
 8009090:	d802      	bhi.n	8009098 <_realloc_r+0x34>
 8009092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009096:	d812      	bhi.n	80090be <_realloc_r+0x5a>
 8009098:	4621      	mov	r1, r4
 800909a:	4640      	mov	r0, r8
 800909c:	f7ff f8a2 	bl	80081e4 <_malloc_r>
 80090a0:	4605      	mov	r5, r0
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d0ed      	beq.n	8009082 <_realloc_r+0x1e>
 80090a6:	42bc      	cmp	r4, r7
 80090a8:	4622      	mov	r2, r4
 80090aa:	4631      	mov	r1, r6
 80090ac:	bf28      	it	cs
 80090ae:	463a      	movcs	r2, r7
 80090b0:	f7ff ffca 	bl	8009048 <memcpy>
 80090b4:	4631      	mov	r1, r6
 80090b6:	4640      	mov	r0, r8
 80090b8:	f7ff f828 	bl	800810c <_free_r>
 80090bc:	e7e1      	b.n	8009082 <_realloc_r+0x1e>
 80090be:	4635      	mov	r5, r6
 80090c0:	e7df      	b.n	8009082 <_realloc_r+0x1e>
	...

080090c4 <_strtol_l.constprop.0>:
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ca:	d001      	beq.n	80090d0 <_strtol_l.constprop.0+0xc>
 80090cc:	2b24      	cmp	r3, #36	; 0x24
 80090ce:	d906      	bls.n	80090de <_strtol_l.constprop.0+0x1a>
 80090d0:	f7fe fff0 	bl	80080b4 <__errno>
 80090d4:	2316      	movs	r3, #22
 80090d6:	6003      	str	r3, [r0, #0]
 80090d8:	2000      	movs	r0, #0
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80091c4 <_strtol_l.constprop.0+0x100>
 80090e2:	460d      	mov	r5, r1
 80090e4:	462e      	mov	r6, r5
 80090e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80090ee:	f017 0708 	ands.w	r7, r7, #8
 80090f2:	d1f7      	bne.n	80090e4 <_strtol_l.constprop.0+0x20>
 80090f4:	2c2d      	cmp	r4, #45	; 0x2d
 80090f6:	d132      	bne.n	800915e <_strtol_l.constprop.0+0x9a>
 80090f8:	782c      	ldrb	r4, [r5, #0]
 80090fa:	2701      	movs	r7, #1
 80090fc:	1cb5      	adds	r5, r6, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d05b      	beq.n	80091ba <_strtol_l.constprop.0+0xf6>
 8009102:	2b10      	cmp	r3, #16
 8009104:	d109      	bne.n	800911a <_strtol_l.constprop.0+0x56>
 8009106:	2c30      	cmp	r4, #48	; 0x30
 8009108:	d107      	bne.n	800911a <_strtol_l.constprop.0+0x56>
 800910a:	782c      	ldrb	r4, [r5, #0]
 800910c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009110:	2c58      	cmp	r4, #88	; 0x58
 8009112:	d14d      	bne.n	80091b0 <_strtol_l.constprop.0+0xec>
 8009114:	786c      	ldrb	r4, [r5, #1]
 8009116:	2310      	movs	r3, #16
 8009118:	3502      	adds	r5, #2
 800911a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800911e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009122:	f04f 0e00 	mov.w	lr, #0
 8009126:	fbb8 f9f3 	udiv	r9, r8, r3
 800912a:	4676      	mov	r6, lr
 800912c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009130:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009134:	f1bc 0f09 	cmp.w	ip, #9
 8009138:	d816      	bhi.n	8009168 <_strtol_l.constprop.0+0xa4>
 800913a:	4664      	mov	r4, ip
 800913c:	42a3      	cmp	r3, r4
 800913e:	dd24      	ble.n	800918a <_strtol_l.constprop.0+0xc6>
 8009140:	f1be 3fff 	cmp.w	lr, #4294967295
 8009144:	d008      	beq.n	8009158 <_strtol_l.constprop.0+0x94>
 8009146:	45b1      	cmp	r9, r6
 8009148:	d31c      	bcc.n	8009184 <_strtol_l.constprop.0+0xc0>
 800914a:	d101      	bne.n	8009150 <_strtol_l.constprop.0+0x8c>
 800914c:	45a2      	cmp	sl, r4
 800914e:	db19      	blt.n	8009184 <_strtol_l.constprop.0+0xc0>
 8009150:	fb06 4603 	mla	r6, r6, r3, r4
 8009154:	f04f 0e01 	mov.w	lr, #1
 8009158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800915c:	e7e8      	b.n	8009130 <_strtol_l.constprop.0+0x6c>
 800915e:	2c2b      	cmp	r4, #43	; 0x2b
 8009160:	bf04      	itt	eq
 8009162:	782c      	ldrbeq	r4, [r5, #0]
 8009164:	1cb5      	addeq	r5, r6, #2
 8009166:	e7ca      	b.n	80090fe <_strtol_l.constprop.0+0x3a>
 8009168:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800916c:	f1bc 0f19 	cmp.w	ip, #25
 8009170:	d801      	bhi.n	8009176 <_strtol_l.constprop.0+0xb2>
 8009172:	3c37      	subs	r4, #55	; 0x37
 8009174:	e7e2      	b.n	800913c <_strtol_l.constprop.0+0x78>
 8009176:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800917a:	f1bc 0f19 	cmp.w	ip, #25
 800917e:	d804      	bhi.n	800918a <_strtol_l.constprop.0+0xc6>
 8009180:	3c57      	subs	r4, #87	; 0x57
 8009182:	e7db      	b.n	800913c <_strtol_l.constprop.0+0x78>
 8009184:	f04f 3eff 	mov.w	lr, #4294967295
 8009188:	e7e6      	b.n	8009158 <_strtol_l.constprop.0+0x94>
 800918a:	f1be 3fff 	cmp.w	lr, #4294967295
 800918e:	d105      	bne.n	800919c <_strtol_l.constprop.0+0xd8>
 8009190:	2322      	movs	r3, #34	; 0x22
 8009192:	6003      	str	r3, [r0, #0]
 8009194:	4646      	mov	r6, r8
 8009196:	b942      	cbnz	r2, 80091aa <_strtol_l.constprop.0+0xe6>
 8009198:	4630      	mov	r0, r6
 800919a:	e79e      	b.n	80090da <_strtol_l.constprop.0+0x16>
 800919c:	b107      	cbz	r7, 80091a0 <_strtol_l.constprop.0+0xdc>
 800919e:	4276      	negs	r6, r6
 80091a0:	2a00      	cmp	r2, #0
 80091a2:	d0f9      	beq.n	8009198 <_strtol_l.constprop.0+0xd4>
 80091a4:	f1be 0f00 	cmp.w	lr, #0
 80091a8:	d000      	beq.n	80091ac <_strtol_l.constprop.0+0xe8>
 80091aa:	1e69      	subs	r1, r5, #1
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	e7f3      	b.n	8009198 <_strtol_l.constprop.0+0xd4>
 80091b0:	2430      	movs	r4, #48	; 0x30
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1b1      	bne.n	800911a <_strtol_l.constprop.0+0x56>
 80091b6:	2308      	movs	r3, #8
 80091b8:	e7af      	b.n	800911a <_strtol_l.constprop.0+0x56>
 80091ba:	2c30      	cmp	r4, #48	; 0x30
 80091bc:	d0a5      	beq.n	800910a <_strtol_l.constprop.0+0x46>
 80091be:	230a      	movs	r3, #10
 80091c0:	e7ab      	b.n	800911a <_strtol_l.constprop.0+0x56>
 80091c2:	bf00      	nop
 80091c4:	080093af 	.word	0x080093af

080091c8 <_strtol_r>:
 80091c8:	f7ff bf7c 	b.w	80090c4 <_strtol_l.constprop.0>

080091cc <_strtoul_l.constprop.0>:
 80091cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4f36      	ldr	r7, [pc, #216]	; (80092ac <_strtoul_l.constprop.0+0xe0>)
 80091d2:	4686      	mov	lr, r0
 80091d4:	460d      	mov	r5, r1
 80091d6:	4628      	mov	r0, r5
 80091d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091dc:	5d3e      	ldrb	r6, [r7, r4]
 80091de:	f016 0608 	ands.w	r6, r6, #8
 80091e2:	d1f8      	bne.n	80091d6 <_strtoul_l.constprop.0+0xa>
 80091e4:	2c2d      	cmp	r4, #45	; 0x2d
 80091e6:	d130      	bne.n	800924a <_strtoul_l.constprop.0+0x7e>
 80091e8:	782c      	ldrb	r4, [r5, #0]
 80091ea:	2601      	movs	r6, #1
 80091ec:	1c85      	adds	r5, r0, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d057      	beq.n	80092a2 <_strtoul_l.constprop.0+0xd6>
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d109      	bne.n	800920a <_strtoul_l.constprop.0+0x3e>
 80091f6:	2c30      	cmp	r4, #48	; 0x30
 80091f8:	d107      	bne.n	800920a <_strtoul_l.constprop.0+0x3e>
 80091fa:	7828      	ldrb	r0, [r5, #0]
 80091fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009200:	2858      	cmp	r0, #88	; 0x58
 8009202:	d149      	bne.n	8009298 <_strtoul_l.constprop.0+0xcc>
 8009204:	786c      	ldrb	r4, [r5, #1]
 8009206:	2310      	movs	r3, #16
 8009208:	3502      	adds	r5, #2
 800920a:	f04f 38ff 	mov.w	r8, #4294967295
 800920e:	2700      	movs	r7, #0
 8009210:	fbb8 f8f3 	udiv	r8, r8, r3
 8009214:	fb03 f908 	mul.w	r9, r3, r8
 8009218:	ea6f 0909 	mvn.w	r9, r9
 800921c:	4638      	mov	r0, r7
 800921e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009222:	f1bc 0f09 	cmp.w	ip, #9
 8009226:	d815      	bhi.n	8009254 <_strtoul_l.constprop.0+0x88>
 8009228:	4664      	mov	r4, ip
 800922a:	42a3      	cmp	r3, r4
 800922c:	dd23      	ble.n	8009276 <_strtoul_l.constprop.0+0xaa>
 800922e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009232:	d007      	beq.n	8009244 <_strtoul_l.constprop.0+0x78>
 8009234:	4580      	cmp	r8, r0
 8009236:	d31b      	bcc.n	8009270 <_strtoul_l.constprop.0+0xa4>
 8009238:	d101      	bne.n	800923e <_strtoul_l.constprop.0+0x72>
 800923a:	45a1      	cmp	r9, r4
 800923c:	db18      	blt.n	8009270 <_strtoul_l.constprop.0+0xa4>
 800923e:	fb00 4003 	mla	r0, r0, r3, r4
 8009242:	2701      	movs	r7, #1
 8009244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009248:	e7e9      	b.n	800921e <_strtoul_l.constprop.0+0x52>
 800924a:	2c2b      	cmp	r4, #43	; 0x2b
 800924c:	bf04      	itt	eq
 800924e:	782c      	ldrbeq	r4, [r5, #0]
 8009250:	1c85      	addeq	r5, r0, #2
 8009252:	e7cc      	b.n	80091ee <_strtoul_l.constprop.0+0x22>
 8009254:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009258:	f1bc 0f19 	cmp.w	ip, #25
 800925c:	d801      	bhi.n	8009262 <_strtoul_l.constprop.0+0x96>
 800925e:	3c37      	subs	r4, #55	; 0x37
 8009260:	e7e3      	b.n	800922a <_strtoul_l.constprop.0+0x5e>
 8009262:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009266:	f1bc 0f19 	cmp.w	ip, #25
 800926a:	d804      	bhi.n	8009276 <_strtoul_l.constprop.0+0xaa>
 800926c:	3c57      	subs	r4, #87	; 0x57
 800926e:	e7dc      	b.n	800922a <_strtoul_l.constprop.0+0x5e>
 8009270:	f04f 37ff 	mov.w	r7, #4294967295
 8009274:	e7e6      	b.n	8009244 <_strtoul_l.constprop.0+0x78>
 8009276:	1c7b      	adds	r3, r7, #1
 8009278:	d106      	bne.n	8009288 <_strtoul_l.constprop.0+0xbc>
 800927a:	2322      	movs	r3, #34	; 0x22
 800927c:	f8ce 3000 	str.w	r3, [lr]
 8009280:	4638      	mov	r0, r7
 8009282:	b932      	cbnz	r2, 8009292 <_strtoul_l.constprop.0+0xc6>
 8009284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009288:	b106      	cbz	r6, 800928c <_strtoul_l.constprop.0+0xc0>
 800928a:	4240      	negs	r0, r0
 800928c:	2a00      	cmp	r2, #0
 800928e:	d0f9      	beq.n	8009284 <_strtoul_l.constprop.0+0xb8>
 8009290:	b107      	cbz	r7, 8009294 <_strtoul_l.constprop.0+0xc8>
 8009292:	1e69      	subs	r1, r5, #1
 8009294:	6011      	str	r1, [r2, #0]
 8009296:	e7f5      	b.n	8009284 <_strtoul_l.constprop.0+0xb8>
 8009298:	2430      	movs	r4, #48	; 0x30
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1b5      	bne.n	800920a <_strtoul_l.constprop.0+0x3e>
 800929e:	2308      	movs	r3, #8
 80092a0:	e7b3      	b.n	800920a <_strtoul_l.constprop.0+0x3e>
 80092a2:	2c30      	cmp	r4, #48	; 0x30
 80092a4:	d0a9      	beq.n	80091fa <_strtoul_l.constprop.0+0x2e>
 80092a6:	230a      	movs	r3, #10
 80092a8:	e7af      	b.n	800920a <_strtoul_l.constprop.0+0x3e>
 80092aa:	bf00      	nop
 80092ac:	080093af 	.word	0x080093af

080092b0 <_strtoul_r>:
 80092b0:	f7ff bf8c 	b.w	80091cc <_strtoul_l.constprop.0>

080092b4 <_malloc_usable_size_r>:
 80092b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b8:	1f18      	subs	r0, r3, #4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bfbc      	itt	lt
 80092be:	580b      	ldrlt	r3, [r1, r0]
 80092c0:	18c0      	addlt	r0, r0, r3
 80092c2:	4770      	bx	lr

080092c4 <_init>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr

080092d0 <_fini>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr
