
Prodzektv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800902c  0800902c  0001902c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091cc  080091cc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080091cc  080091cc  000191cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091d4  080091d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d4  080091d4  000191d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080091dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  08009274  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  08009314  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000ad0  200001d8  080093b4  000201d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000ca8  080093b4  00020ca8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001a49a  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003d53  00000000  00000000  0003a6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000015a8  00000000  00000000  0003e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001099  00000000  00000000  0003f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029d23  00000000  00000000  00040a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001cd87  00000000  00000000  0006a79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fe588  00000000  00000000  00087523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006170  00000000  00000000  00185aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  0018bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009014 	.word	0x08009014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08009014 	.word	0x08009014

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <MX_ADC1_Init+0x9c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_ADC1_Init+0x98>)
 80005fc:	4a17      	ldr	r2, [pc, #92]	; (800065c <MX_ADC1_Init+0xa0>)
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <MX_ADC1_Init+0x98>)
 8000608:	2201      	movs	r2, #1
 800060a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_ADC1_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061a:	480e      	ldr	r0, [pc, #56]	; (8000654 <MX_ADC1_Init+0x98>)
 800061c:	f001 fbc2 	bl	8001da4 <HAL_ADC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 fc77 	bl	8000f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062e:	2301      	movs	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <MX_ADC1_Init+0x98>)
 800063c:	f001 fbf6 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000646:	f000 fc67 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200001f4 	.word	0x200001f4
 8000658:	40012000 	.word	0x40012000
 800065c:	0f000001 	.word	0x0f000001

08000660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0x74>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d123      	bne.n	80006ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_ADC_MspInit+0x78>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x7c>)
 80006c6:	f002 facb 	bl	8002c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40012000 	.word	0x40012000
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <BTN_DIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button DIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_DIO_State_TypeDef BTN_DIO_Read(const BTN_DIO_Handle_TypeDef* hbtn)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	_Bool state = DIO_Read(&(hbtn->Input));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f836 	bl	800075c <DIO_Read>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7a1b      	ldrb	r3, [r3, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <BTN_DIO_Read+0x20>
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	e003      	b.n	8000708 <BTN_DIO_Read+0x28>
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
}
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <BTN_DIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button DIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_DIO_Edge_TypeDef BTN_DIO_EdgeDetected(BTN_DIO_Handle_TypeDef* hbtn)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	BTN_DIO_State_TypeDef state = BTN_DIO_Read(hbtn);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffe1 	bl	80006e0 <BTN_DIO_Read>
 800071e:	4603      	mov	r3, r0
 8000720:	73bb      	strb	r3, [r7, #14]
	BTN_DIO_Edge_TypeDef edge = BTN_NO_EDGE;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d106      	bne.n	800073a <BTN_DIO_EdgeDetected+0x2a>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d102      	bne.n	800073a <BTN_DIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e008      	b.n	800074c <BTN_DIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d105      	bne.n	800074c <BTN_DIO_EdgeDetected+0x3c>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7a5b      	ldrb	r3, [r3, #9]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d101      	bne.n	800074c <BTN_DIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000748:	2302      	movs	r3, #2
 800074a:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7bba      	ldrb	r2, [r7, #14]
 8000750:	725a      	strb	r2, [r3, #9]
	return edge;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <DIO_Read>:
 * @brief Reads digital input
 * @param[in] hdio  : Digital I/O handler
 * @retval Input state (0 or 1)
 */
_Bool DIO_Read(const DIO_Handle_TypeDef* hdio)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return (_Bool)HAL_GPIO_ReadPin(hdio->Port, hdio->Pin);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	889b      	ldrh	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	4610      	mov	r0, r2
 8000770:	f002 fc22 	bl	8002fb8 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ETH_Init+0x84>)
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MX_ETH_Init+0x88>)
 8000790:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_ETH_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ETH_Init+0x8c>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_ETH_Init+0x8c>)
 80007a0:	22e1      	movs	r2, #225	; 0xe1
 80007a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_ETH_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_ETH_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_ETH_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_ETH_Init+0x84>)
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <MX_ETH_Init+0x8c>)
 80007ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ETH_Init+0x84>)
 80007be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007c2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ETH_Init+0x84>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_ETH_Init+0x90>)
 80007c8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_ETH_Init+0x84>)
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <MX_ETH_Init+0x94>)
 80007ce:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_ETH_Init+0x84>)
 80007d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007d6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_ETH_Init+0x84>)
 80007da:	f001 ff1b 	bl	8002614 <HAL_ETH_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 fb98 	bl	8000f18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007e8:	2238      	movs	r2, #56	; 0x38
 80007ea:	2100      	movs	r1, #0
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_ETH_Init+0x98>)
 80007ee:	f007 fb01 	bl	8007df4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_ETH_Init+0x98>)
 80007f4:	2221      	movs	r2, #33	; 0x21
 80007f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_ETH_Init+0x98>)
 80007fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80007fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_ETH_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000274 	.word	0x20000274
 8000810:	40028000 	.word	0x40028000
 8000814:	20000324 	.word	0x20000324
 8000818:	20000138 	.word	0x20000138
 800081c:	20000098 	.word	0x20000098
 8000820:	2000023c 	.word	0x2000023c

08000824 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a4e      	ldr	r2, [pc, #312]	; (800097c <HAL_ETH_MspInit+0x158>)
 8000842:	4293      	cmp	r3, r2
 8000844:	f040 8096 	bne.w	8000974 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000848:	4b4d      	ldr	r3, [pc, #308]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a4c      	ldr	r2, [pc, #304]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
 8000854:	4b4a      	ldr	r3, [pc, #296]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	4b47      	ldr	r3, [pc, #284]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a46      	ldr	r2, [pc, #280]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000866:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b44      	ldr	r3, [pc, #272]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	4b41      	ldr	r3, [pc, #260]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	4a40      	ldr	r2, [pc, #256]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800087e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a3a      	ldr	r2, [pc, #232]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
 800089c:	4b38      	ldr	r3, [pc, #224]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b35      	ldr	r3, [pc, #212]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4a34      	ldr	r2, [pc, #208]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6313      	str	r3, [r2, #48]	; 0x30
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c4:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	6313      	str	r3, [r2, #48]	; 0x30
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e2:	6313      	str	r3, [r2, #48]	; 0x30
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_ETH_MspInit+0x15c>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008f0:	2332      	movs	r3, #50	; 0x32
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000900:	230b      	movs	r3, #11
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <HAL_ETH_MspInit+0x160>)
 800090c:	f002 f9a8 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000910:	2386      	movs	r3, #134	; 0x86
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	4817      	ldr	r0, [pc, #92]	; (8000988 <HAL_ETH_MspInit+0x164>)
 800092c:	f002 f998 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <HAL_ETH_MspInit+0x168>)
 800094e:	f002 f987 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000952:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000964:	230b      	movs	r3, #11
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <HAL_ETH_MspInit+0x16c>)
 8000970:	f002 f976 	bl	8002c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40028000 	.word	0x40028000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020400 	.word	0x40020400
 8000990:	40021800 	.word	0x40021800

08000994 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b58      	ldr	r3, [pc, #352]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a57      	ldr	r2, [pc, #348]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a51      	ldr	r2, [pc, #324]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a4b      	ldr	r2, [pc, #300]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a45      	ldr	r2, [pc, #276]	; (8000b0c <MX_GPIO_Init+0x178>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x178>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a58:	482d      	ldr	r0, [pc, #180]	; (8000b10 <MX_GPIO_Init+0x17c>)
 8000a5a:	f002 fac5 	bl	8002fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	482c      	ldr	r0, [pc, #176]	; (8000b14 <MX_GPIO_Init+0x180>)
 8000a64:	f002 fac0 	bl	8002fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4826      	ldr	r0, [pc, #152]	; (8000b18 <MX_GPIO_Init+0x184>)
 8000a80:	f002 f8ee 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a84:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_GPIO_Init+0x17c>)
 8000a9e:	f002 f8df 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Tach_Pin;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Tach_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x188>)
 8000aba:	f002 f8d1 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000abe:	2340      	movs	r3, #64	; 0x40
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <MX_GPIO_Init+0x180>)
 8000ad6:	f002 f8c3 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <MX_GPIO_Init+0x180>)
 8000aee:	f002 f8b7 	bl	8002c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2028      	movs	r0, #40	; 0x28
 8000af8:	f001 fcc3 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000afc:	2028      	movs	r0, #40	; 0x28
 8000afe:	f001 fcdc 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 8000b02:	bf00      	nop
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40021400 	.word	0x40021400

08000b20 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a2d      	ldr	r2, [pc, #180]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d153      	bne.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xb8>
	{
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2101      	movs	r1, #1
 8000b34:	482b      	ldr	r0, [pc, #172]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000b36:	f002 fa57 	bl	8002fe8 <HAL_GPIO_WritePin>
				if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7f1b      	ldrb	r3, [r3, #28]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d14a      	bne.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xb8>
				{
					if (Is_First_Captured==0) // if the first rising edge is not captured
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10a      	bne.n	8000b60 <HAL_TIM_IC_CaptureCallback+0x40>
					{
						IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f004 fd3d 	bl	80055cc <HAL_TIM_ReadCapturedValue>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a25      	ldr	r2, [pc, #148]	; (8000bec <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b56:	6013      	str	r3, [r2, #0]
						Is_First_Captured = 1;  // set the first captured as true
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
						Is_First_Captured = 0; // set it back to false
				}
			}
	}
}
 8000b5e:	e03b      	b.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xb8>
						IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000b60:	2100      	movs	r1, #0
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f004 fd32 	bl	80055cc <HAL_TIM_ReadCapturedValue>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b6c:	6013      	str	r3, [r2, #0]
						if (IC_Val2 > IC_Val1)
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d907      	bls.n	8000b8a <HAL_TIM_IC_CaptureCallback+0x6a>
							Difference = IC_Val2-IC_Val1;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	4a1b      	ldr	r2, [pc, #108]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	e00d      	b.n	8000ba6 <HAL_TIM_IC_CaptureCallback+0x86>
						else if (IC_Val1 > IC_Val2)
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d907      	bls.n	8000ba6 <HAL_TIM_IC_CaptureCallback+0x86>
							Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ba4:	6013      	str	r3, [r2, #0]
						frequency = HAL_RCC_GetPCLK1Freq()/Difference;
 8000ba6:	f003 f857 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000bb6:	6013      	str	r3, [r2, #0]
						rpm = frequency*30;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000bc8:	601a      	str	r2, [r3, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
						Is_First_Captured = 0; // set it back to false
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000037c 	.word	0x2000037c
 8000be4:	40020400 	.word	0x40020400
 8000be8:	20000344 	.word	0x20000344
 8000bec:	20000338 	.word	0x20000338
 8000bf0:	2000033c 	.word	0x2000033c
 8000bf4:	20000340 	.word	0x20000340
 8000bf8:	20000348 	.word	0x20000348
 8000bfc:	2000032c 	.word	0x2000032c

08000c00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b096      	sub	sp, #88	; 0x58
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]
  if(htim == &htim4)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a43      	ldr	r2, [pc, #268]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d165      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0xdc>
	  /********************************************//**
	   *  Sterowanie pwm za pomocą regulatora PID
	   ***********************************************/


		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t)(Duty));
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
	  	  Duty = PID_GetOutput(&hpid1, rpm_ref, rpm);
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	ee07 3a10 	vmov	s14, r3
 8000c2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c32:	eef0 0a47 	vmov.f32	s1, s14
 8000c36:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3a:	483c      	ldr	r0, [pc, #240]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000c3c:	f000 f971 	bl	8000f22 <PID_GetOutput>
 8000c40:	eef0 7a40 	vmov.f32	s15, s0
 8000c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c48:	ee17 2a90 	vmov	r2, s15
 8000c4c:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c4e:	601a      	str	r2, [r3, #0]
	  	  e = rpm_ref - rpm;
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000c64:	edc3 7a00 	vstr	s15, [r3]

	  	if(BTN_DIO_EdgeDetected(&husrbtn) == BTN_PRESSED_EDGE){
 8000c68:	4832      	ldr	r0, [pc, #200]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c6a:	f7ff fd51 	bl	8000710 <BTN_DIO_EdgeDetected>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d111      	bne.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x98>
	  		if (mode == 1)
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_TIM_PeriodElapsedCallback+0x84>
	  			mode = 0;
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e009      	b.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x98>
	  		else if(mode == 0)
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x98>
	  			mode=1;
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
	  	}


	  	test = __HAL_TIM_GET_COUNTER(&htim8);
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ca2:	601a      	str	r2, [r3, #0]
	  	if(test<100)
 8000ca4:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc06      	bgt.n	8000cba <HAL_TIM_PeriodElapsedCallback+0xba>
	  		test2=1000+test;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cb4:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e008      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0xcc>
	  	else
	  		test2=test * 10;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cca:	601a      	str	r2, [r3, #0]
 if(mode==1)
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0xdc>
	 rpm_ref = test2;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cda:	6013      	str	r3, [r2, #0]

  /********************************************//**
   *  Wysyłanie informacji o działaniu układu przez port szeregowy
   ***********************************************/

 if(htim == &htim7)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d115      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x110>
 {
	 uint8_t tx_buffer[64];
	 int resp_len = sprintf((char*)tx_buffer, "{ \"RPM\":%d, \"RPM_REF\":%d, \"Duty\":%d }\r", rpm, rpm_ref, Duty); // Creating a message with RPM, RPM_REF, DUTY to send to termial
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f107 000c 	add.w	r0, r7, #12
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4914      	ldr	r1, [pc, #80]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000cfa:	f007 f82d 	bl	8007d58 <siprintf>
 8000cfe:	64f8      	str	r0, [r7, #76]	; 0x4c
	 HAL_UART_Transmit(&huart3, tx_buffer, resp_len, 10);
 8000d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	f107 010c 	add.w	r1, r7, #12
 8000d08:	230a      	movs	r3, #10
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d0c:	f005 faa2 	bl	8006254 <HAL_UART_Transmit>
	 }
 }
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000414 	.word	0x20000414
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	200003c8 	.word	0x200003c8
 8000d24:	20000010 	.word	0x20000010
 8000d28:	2000032c 	.word	0x2000032c
 8000d2c:	20000014 	.word	0x20000014
 8000d30:	20000330 	.word	0x20000330
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000334 	.word	0x20000334
 8000d3c:	200004f8 	.word	0x200004f8
 8000d40:	20000370 	.word	0x20000370
 8000d44:	20000374 	.word	0x20000374
 8000d48:	200004ac 	.word	0x200004ac
 8000d4c:	0800902c 	.word	0x0800902c
 8000d50:	200005cc 	.word	0x200005cc

08000d54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	  /********************************************//**
	   *  Kontrolowanie wartości ustalanej za pomocą terminalu
	   ***********************************************/
	if(mode == 0){
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_UART_RxCpltCallback+0x40>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f083 0301 	eor.w	r3, r3, #1
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00f      	beq.n	8000d8a <HAL_UART_RxCpltCallback+0x36>
  if(huart == &huart3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_UART_RxCpltCallback+0x44>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d104      	bne.n	8000d7c <HAL_UART_RxCpltCallback+0x28>
	  {
      sscanf((char*)&rx_buffer, "%d", &rpm_ref);
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_UART_RxCpltCallback+0x48>)
 8000d74:	490a      	ldr	r1, [pc, #40]	; (8000da0 <HAL_UART_RxCpltCallback+0x4c>)
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_UART_RxCpltCallback+0x50>)
 8000d78:	f007 f80e 	bl	8007d98 <siscanf>
	  }
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_UART_RxCpltCallback+0x54>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <HAL_UART_RxCpltCallback+0x50>)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <HAL_UART_RxCpltCallback+0x44>)
 8000d86:	f005 fae8 	bl	800635a <HAL_UART_Receive_IT>
}
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000334 	.word	0x20000334
 8000d98:	200005cc 	.word	0x200005cc
 8000d9c:	20000010 	.word	0x20000010
 8000da0:	08009054 	.word	0x08009054
 8000da4:	2000034c 	.word	0x2000034c
 8000da8:	2000036c 	.word	0x2000036c

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db0:	f000 ff77 	bl	8001ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db4:	f000 f848 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db8:	f7ff fdec 	bl	8000994 <MX_GPIO_Init>
  MX_ETH_Init();
 8000dbc:	f7ff fce4 	bl	8000788 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dc0:	f000 fda0 	bl	8001904 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dc4:	f000 fe9c 	bl	8001b00 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000dc8:	f000 fa3a 	bl	8001240 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dcc:	f000 fa8c 	bl	80012e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dd0:	f000 fb08 	bl	80013e4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000dd4:	f000 fb56 	bl	8001484 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000dd8:	f000 fb8a 	bl	80014f0 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000ddc:	f7ff fbee 	bl	80005bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000de0:	f000 fd60 	bl	80018a4 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000de4:	f000 fbbc 	bl	8001560 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // Inicjacja timerów //
  HAL_TIM_Base_Start_IT(&htim2);
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <main+0x7c>)
 8000dea:	f003 fba5 	bl	8004538 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	480d      	ldr	r0, [pc, #52]	; (8000e28 <main+0x7c>)
 8000df2:	f003 fdcd 	bl	8004990 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000df6:	2100      	movs	r1, #0
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <main+0x80>)
 8000dfa:	f003 fc77 	bl	80046ec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000dfe:	480c      	ldr	r0, [pc, #48]	; (8000e30 <main+0x84>)
 8000e00:	f003 fb9a 	bl	8004538 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <main+0x88>)
 8000e06:	f003 fb97 	bl	8004538 <HAL_TIM_Base_Start_IT>
  msg_len = strlen("000\r");
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <main+0x8c>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, rx_buffer, msg_len);
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <main+0x8c>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <main+0x90>)
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <main+0x94>)
 8000e1a:	f005 fa9e 	bl	800635a <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000e1e:	213c      	movs	r1, #60	; 0x3c
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <main+0x98>)
 8000e22:	f003 ffab 	bl	8004d7c <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <main+0x7a>
 8000e28:	2000037c 	.word	0x2000037c
 8000e2c:	200003c8 	.word	0x200003c8
 8000e30:	20000414 	.word	0x20000414
 8000e34:	200004ac 	.word	0x200004ac
 8000e38:	2000036c 	.word	0x2000036c
 8000e3c:	2000034c 	.word	0x2000034c
 8000e40:	200005cc 	.word	0x200005cc
 8000e44:	200004f8 	.word	0x200004f8

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f006 ffcc 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e6c:	f002 fa42 	bl	80032f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <SystemClock_Config+0xc8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ebc:	2348      	movs	r3, #72	; 0x48
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fa21 	bl	8003314 <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed8:	f000 f81e 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fcaf 	bl	800385c <HAL_RCC_ClockConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f04:	f000 f808 	bl	8000f18 <Error_Handler>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3750      	adds	r7, #80	; 0x50
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>

08000f22 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}

float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b089      	sub	sp, #36	; 0x24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f2e:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 8000f32:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3e:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000f58:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f80:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fa0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe0:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	dd03      	ble.n	8001000 <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e00f      	b.n	8001020 <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001006:	ed97 7a05 	vldr	s14, [r7, #20]
 800100a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	d503      	bpl.n	800101c <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e001      	b.n	8001020 <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 8001020:	ed97 7a05 	vldr	s14, [r7, #20]
 8001024:	edd7 7a07 	vldr	s15, [r7, #28]
 8001028:	eeb4 7a67 	vcmp.f32	s14, s15
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d013      	beq.n	800105a <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	ed93 7a06 	vldr	s14, [r3, #24]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	edd3 6a01 	vldr	s13, [r3, #4]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edd3 7a04 	vldr	s15, [r3, #16]
 8001044:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001048:	edd7 7a06 	vldr	s15, [r7, #24]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	ee07 3a90 	vmov	s15, r3
}
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x44>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x44>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x44>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x44>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x44>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 fe0a 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM2_IRQHandler+0x10>)
 8001112:	f003 fec1 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000037c 	.word	0x2000037c

08001120 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM3_IRQHandler+0x10>)
 8001126:	f003 feb7 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200003c8 	.word	0x200003c8

08001134 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM4_IRQHandler+0x10>)
 800113a:	f003 fead 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000414 	.word	0x20000414

08001148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART3_IRQHandler+0x10>)
 800114e:	f005 f949 	bl	80063e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200005cc 	.word	0x200005cc

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Tach_Pin);
 8001160:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001164:	f001 ff5a 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001168:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800116c:	f001 ff56 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800117a:	f003 fe8d 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200004f8 	.word	0x200004f8

08001188 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800118e:	f003 fe83 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200004f8 	.word	0x200004f8

0800119c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM7_IRQHandler+0x10>)
 80011a2:	f003 fe79 	bl	8004e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200004ac 	.word	0x200004ac

080011b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <_sbrk+0x5c>)
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_sbrk+0x60>)
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x64>)
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <_sbrk+0x68>)
 80011d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d207      	bcs.n	80011f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e0:	f006 fe10 	bl	8007e04 <__errno>
 80011e4:	4603      	mov	r3, r0
 80011e6:	220c      	movs	r2, #12
 80011e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e009      	b.n	8001204 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <_sbrk+0x64>)
 8001200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20050000 	.word	0x20050000
 8001210:	00000400 	.word	0x00000400
 8001214:	20000378 	.word	0x20000378
 8001218:	20000ca8 	.word	0x20000ca8

0800121c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM2_Init+0xa4>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001266:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM2_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_TIM2_Init+0xa4>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_TIM2_Init+0xa4>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM2_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_TIM2_Init+0xa4>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001286:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_TIM2_Init+0xa4>)
 8001288:	f003 fb2a 	bl	80048e0 <HAL_TIM_IC_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001292:	f7ff fe41 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <MX_TIM2_Init+0xa4>)
 80012a6:	f004 fedb 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012b0:	f7ff fe32 	bl	8000f18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM2_Init+0xa4>)
 80012cc:	f003 ff03 	bl	80050d6 <HAL_TIM_IC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012d6:	f7ff fe1f 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000037c 	.word	0x2000037c

080012e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <MX_TIM3_Init+0xf4>)
 800131c:	4a30      	ldr	r2, [pc, #192]	; (80013e0 <MX_TIM3_Init+0xf8>)
 800131e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <MX_TIM3_Init+0xf4>)
 8001322:	221b      	movs	r2, #27
 8001324:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_TIM3_Init+0xf4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_TIM3_Init+0xf4>)
 800132e:	2263      	movs	r2, #99	; 0x63
 8001330:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM3_Init+0xf4>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_TIM3_Init+0xf4>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <MX_TIM3_Init+0xf4>)
 8001340:	f003 f8a2 	bl	8004488 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800134a:	f7ff fde5 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001358:	4619      	mov	r1, r3
 800135a:	4820      	ldr	r0, [pc, #128]	; (80013dc <MX_TIM3_Init+0xf4>)
 800135c:	f004 f86c 	bl	8005438 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001366:	f7ff fdd7 	bl	8000f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800136a:	481c      	ldr	r0, [pc, #112]	; (80013dc <MX_TIM3_Init+0xf4>)
 800136c:	f003 f95c 	bl	8004628 <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001376:	f7ff fdcf 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM3_Init+0xf4>)
 800138a:	f004 fe69 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001394:	f7ff fdc0 	bl	8000f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 39;
 800139c:	2327      	movs	r3, #39	; 0x27
 800139e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_TIM3_Init+0xf4>)
 80013b0:	f003 ff2e 	bl	8005210 <HAL_TIM_PWM_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013ba:	f7ff fdad 	bl	8000f18 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_TIM3_Init+0xf4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <MX_TIM3_Init+0xf4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0208 	bic.w	r2, r2, #8
 80013cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM3_Init+0xf4>)
 80013d0:	f000 fa30 	bl	8001834 <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3738      	adds	r7, #56	; 0x38
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200003c8 	.word	0x200003c8
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM4_Init+0x98>)
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <MX_TIM4_Init+0x9c>)
 8001406:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <MX_TIM4_Init+0x98>)
 800140a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800140e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_TIM4_Init+0x98>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM4_Init+0x98>)
 8001418:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800141c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_TIM4_Init+0x98>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_TIM4_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <MX_TIM4_Init+0x98>)
 800142c:	f003 f82c 	bl	8004488 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001436:	f7ff fd6f 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	; (800147c <MX_TIM4_Init+0x98>)
 8001448:	f003 fff6 	bl	8005438 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001452:	f7ff fd61 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_TIM4_Init+0x98>)
 8001464:	f004 fdfc 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800146e:	f7ff fd53 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000414 	.word	0x20000414
 8001480:	40000800 	.word	0x40000800

08001484 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_TIM6_Init+0x64>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_TIM6_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_TIM6_Init+0x64>)
 800149c:	2247      	movs	r2, #71	; 0x47
 800149e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_TIM6_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_TIM6_Init+0x64>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_TIM6_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM6_Init+0x64>)
 80014b6:	f002 ffe7 	bl	8004488 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014c0:	f7ff fd2a 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM6_Init+0x64>)
 80014d2:	f004 fdc5 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014dc:	f7ff fd1c 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000460 	.word	0x20000460
 80014ec:	40001000 	.word	0x40001000

080014f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM7_Init+0x68>)
 8001502:	4a16      	ldr	r2, [pc, #88]	; (800155c <MX_TIM7_Init+0x6c>)
 8001504:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <MX_TIM7_Init+0x68>)
 8001508:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800150c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_TIM7_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_TIM7_Init+0x68>)
 8001516:	f242 720f 	movw	r2, #9999	; 0x270f
 800151a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_TIM7_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM7_Init+0x68>)
 8001524:	f002 ffb0 	bl	8004488 <HAL_TIM_Base_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800152e:	f7ff fcf3 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_TIM7_Init+0x68>)
 8001540:	f004 fd8e 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800154a:	f7ff fce5 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200004ac 	.word	0x200004ac
 800155c:	40001400 	.word	0x40001400

08001560 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f006 fc40 	bl	8007df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_TIM8_Init+0xac>)
 8001580:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_TIM8_Init+0xb0>)
 8001582:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_TIM8_Init+0xac>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_TIM8_Init+0xac>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 300;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM8_Init+0xac>)
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_TIM8_Init+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_TIM8_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_TIM8_Init+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015aa:	2303      	movs	r3, #3
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM8_Init+0xac>)
 80015d6:	f003 fb2b 	bl	8004c30 <HAL_TIM_Encoder_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80015e0:	f7ff fc9a 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM8_Init+0xac>)
 80015f6:	f004 fd33 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001600:	f7ff fc8a 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3730      	adds	r7, #48	; 0x30
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200004f8 	.word	0x200004f8
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d12f      	bne.n	8001696 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_TIM_IC_MspInit+0x8c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001666:	2320      	movs	r3, #32
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166e:	2301      	movs	r3, #1
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <HAL_TIM_IC_MspInit+0x90>)
 8001682:	f001 faed 	bl	8002c60 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201c      	movs	r0, #28
 800168c:	f000 fef9 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 ff12 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a30      	ldr	r2, [pc, #192]	; (8001778 <HAL_TIM_Base_MspInit+0xd0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d114      	bne.n	80016e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201d      	movs	r0, #29
 80016d8:	f000 fed3 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016dc:	201d      	movs	r0, #29
 80016de:	f000 feec 	bl	80024ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016e2:	e044      	b.n	800176e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_TIM_Base_MspInit+0xd8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d114      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201e      	movs	r0, #30
 800170c:	f000 feb9 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001710:	201e      	movs	r0, #30
 8001712:	f000 fed2 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001716:	e02a      	b.n	800176e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_TIM_Base_MspInit+0xdc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10c      	bne.n	800173c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	e018      	b.n	800176e <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_TIM_Base_MspInit+0xe0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d113      	bne.n	800176e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_TIM_Base_MspInit+0xd4>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2037      	movs	r0, #55	; 0x37
 8001764:	f000 fe8d 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001768:	2037      	movs	r0, #55	; 0x37
 800176a:	f000 fea6 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40000400 	.word	0x40000400
 800177c:	40023800 	.word	0x40023800
 8001780:	40000800 	.word	0x40000800
 8001784:	40001000 	.word	0x40001000
 8001788:	40001400 	.word	0x40001400

0800178c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_TIM_Encoder_MspInit+0x9c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d137      	bne.n	800181e <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_TIM_Encoder_MspInit+0xa0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017ee:	2303      	movs	r3, #3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_TIM_Encoder_MspInit+0xa4>)
 80017fa:	f001 fa31 	bl	8002c60 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	202b      	movs	r0, #43	; 0x2b
 8001804:	f000 fe3d 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001808:	202b      	movs	r0, #43	; 0x2b
 800180a:	f000 fe56 	bl	80024ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	202c      	movs	r0, #44	; 0x2c
 8001814:	f000 fe35 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001818:	202c      	movs	r0, #44	; 0x2c
 800181a:	f000 fe4e 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	; 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40010400 	.word	0x40010400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020800 	.word	0x40020800

08001834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a11      	ldr	r2, [pc, #68]	; (8001898 <HAL_TIM_MspPostInit+0x64>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d11b      	bne.n	800188e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_MspPostInit+0x68>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_MspPostInit+0x6c>)
 800188a:	f001 f9e9 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <MX_USART2_UART_Init+0x5c>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USART2_UART_Init+0x58>)
 80018e8:	f004 fc66 	bl	80061b8 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018f2:	f7ff fb11 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000544 	.word	0x20000544
 8001900:	40004400 	.word	0x40004400

08001904 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_USART3_UART_Init+0x58>)
 800190a:	4a15      	ldr	r2, [pc, #84]	; (8001960 <MX_USART3_UART_Init+0x5c>)
 800190c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <MX_USART3_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART3_UART_Init+0x58>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART3_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART3_UART_Init+0x58>)
 8001948:	f004 fc36 	bl	80061b8 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001952:	f7ff fae1 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200005cc 	.word	0x200005cc
 8001960:	40004800 	.word	0x40004800

08001964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ae      	sub	sp, #184	; 0xb8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	2284      	movs	r2, #132	; 0x84
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f006 fa35 	bl	8007df4 <memset>
  if(uartHandle->Instance==USART2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_UART_MspInit+0x188>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d15c      	bne.n	8001a4e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001998:	2300      	movs	r3, #0
 800199a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 f981 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019ac:	f7ff fab4 	bl	8000f18 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b49      	ldr	r3, [pc, #292]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	4a48      	ldr	r2, [pc, #288]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6313      	str	r3, [r2, #48]	; 0x30
 80019d4:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	4a42      	ldr	r2, [pc, #264]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6313      	str	r3, [r2, #48]	; 0x30
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f8:	2308      	movs	r3, #8
 80019fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a10:	2307      	movs	r3, #7
 8001a12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4835      	ldr	r0, [pc, #212]	; (8001af4 <HAL_UART_MspInit+0x190>)
 8001a1e:	f001 f91f 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a22:	2320      	movs	r3, #32
 8001a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a44:	4619      	mov	r1, r3
 8001a46:	482c      	ldr	r0, [pc, #176]	; (8001af8 <HAL_UART_MspInit+0x194>)
 8001a48:	f001 f90a 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a4c:	e049      	b.n	8001ae2 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_UART_MspInit+0x198>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d144      	bne.n	8001ae2 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 f91e 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001a72:	f7ff fa51 	bl	8000f18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_UART_MspInit+0x18c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001aca:	4619      	mov	r1, r3
 8001acc:	480a      	ldr	r0, [pc, #40]	; (8001af8 <HAL_UART_MspInit+0x194>)
 8001ace:	f001 f8c7 	bl	8002c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2027      	movs	r0, #39	; 0x27
 8001ad8:	f000 fcd3 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001adc:	2027      	movs	r0, #39	; 0x27
 8001ade:	f000 fcec 	bl	80024ba <HAL_NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	37b8      	adds	r7, #184	; 0xb8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40004400 	.word	0x40004400
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40004800 	.word	0x40004800

08001b00 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b0e:	2206      	movs	r2, #6
 8001b10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b14:	2202      	movs	r2, #2
 8001b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b20:	2202      	movs	r2, #2
 8001b22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b44:	f001 fa8d 	bl	8003062 <HAL_PCD_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f7ff f9e3 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000654 	.word	0x20000654

08001b5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0ac      	sub	sp, #176	; 0xb0
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	2284      	movs	r2, #132	; 0x84
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f006 f939 	bl	8007df4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8a:	d159      	bne.n	8001c40 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 0318 	add.w	r3, r7, #24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 f883 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ba8:	f7ff f9b6 	bl	8000f18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001bc4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bde:	230a      	movs	r3, #10
 8001be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <HAL_PCD_MspInit+0xf0>)
 8001bec:	f001 f838 	bl	8002c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4810      	ldr	r0, [pc, #64]	; (8001c4c <HAL_PCD_MspInit+0xf0>)
 8001c0c:	f001 f828 	bl	8002c60 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c32:	6453      	str	r3, [r2, #68]	; 0x44
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_PCD_MspInit+0xec>)
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c40:	bf00      	nop
 8001c42:	37b0      	adds	r7, #176	; 0xb0
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	; (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff facf 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f006 f8c7 	bl	8007e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff f893 	bl	8000dac <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c94:	080091dc 	.word	0x080091dc
  ldr r2, =_sbss
 8001c98:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c9c:	20000ca8 	.word	0x20000ca8

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>

08001ca2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 fbe0 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f805 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb2:	f7ff f9dd 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fbfb 	bl	80024d6 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 fbc3 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	2000003c 	.word	0x2000003c
 8001d14:	20000044 	.word	0x20000044
 8001d18:	20000040 	.word	0x20000040

08001d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_IncTick+0x20>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x24>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_IncTick+0x24>)
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000044 	.word	0x20000044
 8001d40:	20000b5c 	.word	0x20000b5c

08001d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return uwTick;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_GetTick+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000b5c 	.word	0x20000b5c

08001d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff ffee 	bl	8001d44 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d005      	beq.n	8001d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_Delay+0x44>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	bf00      	nop
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d8f7      	bhi.n	8001d84 <HAL_Delay+0x28>
  {
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000044 	.word	0x20000044

08001da4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e031      	b.n	8001e1e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fc4c 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_ADC_Init+0x84>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f970 	bl	80020d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0e:	e001      	b.n	8001e14 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ffffeefd 	.word	0xffffeefd

08001e2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e136      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x28a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d93a      	bls.n	8001ece <HAL_ADC_ConfigChannel+0xa2>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e60:	d035      	beq.n	8001ece <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68d9      	ldr	r1, [r3, #12]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	3b1e      	subs	r3, #30
 8001e78:	2207      	movs	r2, #7
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a8d      	ldr	r2, [pc, #564]	; (80020c4 <HAL_ADC_ConfigChannel+0x298>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68d9      	ldr	r1, [r3, #12]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	061a      	lsls	r2, r3, #24
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea6:	e035      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4403      	add	r3, r0
 8001ec0:	3b1e      	subs	r3, #30
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ecc:	e022      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	2207      	movs	r2, #7
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	400a      	ands	r2, r1
 8001ef0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	4603      	mov	r3, r0
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4403      	add	r3, r0
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d824      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	221f      	movs	r2, #31
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43da      	mvns	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	3b05      	subs	r3, #5
 8001f58:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
 8001f64:	e04c      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d824      	bhi.n	8001fb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	; 0x23
 8001f80:	221f      	movs	r2, #31
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b23      	subs	r3, #35	; 0x23
 8001faa:	fa00 f203 	lsl.w	r2, r0, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb6:	e023      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b41      	subs	r3, #65	; 0x41
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b41      	subs	r3, #65	; 0x41
 8001ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10a      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002012:	d105      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002014:	4b2d      	ldr	r3, [pc, #180]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 800201a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800201e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10f      	bne.n	800204a <HAL_ADC_ConfigChannel+0x21e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b12      	cmp	r3, #18
 8002030:	d10b      	bne.n	800204a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002038:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800203c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002048:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_ADC_ConfigChannel+0x29c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12b      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x280>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1a      	ldr	r2, [pc, #104]	; (80020c4 <HAL_ADC_ConfigChannel+0x298>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b11      	cmp	r3, #17
 8002064:	d122      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002070:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_ADC_ConfigChannel+0x2a0>)
 8002078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_ADC_ConfigChannel+0x298>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d111      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9a      	lsrs	r2, r3, #18
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800209e:	e002      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	10000012 	.word	0x10000012
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40012300 	.word	0x40012300
 80020d0:	2000003c 	.word	0x2000003c
 80020d4:	431bde83 	.word	0x431bde83

080020d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020e0:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <ADC_Init+0x1ec>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a77      	ldr	r2, [pc, #476]	; (80022c4 <ADC_Init+0x1ec>)
 80020e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <ADC_Init+0x1ec>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4973      	ldr	r1, [pc, #460]	; (80022c4 <ADC_Init+0x1ec>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	021a      	lsls	r2, r3, #8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800212c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <ADC_Init+0x1f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	e00f      	b.n	80021d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0202 	bic.w	r2, r2, #2
 80021e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	005a      	lsls	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800221e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	3b01      	subs	r3, #1
 800222c:	035a      	lsls	r2, r3, #13
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e007      	b.n	8002248 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	3b01      	subs	r3, #1
 8002264:	051a      	lsls	r2, r3, #20
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800227c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800228a:	025a      	lsls	r2, r3, #9
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6899      	ldr	r1, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	029a      	lsls	r2, r3, #10
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40012300 	.word	0x40012300
 80022c8:	0f000001 	.word	0x0f000001

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0000 	.word	0x05fa0000

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fc22 	bl	8001d44 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d008      	beq.n	8002520 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e052      	b.n	80025c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0216 	bic.w	r2, r2, #22
 800252e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800253e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <HAL_DMA_Abort+0x62>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0208 	bic.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	e013      	b.n	800259a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002572:	f7ff fbe7 	bl	8001d44 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b05      	cmp	r3, #5
 800257e:	d90c      	bls.n	800259a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e015      	b.n	80025c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e4      	bne.n	8002572 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	409a      	lsls	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d004      	beq.n	80025ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e00c      	b.n	8002606 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06a      	b.n	80026fc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262c:	2b00      	cmp	r3, #0
 800262e:	d106      	bne.n	800263e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2223      	movs	r2, #35	; 0x23
 8002634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe f8f3 	bl	8000824 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <HAL_ETH_Init+0xf0>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	4a30      	ldr	r2, [pc, #192]	; (8002704 <HAL_ETH_Init+0xf0>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002648:	6453      	str	r3, [r2, #68]	; 0x44
 800264a:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <HAL_ETH_Init+0xf0>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_ETH_Init+0xf4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a2b      	ldr	r2, [pc, #172]	; (8002708 <HAL_ETH_Init+0xf4>)
 800265c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002660:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_ETH_Init+0xf4>)
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4927      	ldr	r1, [pc, #156]	; (8002708 <HAL_ETH_Init+0xf4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_ETH_Init+0xf4>)
 8002672:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800268a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff fb5a 	bl	8001d44 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002692:	e011      	b.n	80026b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002694:	f7ff fb56 	bl	8001d44 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026a2:	d909      	bls.n	80026b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2204      	movs	r2, #4
 80026a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	22e0      	movs	r2, #224	; 0xe0
 80026b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e021      	b.n	80026fc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e4      	bne.n	8002694 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f958 	bl	8002980 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9ff 	bl	8002ad4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fa55 	bl	8002b86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	461a      	mov	r2, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f9bd 	bl	8002a64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2210      	movs	r2, #16
 80026f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800

0800270c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4b51      	ldr	r3, [pc, #324]	; (8002868 <ETH_SetMACConfig+0x15c>)
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7c1b      	ldrb	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <ETH_SetMACConfig+0x28>
 800272e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002732:	e000      	b.n	8002736 <ETH_SetMACConfig+0x2a>
 8002734:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	7c5b      	ldrb	r3, [r3, #17]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <ETH_SetMACConfig+0x38>
 800273e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002742:	e000      	b.n	8002746 <ETH_SetMACConfig+0x3a>
 8002744:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002746:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800274c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	7fdb      	ldrb	r3, [r3, #31]
 8002752:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002754:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800275a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	7f92      	ldrb	r2, [r2, #30]
 8002760:	2a00      	cmp	r2, #0
 8002762:	d102      	bne.n	800276a <ETH_SetMACConfig+0x5e>
 8002764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0x60>
 800276a:	2200      	movs	r2, #0
                        macconf->Speed |
 800276c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	7f1b      	ldrb	r3, [r3, #28]
 8002772:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002774:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800277a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002782:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	f892 2020 	ldrb.w	r2, [r2, #32]
 800278a:	2a00      	cmp	r2, #0
 800278c:	d102      	bne.n	8002794 <ETH_SetMACConfig+0x88>
 800278e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002792:	e000      	b.n	8002796 <ETH_SetMACConfig+0x8a>
 8002794:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002796:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7bdb      	ldrb	r3, [r3, #15]
 800279c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800279e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ae:	4313      	orrs	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7ff fac8 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027e2:	4013      	ands	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d101      	bne.n	80027fa <ETH_SetMACConfig+0xee>
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	e000      	b.n	80027fc <ETH_SetMACConfig+0xf0>
 80027fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002802:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800280a:	2a01      	cmp	r2, #1
 800280c:	d101      	bne.n	8002812 <ETH_SetMACConfig+0x106>
 800280e:	2208      	movs	r2, #8
 8002810:	e000      	b.n	8002814 <ETH_SetMACConfig+0x108>
 8002812:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002814:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800281c:	2a01      	cmp	r2, #1
 800281e:	d101      	bne.n	8002824 <ETH_SetMACConfig+0x118>
 8002820:	2204      	movs	r2, #4
 8002822:	e000      	b.n	8002826 <ETH_SetMACConfig+0x11a>
 8002824:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002826:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800282e:	2a01      	cmp	r2, #1
 8002830:	d101      	bne.n	8002836 <ETH_SetMACConfig+0x12a>
 8002832:	2202      	movs	r2, #2
 8002834:	e000      	b.n	8002838 <ETH_SetMACConfig+0x12c>
 8002836:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002838:	4313      	orrs	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002850:	2001      	movs	r0, #1
 8002852:	f7ff fa83 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	619a      	str	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	ff20810f 	.word	0xff20810f

0800286c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <ETH_SetDMAConfig+0x110>)
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7b1b      	ldrb	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <ETH_SetDMAConfig+0x2c>
 8002892:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002896:	e000      	b.n	800289a <ETH_SetDMAConfig+0x2e>
 8002898:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	7b5b      	ldrb	r3, [r3, #13]
 800289e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	7f52      	ldrb	r2, [r2, #29]
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	d102      	bne.n	80028b0 <ETH_SetDMAConfig+0x44>
 80028aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028ae:	e000      	b.n	80028b2 <ETH_SetDMAConfig+0x46>
 80028b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	7b9b      	ldrb	r3, [r3, #14]
 80028b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	7f1b      	ldrb	r3, [r3, #28]
 80028c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7f9b      	ldrb	r3, [r3, #30]
 80028ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028e0:	4313      	orrs	r3, r2
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f0:	461a      	mov	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff fa2a 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	791b      	ldrb	r3, [r3, #4]
 800291a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002920:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002926:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800292c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002934:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002936:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800293e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002944:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800294e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002952:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002960:	2001      	movs	r0, #1
 8002962:	f7ff f9fb 	bl	8001d5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	f8de3f23 	.word	0xf8de3f23

08002980 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0a6      	sub	sp, #152	; 0x98
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002994:	2300      	movs	r3, #0
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029bc:	2300      	movs	r3, #0
 80029be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fe86 	bl	800270c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ff08 	bl	800286c <ETH_SetDMAConfig>
}
 8002a5c:	bf00      	nop
 8002a5e:	3798      	adds	r7, #152	; 0x98
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3305      	adds	r3, #5
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	3204      	adds	r2, #4
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <ETH_MACAddressConfig+0x68>)
 8002a86:	4413      	add	r3, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3303      	adds	r3, #3
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	061a      	lsls	r2, r3, #24
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <ETH_MACAddressConfig+0x6c>)
 8002ab6:	4413      	add	r3, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6013      	str	r3, [r2, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40028040 	.word	0x40028040
 8002ad0:	40028044 	.word	0x40028044

08002ad4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e03e      	b.n	8002b60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68d9      	ldr	r1, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	3206      	adds	r2, #6
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d80c      	bhi.n	8002b44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e004      	b.n	8002b4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d9bd      	bls.n	8002ae2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e046      	b.n	8002c22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6919      	ldr	r1, [r3, #16]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002bd8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	3212      	adds	r2, #18
 8002bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d80c      	bhi.n	8002c12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6919      	ldr	r1, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	e004      	b.n	8002c1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d9b5      	bls.n	8002b94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	60da      	str	r2, [r3, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e175      	b.n	8002f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8164 	bne.w	8002f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x56>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80be 	beq.w	8002f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	4a65      	ldr	r2, [pc, #404]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df4:	6453      	str	r3, [r2, #68]	; 0x44
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_GPIO_Init+0x324>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e02:	4a61      	ldr	r2, [pc, #388]	; (8002f88 <HAL_GPIO_Init+0x328>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_GPIO_Init+0x32c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d037      	beq.n	8002e9e <HAL_GPIO_Init+0x23e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_GPIO_Init+0x330>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_GPIO_Init+0x23a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <HAL_GPIO_Init+0x334>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d02b      	beq.n	8002e96 <HAL_GPIO_Init+0x236>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_GPIO_Init+0x338>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d025      	beq.n	8002e92 <HAL_GPIO_Init+0x232>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_GPIO_Init+0x33c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01f      	beq.n	8002e8e <HAL_GPIO_Init+0x22e>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a53      	ldr	r2, [pc, #332]	; (8002fa0 <HAL_GPIO_Init+0x340>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d019      	beq.n	8002e8a <HAL_GPIO_Init+0x22a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x344>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_GPIO_Init+0x226>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_GPIO_Init+0x348>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00d      	beq.n	8002e82 <HAL_GPIO_Init+0x222>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_GPIO_Init+0x34c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <HAL_GPIO_Init+0x21e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <HAL_GPIO_Init+0x350>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_GPIO_Init+0x21a>
 8002e76:	2309      	movs	r3, #9
 8002e78:	e012      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	e010      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e00e      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e00c      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e86:	2306      	movs	r3, #6
 8002e88:	e00a      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8a:	2305      	movs	r3, #5
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e8e:	2304      	movs	r3, #4
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_Init+0x240>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002eb0:	4935      	ldr	r1, [pc, #212]	; (8002f88 <HAL_GPIO_Init+0x328>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ee2:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <HAL_GPIO_Init+0x354>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	f67f ae86 	bls.w	8002c80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40020000 	.word	0x40020000
 8002f90:	40020400 	.word	0x40020400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40020c00 	.word	0x40020c00
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40021400 	.word	0x40021400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40021c00 	.word	0x40021c00
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022400 	.word	0x40022400
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	887b      	ldrh	r3, [r7, #2]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e001      	b.n	8002fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	807b      	strh	r3, [r7, #2]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ff8:	787b      	ldrb	r3, [r7, #1]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ffe:	887a      	ldrh	r2, [r7, #2]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003004:	e003      	b.n	800300e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	041a      	lsls	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f806 	bl	800304c <HAL_GPIO_EXTI_Callback>
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003064:	b08f      	sub	sp, #60	; 0x3c
 8003066:	af0a      	add	r7, sp, #40	; 0x28
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e116      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fd64 	bl	8001b5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2203      	movs	r2, #3
 8003098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fbb4 	bl	8007820 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	687e      	ldr	r6, [r7, #4]
 80030c0:	466d      	mov	r5, sp
 80030c2:	f106 0410 	add.w	r4, r6, #16
 80030c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d6:	1d33      	adds	r3, r6, #4
 80030d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f004 fb48 	bl	8007770 <USB_CoreInit>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0d7      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 fba2 	bl	8007842 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e04a      	b.n	800319a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	333d      	adds	r3, #61	; 0x3d
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333c      	adds	r3, #60	; 0x3c
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	b298      	uxth	r0, r3
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3344      	adds	r3, #68	; 0x44
 8003140:	4602      	mov	r2, r0
 8003142:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3340      	adds	r3, #64	; 0x40
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3348      	adds	r3, #72	; 0x48
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334c      	adds	r3, #76	; 0x4c
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3354      	adds	r3, #84	; 0x54
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	3301      	adds	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d3af      	bcc.n	8003104 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e044      	b.n	8003234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d6:	7bfa      	ldrb	r2, [r7, #15]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031e8:	2200      	movs	r2, #0
 80031ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	3301      	adds	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d3b5      	bcc.n	80031aa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	687e      	ldr	r6, [r7, #4]
 8003246:	466d      	mov	r5, sp
 8003248:	f106 0410 	add.w	r4, r6, #16
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003254:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003258:	e885 0003 	stmia.w	r5, {r0, r1}
 800325c:	1d33      	adds	r3, r6, #4
 800325e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f004 fb3b 	bl	80078dc <USB_DevInit>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e014      	b.n	80032a2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f80b 	bl	80032ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fcf9 	bl	8007c92 <USB_DevDisconnect>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	10000003 	.word	0x10000003

080032f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e291      	b.n	800384e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b96      	ldr	r3, [pc, #600]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003344:	4b93      	ldr	r3, [pc, #588]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
 8003350:	4b90      	ldr	r3, [pc, #576]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e26b      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x7a>
 8003380:	4b84      	ldr	r3, [pc, #528]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x9c>
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b7c      	ldr	r3, [pc, #496]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7b      	ldr	r2, [pc, #492]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a72      	ldr	r2, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6b      	ldr	r2, [pc, #428]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fca6 	bl	8001d44 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fca2 	bl	8001d44 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e21f      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fc92 	bl	8001d44 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fc8e 	bl	8001d44 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e20b      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x110>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d069      	beq.n	8003526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b50      	ldr	r3, [pc, #320]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1df      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	493d      	ldr	r1, [pc, #244]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e040      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a38      	ldr	r2, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fc44 	bl	8001d44 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fc40 	bl	8001d44 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1bd      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b30      	ldr	r3, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4929      	ldr	r1, [pc, #164]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e018      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fc20 	bl	8001d44 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fc1c 	bl	8001d44 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e199      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d038      	beq.n	80035a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d019      	beq.n	800356e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe fbfd 	bl	8001d44 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe fbf9 	bl	8001d44 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e176      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x23a>
 800356c:	e01a      	b.n	80035a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe fbe3 	bl	8001d44 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe fbdf 	bl	8001d44 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d903      	bls.n	8003598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e15c      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
 8003594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b91      	ldr	r3, [pc, #580]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ee      	bne.n	8003582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a4 	beq.w	80036fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035da:	4b82      	ldr	r3, [pc, #520]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035e6:	4b7f      	ldr	r3, [pc, #508]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fba7 	bl	8001d44 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fe fba3 	bl	8001d44 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e120      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360c:	4b75      	ldr	r3, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31a>
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x33c>
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x35e>
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a5d      	ldr	r2, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe fb57 	bl	8001d44 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fb53 	bl	8001d44 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ce      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x386>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe fb41 	bl	8001d44 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fb3d 	bl	8001d44 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0b8      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80a4 	beq.w	800384c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d06b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d149      	bne.n	80037ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a30      	ldr	r2, [pc, #192]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe fb0e 	bl	8001d44 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe fb0a 	bl	8001d44 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e087      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	4313      	orrs	r3, r2
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003776:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fade 	bl	8001d44 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fada 	bl	8001d44 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e057      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x478>
 80037aa:	e04f      	b.n	800384c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe fac4 	bl	8001d44 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fac0 	bl	8001d44 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e03d      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4ac>
 80037de:	e035      	b.n	800384c <HAL_RCC_OscConfig+0x538>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x544>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d028      	beq.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d121      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11a      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	4965      	ldr	r1, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe f9f8 	bl	8001d44 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe f9f4 	bl	8001d44 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4922      	ldr	r1, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1d0>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1d4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f954 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08009064 	.word	0x08009064
 8003a2c:	2000003c 	.word	0x2000003c
 8003a30:	20000040 	.word	0x20000040

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b094      	sub	sp, #80	; 0x50
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a40:	2300      	movs	r3, #0
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b79      	ldr	r3, [pc, #484]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80e1 	bhi.w	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e0db      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6c:	e0db      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a72:	e0d8      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4621      	mov	r1, r4
 8003ac0:	1a51      	subs	r1, r2, r1
 8003ac2:	6139      	str	r1, [r7, #16]
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	018a      	lsls	r2, r1, #6
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aec:	4659      	mov	r1, fp
 8003aee:	eb63 0901 	sbc.w	r9, r3, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	eb18 0303 	adds.w	r3, r8, r3
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	462b      	mov	r3, r5
 8003b14:	eb49 0303 	adc.w	r3, r9, r3
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b26:	4629      	mov	r1, r5
 8003b28:	024b      	lsls	r3, r1, #9
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b30:	4621      	mov	r1, r4
 8003b32:	024a      	lsls	r2, r1, #9
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b44:	f7fc fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	e058      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4641      	mov	r1, r8
 8003b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	00eb      	lsls	r3, r5, #3
 8003bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bba:	00e2      	lsls	r2, r4, #3
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18e3      	adds	r3, r4, r3
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf8:	f7fc fb62 	bl	80002c0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3750      	adds	r7, #80	; 0x50
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200

08003c40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	2000003c 	.word	0x2000003c

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08009074 	.word	0x08009074

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08009074 	.word	0x08009074

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d012      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cd0:	4b69      	ldr	r3, [pc, #420]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	4964      	ldr	r1, [pc, #400]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	4959      	ldr	r1, [pc, #356]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d017      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d3e:	4b4e      	ldr	r3, [pc, #312]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	494a      	ldr	r1, [pc, #296]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 808b 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4a39      	ldr	r2, [pc, #228]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6413      	str	r3, [r2, #64]	; 0x40
 8003d98:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003da4:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a34      	ldr	r2, [pc, #208]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db0:	f7fd ffc8 	bl	8001d44 <HAL_GetTick>
 8003db4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd ffc4 	bl	8001d44 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e357      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dca:	4b2c      	ldr	r3, [pc, #176]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd6:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d035      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d02e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e1c:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d114      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd ff8c 	bl	8001d44 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd ff88 	bl	8001d44 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e319      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5e:	d111      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	4901      	ldr	r1, [pc, #4]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
 8003e76:	e00b      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000
 8003e80:	0ffffcff 	.word	0x0ffffcff
 8003e84:	4baa      	ldr	r3, [pc, #680]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4aa9      	ldr	r2, [pc, #676]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e8e:	6093      	str	r3, [r2, #8]
 8003e90:	4ba7      	ldr	r3, [pc, #668]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	49a4      	ldr	r1, [pc, #656]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eae:	4ba0      	ldr	r3, [pc, #640]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb4:	4a9e      	ldr	r2, [pc, #632]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ebe:	4b9c      	ldr	r3, [pc, #624]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	4999      	ldr	r1, [pc, #612]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003edc:	4b94      	ldr	r3, [pc, #592]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eea:	4991      	ldr	r1, [pc, #580]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003efe:	4b8c      	ldr	r3, [pc, #560]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f0c:	4988      	ldr	r1, [pc, #544]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f20:	4b83      	ldr	r3, [pc, #524]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2e:	4980      	ldr	r1, [pc, #512]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4977      	ldr	r1, [pc, #476]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f64:	4b72      	ldr	r3, [pc, #456]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	496f      	ldr	r1, [pc, #444]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f86:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8c:	f023 020c 	bic.w	r2, r3, #12
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f94:	4966      	ldr	r1, [pc, #408]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	495e      	ldr	r1, [pc, #376]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	4955      	ldr	r1, [pc, #340]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fec:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	494d      	ldr	r1, [pc, #308]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	4944      	ldr	r1, [pc, #272]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004030:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403e:	493c      	ldr	r1, [pc, #240]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	4933      	ldr	r1, [pc, #204]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004074:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004082:	492b      	ldr	r1, [pc, #172]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a4:	4922      	ldr	r1, [pc, #136]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b4:	d101      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d6:	4b16      	ldr	r3, [pc, #88]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e4:	4912      	ldr	r1, [pc, #72]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004108:	4909      	ldr	r1, [pc, #36]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d006      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80d9 	beq.w	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004124:	4b02      	ldr	r3, [pc, #8]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a01      	ldr	r2, [pc, #4]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800412e:	e001      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004130:	40023800 	.word	0x40023800
 8004134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004136:	f7fd fe05 	bl	8001d44 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800413e:	f7fd fe01 	bl	8001d44 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e194      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004150:	4b6c      	ldr	r3, [pc, #432]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d021      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004170:	4b64      	ldr	r3, [pc, #400]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004176:	0c1b      	lsrs	r3, r3, #16
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	019a      	lsls	r2, r3, #6
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	061b      	lsls	r3, r3, #24
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	071b      	lsls	r3, r3, #28
 80041a4:	4957      	ldr	r1, [pc, #348]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02e      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d129      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041d8:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041e6:	4b47      	ldr	r3, [pc, #284]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ec:	0f1b      	lsrs	r3, r3, #28
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	019a      	lsls	r2, r3, #6
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	071b      	lsls	r3, r3, #28
 800420c:	493d      	ldr	r1, [pc, #244]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004214:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421a:	f023 021f 	bic.w	r2, r3, #31
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	3b01      	subs	r3, #1
 8004224:	4937      	ldr	r1, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01d      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	0e1b      	lsrs	r3, r3, #24
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424c:	0f1b      	lsrs	r3, r3, #28
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	019a      	lsls	r2, r3, #6
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	431a      	orrs	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	071b      	lsls	r3, r3, #28
 800426c:	4925      	ldr	r1, [pc, #148]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d011      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	019a      	lsls	r2, r3, #6
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	071b      	lsls	r3, r3, #28
 800429c:	4919      	ldr	r1, [pc, #100]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fd fd48 	bl	8001d44 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042b8:	f7fd fd44 	bl	8001d44 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0d7      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 80cd 	bne.w	8004478 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ea:	f7fd fd2b 	bl	8001d44 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f2:	f7fd fd27 	bl	8001d44 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b64      	cmp	r3, #100	; 0x64
 80042fe:	d903      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0ba      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004304:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004314:	d0ed      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004332:	2b00      	cmp	r3, #0
 8004334:	d02e      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d12a      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800433e:	4b51      	ldr	r3, [pc, #324]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800434c:	4b4d      	ldr	r3, [pc, #308]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	0f1b      	lsrs	r3, r3, #28
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	019a      	lsls	r2, r3, #6
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	061b      	lsls	r3, r3, #24
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	071b      	lsls	r3, r3, #28
 8004372:	4944      	ldr	r1, [pc, #272]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800437c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004380:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	493d      	ldr	r1, [pc, #244]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d022      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a8:	d11d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	0e1b      	lsrs	r3, r3, #24
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	0f1b      	lsrs	r3, r3, #28
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	019a      	lsls	r2, r3, #6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	431a      	orrs	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	061b      	lsls	r3, r3, #24
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	4929      	ldr	r1, [pc, #164]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d028      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043f2:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	0e1b      	lsrs	r3, r3, #24
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	019a      	lsls	r2, r3, #6
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	431a      	orrs	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	4917      	ldr	r1, [pc, #92]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4911      	ldr	r1, [pc, #68]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fc78 	bl	8001d44 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004458:	f7fd fc74 	bl	8001d44 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e007      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004476:	d1ef      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800

08004488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e049      	b.n	800452e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd f8fa 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f001 f8e2 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e054      	b.n	80045fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_TIM_Base_Start_IT+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d022      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d01d      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a22      	ldr	r2, [pc, #136]	; (800460c <HAL_TIM_Base_Start_IT+0xd4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d018      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a21      	ldr	r2, [pc, #132]	; (8004610 <HAL_TIM_Base_Start_IT+0xd8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_TIM_Base_Start_IT+0xdc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1e      	ldr	r2, [pc, #120]	; (8004618 <HAL_TIM_Base_Start_IT+0xe0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_TIM_Base_Start_IT+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x80>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1b      	ldr	r2, [pc, #108]	; (8004620 <HAL_TIM_Base_Start_IT+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d115      	bne.n	80045e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_TIM_Base_Start_IT+0xec>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d015      	beq.n	80045f6 <HAL_TIM_Base_Start_IT+0xbe>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d011      	beq.n	80045f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	e008      	b.n	80045f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e000      	b.n	80045f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40010400 	.word	0x40010400
 800461c:	40014000 	.word	0x40014000
 8004620:	40001800 	.word	0x40001800
 8004624:	00010007 	.word	0x00010007

08004628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e049      	b.n	80046ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f841 	bl	80046d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f001 f812 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_TIM_PWM_Start+0x24>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e03c      	b.n	800478a <HAL_TIM_PWM_Start+0x9e>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d109      	bne.n	800472a <HAL_TIM_PWM_Start+0x3e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	e02f      	b.n	800478a <HAL_TIM_PWM_Start+0x9e>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x58>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e022      	b.n	800478a <HAL_TIM_PWM_Start+0x9e>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b0c      	cmp	r3, #12
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x72>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e015      	b.n	800478a <HAL_TIM_PWM_Start+0x9e>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b10      	cmp	r3, #16
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e008      	b.n	800478a <HAL_TIM_PWM_Start+0x9e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e092      	b.n	80048b8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xb6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	e023      	b.n	80047ea <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xc6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b0:	e01b      	b.n	80047ea <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xd6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c0:	e013      	b.n	80047ea <HAL_TIM_PWM_Start+0xfe>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Start+0xe6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d0:	e00b      	b.n	80047ea <HAL_TIM_PWM_Start+0xfe>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xf6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e0:	e003      	b.n	80047ea <HAL_TIM_PWM_Start+0xfe>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fc0e 	bl	8006014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <HAL_TIM_PWM_Start+0x1d4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_TIM_PWM_Start+0x120>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2f      	ldr	r2, [pc, #188]	; (80048c4 <HAL_TIM_PWM_Start+0x1d8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Start+0x124>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_TIM_PWM_Start+0x126>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <HAL_TIM_PWM_Start+0x1d4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d01d      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <HAL_TIM_PWM_Start+0x1dc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a20      	ldr	r2, [pc, #128]	; (80048cc <HAL_TIM_PWM_Start+0x1e0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <HAL_TIM_PWM_Start+0x1e4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_TIM_PWM_Start+0x1d8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <HAL_TIM_PWM_Start+0x1e8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_PWM_Start+0x18a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_TIM_PWM_Start+0x1ec>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d115      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b17      	ldr	r3, [pc, #92]	; (80048dc <HAL_TIM_PWM_Start+0x1f0>)
 800487e:	4013      	ands	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d015      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x1c8>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d011      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	e008      	b.n	80048b4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40001800 	.word	0x40001800
 80048dc:	00010007 	.word	0x00010007

080048e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e049      	b.n	8004986 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc fe84 	bl	8001614 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 feb6 	bl	8005690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Start_IT+0x1e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	e023      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x66>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d104      	bne.n	80049be <HAL_TIM_IC_Start_IT+0x2e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e01b      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x66>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_IC_Start_IT+0x3e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e013      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x66>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d104      	bne.n	80049de <HAL_TIM_IC_Start_IT+0x4e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	e00b      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x66>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_IC_Start_IT+0x5e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e003      	b.n	80049f6 <HAL_TIM_IC_Start_IT+0x66>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <HAL_TIM_IC_Start_IT+0x78>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e013      	b.n	8004a30 <HAL_TIM_IC_Start_IT+0xa0>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d104      	bne.n	8004a18 <HAL_TIM_IC_Start_IT+0x88>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e00b      	b.n	8004a30 <HAL_TIM_IC_Start_IT+0xa0>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d104      	bne.n	8004a28 <HAL_TIM_IC_Start_IT+0x98>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e003      	b.n	8004a30 <HAL_TIM_IC_Start_IT+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a32:	7bbb      	ldrb	r3, [r7, #14]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d102      	bne.n	8004a3e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a38:	7b7b      	ldrb	r3, [r7, #13]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d001      	beq.n	8004a42 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e0e2      	b.n	8004c08 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_IC_Start_IT+0xc2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a50:	e023      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x10a>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_IC_Start_IT+0xd2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	e01b      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x10a>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0xe2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x10a>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0xf2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x10a>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0x102>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x10a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_IC_Start_IT+0x11a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa8:	e013      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x142>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_IC_Start_IT+0x12a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab8:	e00b      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x142>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d104      	bne.n	8004aca <HAL_TIM_IC_Start_IT+0x13a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac8:	e003      	b.n	8004ad2 <HAL_TIM_IC_Start_IT+0x142>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	d841      	bhi.n	8004b5c <HAL_TIM_IC_Start_IT+0x1cc>
 8004ad8:	a201      	add	r2, pc, #4	; (adr r2, 8004ae0 <HAL_TIM_IC_Start_IT+0x150>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b27 	.word	0x08004b27
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b39 	.word	0x08004b39
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b4b 	.word	0x08004b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0202 	orr.w	r2, r2, #2
 8004b22:	60da      	str	r2, [r3, #12]
      break;
 8004b24:	e01d      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0204 	orr.w	r2, r2, #4
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e014      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	60da      	str	r2, [r3, #12]
      break;
 8004b48:	e00b      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0210 	orr.w	r2, r2, #16
 8004b58:	60da      	str	r2, [r3, #12]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d14e      	bne.n	8004c06 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f001 fa4f 	bl	8006014 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a25      	ldr	r2, [pc, #148]	; (8004c10 <HAL_TIM_IC_Start_IT+0x280>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b88:	d01d      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_TIM_IC_Start_IT+0x284>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <HAL_TIM_IC_Start_IT+0x288>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_TIM_IC_Start_IT+0x28c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_TIM_IC_Start_IT+0x290>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_TIM_IC_Start_IT+0x294>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_TIM_IC_Start_IT+0x236>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <HAL_TIM_IC_Start_IT+0x298>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d115      	bne.n	8004bf2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_TIM_IC_Start_IT+0x29c>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b06      	cmp	r3, #6
 8004bd6:	d015      	beq.n	8004c04 <HAL_TIM_IC_Start_IT+0x274>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bde:	d011      	beq.n	8004c04 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf0:	e008      	b.n	8004c04 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e000      	b.n	8004c06 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c04:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40001800 	.word	0x40001800
 8004c2c:	00010007 	.word	0x00010007

08004c30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e08f      	b.n	8004d64 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fc fd97 	bl	800178c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_TIM_Encoder_Init+0x13c>)
 8004c72:	400b      	ands	r3, r1
 8004c74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 fd05 	bl	8005690 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_TIM_Encoder_Init+0x140>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_TIM_Encoder_Init+0x144>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <HAL_TIM_Encoder_Init+0x148>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	011a      	lsls	r2, r3, #4
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	031b      	lsls	r3, r3, #12
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	4313      	orrs	r3, r2
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	fffebff8 	.word	0xfffebff8
 8004d70:	fffffcfc 	.word	0xfffffcfc
 8004d74:	fffff3f3 	.word	0xfffff3f3
 8004d78:	ffff0f0f 	.word	0xffff0f0f

08004d7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004db2:	7b7b      	ldrb	r3, [r7, #13]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d001      	beq.n	8004dbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e069      	b.n	8004e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dcc:	e031      	b.n	8004e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d110      	bne.n	8004df6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d102      	bne.n	8004de0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dda:	7b3b      	ldrb	r3, [r7, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d001      	beq.n	8004de4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e055      	b.n	8004e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df4:	e01d      	b.n	8004e32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d108      	bne.n	8004e0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d105      	bne.n	8004e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e02:	7b7b      	ldrb	r3, [r7, #13]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d102      	bne.n	8004e0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e08:	7b3b      	ldrb	r3, [r7, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d001      	beq.n	8004e12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03e      	b.n	8004e90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_TIM_Encoder_Start+0xc4>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d008      	beq.n	8004e50 <HAL_TIM_Encoder_Start+0xd4>
 8004e3e:	e00f      	b.n	8004e60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f8e3 	bl	8006014 <TIM_CCxChannelCmd>
      break;
 8004e4e:	e016      	b.n	8004e7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2201      	movs	r2, #1
 8004e56:	2104      	movs	r1, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 f8db 	bl	8006014 <TIM_CCxChannelCmd>
      break;
 8004e5e:	e00e      	b.n	8004e7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2201      	movs	r2, #1
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 f8d3 	bl	8006014 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	2104      	movs	r1, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 f8cc 	bl	8006014 <TIM_CCxChannelCmd>
      break;
 8004e7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d122      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11b      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0202 	mvn.w	r2, #2
 8004ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fb fe20 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
 8004ee0:	e005      	b.n	8004eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fbb6 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fbbd 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d122      	bne.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d11b      	bne.n	8004f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0204 	mvn.w	r2, #4
 8004f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fdf6 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
 8004f34:	e005      	b.n	8004f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb8c 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb93 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d122      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d11b      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0208 	mvn.w	r2, #8
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2204      	movs	r2, #4
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fb fdcc 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fb62 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fb69 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d122      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0210 	mvn.w	r2, #16
 8004fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2208      	movs	r2, #8
 8004fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb fda2 	bl	8000b20 <HAL_TIM_IC_CaptureCallback>
 8004fdc:	e005      	b.n	8004fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fb38 	bl	8005654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fb3f 	bl	8005668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0201 	mvn.w	r2, #1
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fb fdf2 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 f8a4 	bl	8006190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	d10e      	bne.n	8005076 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d107      	bne.n	8005076 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f001 f897 	bl	80061a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 faed 	bl	800567c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d10e      	bne.n	80050ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d107      	bne.n	80050ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0220 	mvn.w	r2, #32
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f001 f857 	bl	800617c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e088      	b.n	8005206 <HAL_TIM_IC_ConfigChannel+0x130>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11b      	bne.n	800513a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005112:	f000 fdbb 	bl	8005c8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 020c 	bic.w	r2, r2, #12
 8005124:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6999      	ldr	r1, [r3, #24]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	619a      	str	r2, [r3, #24]
 8005138:	e060      	b.n	80051fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d11c      	bne.n	800517a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005150:	f000 fe3f 	bl	8005dd2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005162:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6999      	ldr	r1, [r3, #24]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	619a      	str	r2, [r3, #24]
 8005178:	e040      	b.n	80051fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005190:	f000 fe8c 	bl	8005eac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 020c 	bic.w	r2, r2, #12
 80051a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69d9      	ldr	r1, [r3, #28]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	61da      	str	r2, [r3, #28]
 80051b6:	e021      	b.n	80051fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d11c      	bne.n	80051f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051ce:	f000 fea9 	bl	8005f24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69d9      	ldr	r1, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	021a      	lsls	r2, r3, #8
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	61da      	str	r2, [r3, #28]
 80051f6:	e001      	b.n	80051fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800522a:	2302      	movs	r3, #2
 800522c:	e0ff      	b.n	800542e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b14      	cmp	r3, #20
 800523a:	f200 80f0 	bhi.w	800541e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800523e:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005299 	.word	0x08005299
 8005248:	0800541f 	.word	0x0800541f
 800524c:	0800541f 	.word	0x0800541f
 8005250:	0800541f 	.word	0x0800541f
 8005254:	080052d9 	.word	0x080052d9
 8005258:	0800541f 	.word	0x0800541f
 800525c:	0800541f 	.word	0x0800541f
 8005260:	0800541f 	.word	0x0800541f
 8005264:	0800531b 	.word	0x0800531b
 8005268:	0800541f 	.word	0x0800541f
 800526c:	0800541f 	.word	0x0800541f
 8005270:	0800541f 	.word	0x0800541f
 8005274:	0800535b 	.word	0x0800535b
 8005278:	0800541f 	.word	0x0800541f
 800527c:	0800541f 	.word	0x0800541f
 8005280:	0800541f 	.word	0x0800541f
 8005284:	0800539d 	.word	0x0800539d
 8005288:	0800541f 	.word	0x0800541f
 800528c:	0800541f 	.word	0x0800541f
 8005290:	0800541f 	.word	0x0800541f
 8005294:	080053dd 	.word	0x080053dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fa96 	bl	80057d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	619a      	str	r2, [r3, #24]
      break;
 80052d6:	e0a5      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fae8 	bl	80058b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]
      break;
 8005318:	e084      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fb3f 	bl	80059a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0208 	orr.w	r2, r2, #8
 8005334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0204 	bic.w	r2, r2, #4
 8005344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
      break;
 8005358:	e064      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fb95 	bl	8005a90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	021a      	lsls	r2, r3, #8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
      break;
 800539a:	e043      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fbcc 	bl	8005b40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0204 	bic.w	r2, r2, #4
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053da:	e023      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fbfe 	bl	8005be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	021a      	lsls	r2, r3, #8
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800541c:	e002      	b.n	8005424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
      break;
 8005422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800542c:	7dfb      	ldrb	r3, [r7, #23]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop

08005438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIM_ConfigClockSource+0x1c>
 8005450:	2302      	movs	r3, #2
 8005452:	e0b4      	b.n	80055be <HAL_TIM_ConfigClockSource+0x186>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_TIM_ConfigClockSource+0x190>)
 8005470:	4013      	ands	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548c:	d03e      	beq.n	800550c <HAL_TIM_ConfigClockSource+0xd4>
 800548e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005492:	f200 8087 	bhi.w	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549a:	f000 8086 	beq.w	80055aa <HAL_TIM_ConfigClockSource+0x172>
 800549e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a2:	d87f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d01a      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xa6>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d87b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d050      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x11a>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d877      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d03c      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0xfa>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d873      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d058      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x13a>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d86f      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d064      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d86b      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d060      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d867      	bhi.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d05c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d05a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x15a>
 80054dc:	e062      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ee:	f000 fd71 	bl	8005fd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
      break;
 800550a:	e04f      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800551c:	f000 fd5a 	bl	8005fd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552e:	609a      	str	r2, [r3, #8]
      break;
 8005530:	e03c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553e:	461a      	mov	r2, r3
 8005540:	f000 fc18 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2150      	movs	r1, #80	; 0x50
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fd27 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 8005550:	e02c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555e:	461a      	mov	r2, r3
 8005560:	f000 fc74 	bl	8005e4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2160      	movs	r1, #96	; 0x60
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fd17 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 8005570:	e01c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fbf8 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fd07 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 8005590:	e00c      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 fcfe 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 80055a2:	e003      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
      break;
 80055a8:	e000      	b.n	80055ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	fffeff88 	.word	0xfffeff88

080055cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d831      	bhi.n	8005644 <HAL_TIM_ReadCapturedValue+0x78>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	08005645 	.word	0x08005645
 80055f0:	08005645 	.word	0x08005645
 80055f4:	08005645 	.word	0x08005645
 80055f8:	08005627 	.word	0x08005627
 80055fc:	08005645 	.word	0x08005645
 8005600:	08005645 	.word	0x08005645
 8005604:	08005645 	.word	0x08005645
 8005608:	08005631 	.word	0x08005631
 800560c:	08005645 	.word	0x08005645
 8005610:	08005645 	.word	0x08005645
 8005614:	08005645 	.word	0x08005645
 8005618:	0800563b 	.word	0x0800563b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	60fb      	str	r3, [r7, #12]

      break;
 8005624:	e00f      	b.n	8005646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	60fb      	str	r3, [r7, #12]

      break;
 800562e:	e00a      	b.n	8005646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	60fb      	str	r3, [r7, #12]

      break;
 8005638:	e005      	b.n	8005646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	60fb      	str	r3, [r7, #12]

      break;
 8005642:	e000      	b.n	8005646 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005644:	bf00      	nop
  }

  return tmpreg;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3d      	ldr	r2, [pc, #244]	; (80057a8 <TIM_Base_SetConfig+0x118>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <TIM_Base_SetConfig+0x11c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3b      	ldr	r2, [pc, #236]	; (80057b0 <TIM_Base_SetConfig+0x120>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d027      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <TIM_Base_SetConfig+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d023      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <TIM_Base_SetConfig+0x11c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01f      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <TIM_Base_SetConfig+0x120>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d017      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a28      	ldr	r2, [pc, #160]	; (80057b8 <TIM_Base_SetConfig+0x128>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a27      	ldr	r2, [pc, #156]	; (80057bc <TIM_Base_SetConfig+0x12c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <TIM_Base_SetConfig+0x130>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <TIM_Base_SetConfig+0x134>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <TIM_Base_SetConfig+0x138>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a23      	ldr	r2, [pc, #140]	; (80057cc <TIM_Base_SetConfig+0x13c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0a      	ldr	r2, [pc, #40]	; (80057a4 <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a0c      	ldr	r2, [pc, #48]	; (80057b4 <TIM_Base_SetConfig+0x124>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	615a      	str	r2, [r3, #20]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40014400 	.word	0x40014400
 80057c0:	40014800 	.word	0x40014800
 80057c4:	40001800 	.word	0x40001800
 80057c8:	40001c00 	.word	0x40001c00
 80057cc:	40002000 	.word	0x40002000

080057d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <TIM_OC1_SetConfig+0xd8>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 0302 	bic.w	r3, r3, #2
 8005818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a21      	ldr	r2, [pc, #132]	; (80058ac <TIM_OC1_SetConfig+0xdc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC1_SetConfig+0x64>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a20      	ldr	r2, [pc, #128]	; (80058b0 <TIM_OC1_SetConfig+0xe0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10c      	bne.n	800584e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0308 	bic.w	r3, r3, #8
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <TIM_OC1_SetConfig+0xdc>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC1_SetConfig+0x8e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <TIM_OC1_SetConfig+0xe0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	fffeff8f 	.word	0xfffeff8f
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40010400 	.word	0x40010400

080058b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0210 	bic.w	r2, r3, #16
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4b2e      	ldr	r3, [pc, #184]	; (8005998 <TIM_OC2_SetConfig+0xe4>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0320 	bic.w	r3, r3, #32
 80058fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a23      	ldr	r2, [pc, #140]	; (800599c <TIM_OC2_SetConfig+0xe8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_OC2_SetConfig+0x68>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a22      	ldr	r2, [pc, #136]	; (80059a0 <TIM_OC2_SetConfig+0xec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10d      	bne.n	8005938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <TIM_OC2_SetConfig+0xe8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_OC2_SetConfig+0x94>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <TIM_OC2_SetConfig+0xec>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d113      	bne.n	8005970 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800594e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	feff8fff 	.word	0xfeff8fff
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <TIM_OC3_SetConfig+0xe0>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a22      	ldr	r2, [pc, #136]	; (8005a88 <TIM_OC3_SetConfig+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC3_SetConfig+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <TIM_OC3_SetConfig+0xe8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10d      	bne.n	8005a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <TIM_OC3_SetConfig+0xe4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d003      	beq.n	8005a36 <TIM_OC3_SetConfig+0x92>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <TIM_OC3_SetConfig+0xe8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d113      	bne.n	8005a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	fffeff8f 	.word	0xfffeff8f
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <TIM_OC4_SetConfig+0xa4>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	031b      	lsls	r3, r3, #12
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <TIM_OC4_SetConfig+0xa8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC4_SetConfig+0x68>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <TIM_OC4_SetConfig+0xac>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d109      	bne.n	8005b0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	feff8fff 	.word	0xfeff8fff
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40010400 	.word	0x40010400

08005b40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <TIM_OC5_SetConfig+0x98>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <TIM_OC5_SetConfig+0x9c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC5_SetConfig+0x5e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <TIM_OC5_SetConfig+0xa0>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d109      	bne.n	8005bb2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	621a      	str	r2, [r3, #32]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	fffeff8f 	.word	0xfffeff8f
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40010400 	.word	0x40010400

08005be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <TIM_OC6_SetConfig+0x9c>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	051b      	lsls	r3, r3, #20
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <TIM_OC6_SetConfig+0xa0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_OC6_SetConfig+0x60>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <TIM_OC6_SetConfig+0xa4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d109      	bne.n	8005c58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	621a      	str	r2, [r3, #32]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	feff8fff 	.word	0xfeff8fff
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40010400 	.word	0x40010400

08005c8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a28      	ldr	r2, [pc, #160]	; (8005d58 <TIM_TI1_SetConfig+0xcc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d017      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a25      	ldr	r2, [pc, #148]	; (8005d5c <TIM_TI1_SetConfig+0xd0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <TIM_TI1_SetConfig+0xd4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a23      	ldr	r2, [pc, #140]	; (8005d64 <TIM_TI1_SetConfig+0xd8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <TIM_TI1_SetConfig+0xdc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <TIM_TI1_SetConfig+0xe0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_TI1_SetConfig+0x66>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <TIM_TI1_SetConfig+0xe4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d101      	bne.n	8005cf6 <TIM_TI1_SetConfig+0x6a>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <TIM_TI1_SetConfig+0x6c>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e003      	b.n	8005d16 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f043 0301 	orr.w	r3, r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 030a 	bic.w	r3, r3, #10
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f003 030a 	and.w	r3, r3, #10
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	40010000 	.word	0x40010000
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40010400 	.word	0x40010400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40001800 	.word	0x40001800

08005d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 030a 	bic.w	r3, r3, #10
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 0210 	bic.w	r2, r3, #16
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	031b      	lsls	r3, r3, #12
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f023 0210 	bic.w	r2, r3, #16
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	031b      	lsls	r3, r3, #12
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0303 	bic.w	r3, r3, #3
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	031b      	lsls	r3, r3, #12
 8005f7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f043 0307 	orr.w	r3, r3, #7
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2201      	movs	r2, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e06d      	b.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a30      	ldr	r2, [pc, #192]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d108      	bne.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d022      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ea:	d01d      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d018      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00e      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d009      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10c      	bne.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800612e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00
 8006174:	40014000 	.word	0x40014000
 8006178:	40001800 	.word	0x40001800

0800617c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e040      	b.n	800624c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fb fbc2 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fbe6 	bl	80069c8 <UART_SetConfig>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e022      	b.n	800624c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fe3e 	bl	8006e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fec5 	bl	8006fd4 <UART_CheckIdleState>
 800624a:	4603      	mov	r3, r0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006268:	2b20      	cmp	r3, #32
 800626a:	d171      	bne.n	8006350 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_UART_Transmit+0x24>
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e06a      	b.n	8006352 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2221      	movs	r2, #33	; 0x21
 8006288:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800628a:	f7fb fd5b 	bl	8001d44 <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a8:	d108      	bne.n	80062bc <HAL_UART_Transmit+0x68>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e003      	b.n	80062c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c4:	e02c      	b.n	8006320 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 feb6 	bl	8007042 <UART_WaitOnFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e038      	b.n	8006352 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	3302      	adds	r3, #2
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e007      	b.n	800630e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	3301      	adds	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1cc      	bne.n	80062c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2200      	movs	r2, #0
 8006334:	2140      	movs	r1, #64	; 0x40
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fe83 	bl	8007042 <UART_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e005      	b.n	8006352 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b08a      	sub	sp, #40	; 0x28
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	4613      	mov	r3, r2
 8006366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636e:	2b20      	cmp	r3, #32
 8006370:	d132      	bne.n	80063d8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_UART_Receive_IT+0x24>
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e02b      	b.n	80063da <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d018      	beq.n	80063c8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	613b      	str	r3, [r7, #16]
   return(result);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	69f9      	ldr	r1, [r7, #28]
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	e841 2300 	strex	r3, r2, [r1]
 80063c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1e6      	bne.n	8006396 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fefe 	bl	80071d0 <UART_Start_Receive_IT>
 80063d4:	4603      	mov	r3, r0
 80063d6:	e000      	b.n	80063da <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80063d8:	2302      	movs	r3, #2
  }
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b0ba      	sub	sp, #232	; 0xe8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800640a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800640e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006412:	4013      	ands	r3, r2
 8006414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d115      	bne.n	800644c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00f      	beq.n	800644c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d009      	beq.n	800644c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8297 	beq.w	8006970 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
      }
      return;
 800644a:	e291      	b.n	8006970 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800644c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8117 	beq.w	8006684 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006466:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_UART_IRQHandler+0x298>)
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 810a 	beq.w	8006684 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <HAL_UART_IRQHandler+0xbc>
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2201      	movs	r2, #1
 800648e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006496:	f043 0201 	orr.w	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d011      	beq.n	80064d0 <HAL_UART_IRQHandler+0xec>
 80064ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2202      	movs	r2, #2
 80064be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c6:	f043 0204 	orr.w	r2, r3, #4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <HAL_UART_IRQHandler+0x11c>
 80064dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2204      	movs	r2, #4
 80064ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f6:	f043 0202 	orr.w	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d017      	beq.n	800653c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00b      	beq.n	800653c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2208      	movs	r2, #8
 800652a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006532:	f043 0208 	orr.w	r2, r3, #8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006544:	2b00      	cmp	r3, #0
 8006546:	d012      	beq.n	800656e <HAL_UART_IRQHandler+0x18a>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800655c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006564:	f043 0220 	orr.w	r2, r3, #32
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 81fd 	beq.w	8006974 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00d      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d04f      	beq.n	8006666 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fec8 	bl	800735c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d141      	bne.n	800665e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006606:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800660a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800661e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1d9      	bne.n	80065da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662a:	2b00      	cmp	r3, #0
 800662c:	d013      	beq.n	8006656 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <HAL_UART_IRQHandler+0x29c>)
 8006634:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb ffc7 	bl	80025ce <HAL_DMA_Abort_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d017      	beq.n	8006676 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	e00f      	b.n	8006676 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9a0 	bl	800699c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	e00b      	b.n	8006676 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f99c 	bl	800699c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e007      	b.n	8006676 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f998 	bl	800699c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006674:	e17e      	b.n	8006974 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006676:	bf00      	nop
    return;
 8006678:	e17c      	b.n	8006974 <HAL_UART_IRQHandler+0x590>
 800667a:	bf00      	nop
 800667c:	04000120 	.word	0x04000120
 8006680:	08007425 	.word	0x08007425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006688:	2b01      	cmp	r3, #1
 800668a:	f040 814c 	bne.w	8006926 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8145 	beq.w	8006926 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 813e 	beq.w	8006926 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2210      	movs	r2, #16
 80066b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b40      	cmp	r3, #64	; 0x40
 80066be:	f040 80b6 	bne.w	800682e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8150 	beq.w	8006978 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066e2:	429a      	cmp	r2, r3
 80066e4:	f080 8148 	bcs.w	8006978 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fc:	f000 8086 	beq.w	800680c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800671c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800672e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1da      	bne.n	8006700 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800675a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3308      	adds	r3, #8
 800676a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800676e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e1      	bne.n	800674a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e3      	bne.n	8006786 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	f023 0310 	bic.w	r3, r3, #16
 80067e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80067f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e4      	bne.n	80067cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	4618      	mov	r0, r3
 8006808:	f7fb fe71 	bl	80024ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800681e:	b29b      	uxth	r3, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	b29b      	uxth	r3, r3
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f8c2 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800682c:	e0a4      	b.n	8006978 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800683a:	b29b      	uxth	r3, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8096 	beq.w	800697c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8091 	beq.w	800697c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800686e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800687c:	647b      	str	r3, [r7, #68]	; 0x44
 800687e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e4      	bne.n	800685a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	623b      	str	r3, [r7, #32]
   return(result);
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068b4:	633a      	str	r2, [r7, #48]	; 0x30
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e3      	bne.n	8006890 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	69b9      	ldr	r1, [r7, #24]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	617b      	str	r3, [r7, #20]
   return(result);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e4      	bne.n	80068dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f846 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006924:	e02a      	b.n	800697c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01c      	beq.n	8006980 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
    }
    return;
 800694e:	e017      	b.n	8006980 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d012      	beq.n	8006982 <HAL_UART_IRQHandler+0x59e>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00c      	beq.n	8006982 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fd71 	bl	8007450 <UART_EndTransmit_IT>
    return;
 800696e:	e008      	b.n	8006982 <HAL_UART_IRQHandler+0x59e>
      return;
 8006970:	bf00      	nop
 8006972:	e006      	b.n	8006982 <HAL_UART_IRQHandler+0x59e>
    return;
 8006974:	bf00      	nop
 8006976:	e004      	b.n	8006982 <HAL_UART_IRQHandler+0x59e>
      return;
 8006978:	bf00      	nop
 800697a:	e002      	b.n	8006982 <HAL_UART_IRQHandler+0x59e>
      return;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <HAL_UART_IRQHandler+0x59e>
    return;
 8006980:	bf00      	nop
  }

}
 8006982:	37e8      	adds	r7, #232	; 0xe8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4ba6      	ldr	r3, [pc, #664]	; (8006c8c <UART_SetConfig+0x2c4>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6979      	ldr	r1, [r7, #20]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a94      	ldr	r2, [pc, #592]	; (8006c90 <UART_SetConfig+0x2c8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d120      	bne.n	8006a86 <UART_SetConfig+0xbe>
 8006a44:	4b93      	ldr	r3, [pc, #588]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d816      	bhi.n	8006a80 <UART_SetConfig+0xb8>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x90>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a75 	.word	0x08006a75
 8006a60:	08006a6f 	.word	0x08006a6f
 8006a64:	08006a7b 	.word	0x08006a7b
 8006a68:	2301      	movs	r3, #1
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e150      	b.n	8006d10 <UART_SetConfig+0x348>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e14d      	b.n	8006d10 <UART_SetConfig+0x348>
 8006a74:	2304      	movs	r3, #4
 8006a76:	77fb      	strb	r3, [r7, #31]
 8006a78:	e14a      	b.n	8006d10 <UART_SetConfig+0x348>
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	77fb      	strb	r3, [r7, #31]
 8006a7e:	e147      	b.n	8006d10 <UART_SetConfig+0x348>
 8006a80:	2310      	movs	r3, #16
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e144      	b.n	8006d10 <UART_SetConfig+0x348>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a83      	ldr	r2, [pc, #524]	; (8006c98 <UART_SetConfig+0x2d0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d132      	bne.n	8006af6 <UART_SetConfig+0x12e>
 8006a90:	4b80      	ldr	r3, [pc, #512]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a96:	f003 030c 	and.w	r3, r3, #12
 8006a9a:	2b0c      	cmp	r3, #12
 8006a9c:	d828      	bhi.n	8006af0 <UART_SetConfig+0x128>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <UART_SetConfig+0xdc>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006af1 	.word	0x08006af1
 8006aac:	08006af1 	.word	0x08006af1
 8006ab0:	08006af1 	.word	0x08006af1
 8006ab4:	08006ae5 	.word	0x08006ae5
 8006ab8:	08006af1 	.word	0x08006af1
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006af1 	.word	0x08006af1
 8006ac4:	08006adf 	.word	0x08006adf
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af1 	.word	0x08006af1
 8006ad4:	08006aeb 	.word	0x08006aeb
 8006ad8:	2300      	movs	r3, #0
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e118      	b.n	8006d10 <UART_SetConfig+0x348>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	e115      	b.n	8006d10 <UART_SetConfig+0x348>
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e112      	b.n	8006d10 <UART_SetConfig+0x348>
 8006aea:	2308      	movs	r3, #8
 8006aec:	77fb      	strb	r3, [r7, #31]
 8006aee:	e10f      	b.n	8006d10 <UART_SetConfig+0x348>
 8006af0:	2310      	movs	r3, #16
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e10c      	b.n	8006d10 <UART_SetConfig+0x348>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <UART_SetConfig+0x2d4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d120      	bne.n	8006b42 <UART_SetConfig+0x17a>
 8006b00:	4b64      	ldr	r3, [pc, #400]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b0a:	2b30      	cmp	r3, #48	; 0x30
 8006b0c:	d013      	beq.n	8006b36 <UART_SetConfig+0x16e>
 8006b0e:	2b30      	cmp	r3, #48	; 0x30
 8006b10:	d814      	bhi.n	8006b3c <UART_SetConfig+0x174>
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d009      	beq.n	8006b2a <UART_SetConfig+0x162>
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d810      	bhi.n	8006b3c <UART_SetConfig+0x174>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <UART_SetConfig+0x15c>
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d006      	beq.n	8006b30 <UART_SetConfig+0x168>
 8006b22:	e00b      	b.n	8006b3c <UART_SetConfig+0x174>
 8006b24:	2300      	movs	r3, #0
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e0f2      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e0ef      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b30:	2304      	movs	r3, #4
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e0ec      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b36:	2308      	movs	r3, #8
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e0e9      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e0e6      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a56      	ldr	r2, [pc, #344]	; (8006ca0 <UART_SetConfig+0x2d8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d120      	bne.n	8006b8e <UART_SetConfig+0x1c6>
 8006b4c:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b56:	2bc0      	cmp	r3, #192	; 0xc0
 8006b58:	d013      	beq.n	8006b82 <UART_SetConfig+0x1ba>
 8006b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b5c:	d814      	bhi.n	8006b88 <UART_SetConfig+0x1c0>
 8006b5e:	2b80      	cmp	r3, #128	; 0x80
 8006b60:	d009      	beq.n	8006b76 <UART_SetConfig+0x1ae>
 8006b62:	2b80      	cmp	r3, #128	; 0x80
 8006b64:	d810      	bhi.n	8006b88 <UART_SetConfig+0x1c0>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <UART_SetConfig+0x1a8>
 8006b6a:	2b40      	cmp	r3, #64	; 0x40
 8006b6c:	d006      	beq.n	8006b7c <UART_SetConfig+0x1b4>
 8006b6e:	e00b      	b.n	8006b88 <UART_SetConfig+0x1c0>
 8006b70:	2300      	movs	r3, #0
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e0cc      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b76:	2302      	movs	r3, #2
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e0c9      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e0c6      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b82:	2308      	movs	r3, #8
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e0c3      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e0c0      	b.n	8006d10 <UART_SetConfig+0x348>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a44      	ldr	r2, [pc, #272]	; (8006ca4 <UART_SetConfig+0x2dc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d125      	bne.n	8006be4 <UART_SetConfig+0x21c>
 8006b98:	4b3e      	ldr	r3, [pc, #248]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba6:	d017      	beq.n	8006bd8 <UART_SetConfig+0x210>
 8006ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bac:	d817      	bhi.n	8006bde <UART_SetConfig+0x216>
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb2:	d00b      	beq.n	8006bcc <UART_SetConfig+0x204>
 8006bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb8:	d811      	bhi.n	8006bde <UART_SetConfig+0x216>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <UART_SetConfig+0x1fe>
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc2:	d006      	beq.n	8006bd2 <UART_SetConfig+0x20a>
 8006bc4:	e00b      	b.n	8006bde <UART_SetConfig+0x216>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e0a1      	b.n	8006d10 <UART_SetConfig+0x348>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e09e      	b.n	8006d10 <UART_SetConfig+0x348>
 8006bd2:	2304      	movs	r3, #4
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e09b      	b.n	8006d10 <UART_SetConfig+0x348>
 8006bd8:	2308      	movs	r3, #8
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e098      	b.n	8006d10 <UART_SetConfig+0x348>
 8006bde:	2310      	movs	r3, #16
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e095      	b.n	8006d10 <UART_SetConfig+0x348>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <UART_SetConfig+0x2e0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d125      	bne.n	8006c3a <UART_SetConfig+0x272>
 8006bee:	4b29      	ldr	r3, [pc, #164]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bfc:	d017      	beq.n	8006c2e <UART_SetConfig+0x266>
 8006bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c02:	d817      	bhi.n	8006c34 <UART_SetConfig+0x26c>
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d00b      	beq.n	8006c22 <UART_SetConfig+0x25a>
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d811      	bhi.n	8006c34 <UART_SetConfig+0x26c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <UART_SetConfig+0x254>
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d006      	beq.n	8006c28 <UART_SetConfig+0x260>
 8006c1a:	e00b      	b.n	8006c34 <UART_SetConfig+0x26c>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e076      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c22:	2302      	movs	r3, #2
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e073      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c28:	2304      	movs	r3, #4
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e070      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	77fb      	strb	r3, [r7, #31]
 8006c32:	e06d      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c34:	2310      	movs	r3, #16
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e06a      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1b      	ldr	r2, [pc, #108]	; (8006cac <UART_SetConfig+0x2e4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d138      	bne.n	8006cb6 <UART_SetConfig+0x2ee>
 8006c44:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <UART_SetConfig+0x2cc>)
 8006c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c52:	d017      	beq.n	8006c84 <UART_SetConfig+0x2bc>
 8006c54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c58:	d82a      	bhi.n	8006cb0 <UART_SetConfig+0x2e8>
 8006c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5e:	d00b      	beq.n	8006c78 <UART_SetConfig+0x2b0>
 8006c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c64:	d824      	bhi.n	8006cb0 <UART_SetConfig+0x2e8>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <UART_SetConfig+0x2aa>
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6e:	d006      	beq.n	8006c7e <UART_SetConfig+0x2b6>
 8006c70:	e01e      	b.n	8006cb0 <UART_SetConfig+0x2e8>
 8006c72:	2300      	movs	r3, #0
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e04b      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e048      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e045      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c84:	2308      	movs	r3, #8
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e042      	b.n	8006d10 <UART_SetConfig+0x348>
 8006c8a:	bf00      	nop
 8006c8c:	efff69f3 	.word	0xefff69f3
 8006c90:	40011000 	.word	0x40011000
 8006c94:	40023800 	.word	0x40023800
 8006c98:	40004400 	.word	0x40004400
 8006c9c:	40004800 	.word	0x40004800
 8006ca0:	40004c00 	.word	0x40004c00
 8006ca4:	40005000 	.word	0x40005000
 8006ca8:	40011400 	.word	0x40011400
 8006cac:	40007800 	.word	0x40007800
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e02c      	b.n	8006d10 <UART_SetConfig+0x348>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a72      	ldr	r2, [pc, #456]	; (8006e84 <UART_SetConfig+0x4bc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d125      	bne.n	8006d0c <UART_SetConfig+0x344>
 8006cc0:	4b71      	ldr	r3, [pc, #452]	; (8006e88 <UART_SetConfig+0x4c0>)
 8006cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cce:	d017      	beq.n	8006d00 <UART_SetConfig+0x338>
 8006cd0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006cd4:	d817      	bhi.n	8006d06 <UART_SetConfig+0x33e>
 8006cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cda:	d00b      	beq.n	8006cf4 <UART_SetConfig+0x32c>
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	d811      	bhi.n	8006d06 <UART_SetConfig+0x33e>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <UART_SetConfig+0x326>
 8006ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cea:	d006      	beq.n	8006cfa <UART_SetConfig+0x332>
 8006cec:	e00b      	b.n	8006d06 <UART_SetConfig+0x33e>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e00d      	b.n	8006d10 <UART_SetConfig+0x348>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e00a      	b.n	8006d10 <UART_SetConfig+0x348>
 8006cfa:	2304      	movs	r3, #4
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e007      	b.n	8006d10 <UART_SetConfig+0x348>
 8006d00:	2308      	movs	r3, #8
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e004      	b.n	8006d10 <UART_SetConfig+0x348>
 8006d06:	2310      	movs	r3, #16
 8006d08:	77fb      	strb	r3, [r7, #31]
 8006d0a:	e001      	b.n	8006d10 <UART_SetConfig+0x348>
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	d15b      	bne.n	8006dd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d1a:	7ffb      	ldrb	r3, [r7, #31]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d828      	bhi.n	8006d72 <UART_SetConfig+0x3aa>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x360>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d55 	.word	0x08006d55
 8006d30:	08006d5d 	.word	0x08006d5d
 8006d34:	08006d73 	.word	0x08006d73
 8006d38:	08006d63 	.word	0x08006d63
 8006d3c:	08006d73 	.word	0x08006d73
 8006d40:	08006d73 	.word	0x08006d73
 8006d44:	08006d73 	.word	0x08006d73
 8006d48:	08006d6b 	.word	0x08006d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4c:	f7fc ff84 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8006d50:	61b8      	str	r0, [r7, #24]
        break;
 8006d52:	e013      	b.n	8006d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d54:	f7fc ff94 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8006d58:	61b8      	str	r0, [r7, #24]
        break;
 8006d5a:	e00f      	b.n	8006d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d5c:	4b4b      	ldr	r3, [pc, #300]	; (8006e8c <UART_SetConfig+0x4c4>)
 8006d5e:	61bb      	str	r3, [r7, #24]
        break;
 8006d60:	e00c      	b.n	8006d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d62:	f7fc fe67 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8006d66:	61b8      	str	r0, [r7, #24]
        break;
 8006d68:	e008      	b.n	8006d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6e:	61bb      	str	r3, [r7, #24]
        break;
 8006d70:	e004      	b.n	8006d7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	77bb      	strb	r3, [r7, #30]
        break;
 8006d7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d074      	beq.n	8006e6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	005a      	lsls	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	085b      	lsrs	r3, r3, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b0f      	cmp	r3, #15
 8006d9c:	d916      	bls.n	8006dcc <UART_SetConfig+0x404>
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d212      	bcs.n	8006dcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f023 030f 	bic.w	r3, r3, #15
 8006dae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	89fb      	ldrh	r3, [r7, #14]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	89fa      	ldrh	r2, [r7, #14]
 8006dc8:	60da      	str	r2, [r3, #12]
 8006dca:	e04f      	b.n	8006e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	77bb      	strb	r3, [r7, #30]
 8006dd0:	e04c      	b.n	8006e6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dd2:	7ffb      	ldrb	r3, [r7, #31]
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d828      	bhi.n	8006e2a <UART_SetConfig+0x462>
 8006dd8:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <UART_SetConfig+0x418>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e15 	.word	0x08006e15
 8006dec:	08006e2b 	.word	0x08006e2b
 8006df0:	08006e1b 	.word	0x08006e1b
 8006df4:	08006e2b 	.word	0x08006e2b
 8006df8:	08006e2b 	.word	0x08006e2b
 8006dfc:	08006e2b 	.word	0x08006e2b
 8006e00:	08006e23 	.word	0x08006e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e04:	f7fc ff28 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8006e08:	61b8      	str	r0, [r7, #24]
        break;
 8006e0a:	e013      	b.n	8006e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0c:	f7fc ff38 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8006e10:	61b8      	str	r0, [r7, #24]
        break;
 8006e12:	e00f      	b.n	8006e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <UART_SetConfig+0x4c4>)
 8006e16:	61bb      	str	r3, [r7, #24]
        break;
 8006e18:	e00c      	b.n	8006e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e1a:	f7fc fe0b 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8006e1e:	61b8      	str	r0, [r7, #24]
        break;
 8006e20:	e008      	b.n	8006e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e26:	61bb      	str	r3, [r7, #24]
        break;
 8006e28:	e004      	b.n	8006e34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	77bb      	strb	r3, [r7, #30]
        break;
 8006e32:	bf00      	nop
    }

    if (pclk != 0U)
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d018      	beq.n	8006e6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	085a      	lsrs	r2, r3, #1
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	441a      	add	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b0f      	cmp	r3, #15
 8006e52:	d909      	bls.n	8006e68 <UART_SetConfig+0x4a0>
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5a:	d205      	bcs.n	8006e68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	e001      	b.n	8006e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e78:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40007c00 	.word	0x40007c00
 8006e88:	40023800 	.word	0x40023800
 8006e8c:	00f42400 	.word	0x00f42400

08006e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f8e:	d10a      	bne.n	8006fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	605a      	str	r2, [r3, #4]
  }
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fe4:	f7fa feae 	bl	8001d44 <HAL_GetTick>
 8006fe8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d10e      	bne.n	8007016 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f81b 	bl	8007042 <UART_WaitOnFlagUntilTimeout>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e011      	b.n	800703a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b09c      	sub	sp, #112	; 0x70
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	603b      	str	r3, [r7, #0]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007052:	e0a7      	b.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705a:	f000 80a3 	beq.w	80071a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fa fe71 	bl	8001d44 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <UART_WaitOnFlagUntilTimeout+0x32>
 800706e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007070:	2b00      	cmp	r3, #0
 8007072:	d13f      	bne.n	80070f4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007084:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007088:	667b      	str	r3, [r7, #100]	; 0x64
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007094:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e6      	bne.n	8007074 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	663b      	str	r3, [r7, #96]	; 0x60
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80070c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e068      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d050      	beq.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800710c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007110:	d148      	bne.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800711a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
 800713c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e6      	bne.n	800711c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	613b      	str	r3, [r7, #16]
   return(result);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	66bb      	str	r3, [r7, #104]	; 0x68
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800716e:	623a      	str	r2, [r7, #32]
 8007170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	69f9      	ldr	r1, [r7, #28]
 8007174:	6a3a      	ldr	r2, [r7, #32]
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	61bb      	str	r3, [r7, #24]
   return(result);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e010      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4013      	ands	r3, r2
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	429a      	cmp	r2, r3
 80071c0:	f43f af48 	beq.w	8007054 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3770      	adds	r7, #112	; 0x70
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b097      	sub	sp, #92	; 0x5c
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d10e      	bne.n	8007222 <UART_Start_Receive_IT+0x52>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <UART_Start_Receive_IT+0x48>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007216:	e02d      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	22ff      	movs	r2, #255	; 0xff
 800721c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007220:	e028      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10d      	bne.n	8007246 <UART_Start_Receive_IT+0x76>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <UART_Start_Receive_IT+0x6c>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	; 0xff
 8007236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800723a:	e01b      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	227f      	movs	r2, #127	; 0x7f
 8007240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007244:	e016      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724e:	d10d      	bne.n	800726c <UART_Start_Receive_IT+0x9c>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <UART_Start_Receive_IT+0x92>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	227f      	movs	r2, #127	; 0x7f
 800725c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007260:	e008      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	223f      	movs	r2, #63	; 0x3f
 8007266:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800726a:	e003      	b.n	8007274 <UART_Start_Receive_IT+0xa4>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	; 0x22
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	e853 3f00 	ldrex	r3, [r3]
 8007292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	657b      	str	r3, [r7, #84]	; 0x54
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3308      	adds	r3, #8
 80072a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80072a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e5      	bne.n	8007284 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c0:	d107      	bne.n	80072d2 <UART_Start_Receive_IT+0x102>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <UART_Start_Receive_IT+0x184>)
 80072ce:	669a      	str	r2, [r3, #104]	; 0x68
 80072d0:	e002      	b.n	80072d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <UART_Start_Receive_IT+0x188>)
 80072d6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d019      	beq.n	8007314 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_Start_Receive_IT+0x110>
 8007312:	e018      	b.n	8007346 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	613b      	str	r3, [r7, #16]
   return(result);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f043 0320 	orr.w	r3, r3, #32
 8007328:	653b      	str	r3, [r7, #80]	; 0x50
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	69f9      	ldr	r1, [r7, #28]
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e6      	bne.n	8007314 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	375c      	adds	r7, #92	; 0x5c
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	0800760b 	.word	0x0800760b
 8007358:	080074a5 	.word	0x080074a5

0800735c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b095      	sub	sp, #84	; 0x54
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007382:	643b      	str	r3, [r7, #64]	; 0x40
 8007384:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e6      	bne.n	8007364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d118      	bne.n	8007404 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 0310 	bic.w	r3, r3, #16
 80073e6:	647b      	str	r3, [r7, #68]	; 0x44
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	613b      	str	r3, [r7, #16]
   return(result);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007418:	bf00      	nop
 800741a:	3754      	adds	r7, #84	; 0x54
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7ff faaa 	bl	800699c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60bb      	str	r3, [r7, #8]
   return(result);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6979      	ldr	r1, [r7, #20]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e6      	bne.n	8007458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fa76 	bl	8006988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749c:	bf00      	nop
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b096      	sub	sp, #88	; 0x58
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074bc:	2b22      	cmp	r3, #34	; 0x22
 80074be:	f040 8098 	bne.w	80075f2 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074cc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80074d0:	b2d9      	uxtb	r1, r3
 80074d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074dc:	400a      	ands	r2, r1
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d17b      	bne.n	8007602 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800751a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800751e:	653b      	str	r3, [r7, #80]	; 0x50
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007528:	647b      	str	r3, [r7, #68]	; 0x44
 800752a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800752e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e6      	bne.n	800750a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	623b      	str	r3, [r7, #32]
   return(result);
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	f023 0301 	bic.w	r3, r3, #1
 8007552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3308      	adds	r3, #8
 800755a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800755c:	633a      	str	r2, [r7, #48]	; 0x30
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e5      	bne.n	800753c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007588:	2b01      	cmp	r3, #1
 800758a:	d12e      	bne.n	80075ea <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0310 	bic.w	r3, r3, #16
 80075a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	69b9      	ldr	r1, [r7, #24]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	617b      	str	r3, [r7, #20]
   return(result);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d103      	bne.n	80075da <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2210      	movs	r2, #16
 80075d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff f9e4 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075e8:	e00b      	b.n	8007602 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7f9 fbb2 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 80075f0:	e007      	b.n	8007602 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0208 	orr.w	r2, r2, #8
 8007600:	619a      	str	r2, [r3, #24]
}
 8007602:	bf00      	nop
 8007604:	3758      	adds	r7, #88	; 0x58
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b096      	sub	sp, #88	; 0x58
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007618:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007622:	2b22      	cmp	r3, #34	; 0x22
 8007624:	f040 8098 	bne.w	8007758 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007638:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800763c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007640:	4013      	ands	r3, r2
 8007642:	b29a      	uxth	r2, r3
 8007644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007646:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	1c9a      	adds	r2, r3, #2
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d17b      	bne.n	8007768 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
 8007690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d12e      	bne.n	8007750 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	60bb      	str	r3, [r7, #8]
   return(result);
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f023 0310 	bic.w	r3, r3, #16
 800770c:	647b      	str	r3, [r7, #68]	; 0x44
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007716:	61bb      	str	r3, [r7, #24]
 8007718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6979      	ldr	r1, [r7, #20]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e6      	bne.n	80076f8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b10      	cmp	r3, #16
 8007736:	d103      	bne.n	8007740 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2210      	movs	r2, #16
 800773e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff f931 	bl	80069b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800774e:	e00b      	b.n	8007768 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7f9 faff 	bl	8000d54 <HAL_UART_RxCpltCallback>
}
 8007756:	e007      	b.n	8007768 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0208 	orr.w	r2, r2, #8
 8007766:	619a      	str	r2, [r3, #24]
}
 8007768:	bf00      	nop
 800776a:	3758      	adds	r7, #88	; 0x58
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007770:	b084      	sub	sp, #16
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	f107 001c 	add.w	r0, r7, #28
 800777e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	2b01      	cmp	r3, #1
 8007786:	d120      	bne.n	80077ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	4b20      	ldr	r3, [pc, #128]	; (800781c <USB_CoreInit+0xac>)
 800779a:	4013      	ands	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d105      	bne.n	80077be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa96 	bl	8007cf0 <USB_CoreReset>
 80077c4:	4603      	mov	r3, r0
 80077c6:	73fb      	strb	r3, [r7, #15]
 80077c8:	e010      	b.n	80077ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa8a 	bl	8007cf0 <USB_CoreReset>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d10b      	bne.n	800780a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f043 0206 	orr.w	r2, r3, #6
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f043 0220 	orr.w	r2, r3, #32
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007816:	b004      	add	sp, #16
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	ffbdffbf 	.word	0xffbdffbf

08007820 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f023 0201 	bic.w	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d115      	bne.n	8007890 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007870:	2001      	movs	r0, #1
 8007872:	f7fa fa73 	bl	8001d5c <HAL_Delay>
      ms++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa29 	bl	8007cd4 <USB_GetMode>
 8007882:	4603      	mov	r3, r0
 8007884:	2b01      	cmp	r3, #1
 8007886:	d01e      	beq.n	80078c6 <USB_SetCurrentMode+0x84>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b31      	cmp	r3, #49	; 0x31
 800788c:	d9f0      	bls.n	8007870 <USB_SetCurrentMode+0x2e>
 800788e:	e01a      	b.n	80078c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d115      	bne.n	80078c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80078a2:	2001      	movs	r0, #1
 80078a4:	f7fa fa5a 	bl	8001d5c <HAL_Delay>
      ms++;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3301      	adds	r3, #1
 80078ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa10 	bl	8007cd4 <USB_GetMode>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <USB_SetCurrentMode+0x84>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b31      	cmp	r3, #49	; 0x31
 80078be:	d9f0      	bls.n	80078a2 <USB_SetCurrentMode+0x60>
 80078c0:	e001      	b.n	80078c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e005      	b.n	80078d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b32      	cmp	r3, #50	; 0x32
 80078ca:	d101      	bne.n	80078d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078dc:	b084      	sub	sp, #16
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	e009      	b.n	8007910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3340      	adds	r3, #64	; 0x40
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	2200      	movs	r2, #0
 8007908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3301      	adds	r3, #1
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b0e      	cmp	r3, #14
 8007914:	d9f2      	bls.n	80078fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11c      	bne.n	8007956 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800792a:	f043 0302 	orr.w	r3, r3, #2
 800792e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007934:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e005      	b.n	8007962 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007968:	461a      	mov	r2, r3
 800796a:	2300      	movs	r3, #0
 800796c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007974:	4619      	mov	r1, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800797c:	461a      	mov	r2, r3
 800797e:	680b      	ldr	r3, [r1, #0]
 8007980:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10c      	bne.n	80079a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d104      	bne.n	8007998 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800798e:	2100      	movs	r1, #0
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f965 	bl	8007c60 <USB_SetDevSpeed>
 8007996:	e008      	b.n	80079aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007998:	2101      	movs	r1, #1
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f960 	bl	8007c60 <USB_SetDevSpeed>
 80079a0:	e003      	b.n	80079aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079a2:	2103      	movs	r1, #3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f95b 	bl	8007c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079aa:	2110      	movs	r1, #16
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8f3 	bl	8007b98 <USB_FlushTxFifo>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f91f 	bl	8007c00 <USB_FlushRxFifo>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	461a      	mov	r2, r3
 80079d4:	2300      	movs	r3, #0
 80079d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079de:	461a      	mov	r2, r3
 80079e0:	2300      	movs	r3, #0
 80079e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	461a      	mov	r2, r3
 80079ec:	2300      	movs	r3, #0
 80079ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	e043      	b.n	8007a7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a0c:	d118      	bne.n	8007a40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a20:	461a      	mov	r2, r3
 8007a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	e013      	b.n	8007a52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	461a      	mov	r2, r3
 8007a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e008      	b.n	8007a52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	461a      	mov	r2, r3
 8007a72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3b7      	bcc.n	80079f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	613b      	str	r3, [r7, #16]
 8007a8a:	e043      	b.n	8007b14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aa2:	d118      	bne.n	8007ad6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e013      	b.n	8007ae8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	e008      	b.n	8007ae8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	461a      	mov	r2, r3
 8007af6:	2300      	movs	r3, #0
 8007af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	461a      	mov	r2, r3
 8007b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3301      	adds	r3, #1
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d3b7      	bcc.n	8007a8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007b3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f043 0210 	orr.w	r2, r3, #16
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <USB_DevInit+0x2b4>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f043 0208 	orr.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d105      	bne.n	8007b80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <USB_DevInit+0x2b8>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	4770      	bx	lr
 8007b90:	803c3800 	.word	0x803c3800
 8007b94:	40000004 	.word	0x40000004

08007b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <USB_FlushTxFifo+0x64>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d901      	bls.n	8007bb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e01b      	b.n	8007bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	daf2      	bge.n	8007ba6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	019b      	lsls	r3, r3, #6
 8007bc8:	f043 0220 	orr.w	r2, r3, #32
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <USB_FlushTxFifo+0x64>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e006      	b.n	8007bf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d0f0      	beq.n	8007bd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	00030d40 	.word	0x00030d40

08007c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4a11      	ldr	r2, [pc, #68]	; (8007c5c <USB_FlushRxFifo+0x5c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e018      	b.n	8007c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	daf2      	bge.n	8007c0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2210      	movs	r2, #16
 8007c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <USB_FlushRxFifo+0x5c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e006      	b.n	8007c50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	d0f0      	beq.n	8007c30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c80:	4313      	orrs	r3, r2
 8007c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b085      	sub	sp, #20
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cac:	f023 0303 	bic.w	r3, r3, #3
 8007cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cc0:	f043 0302 	orr.w	r3, r3, #2
 8007cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <USB_CoreReset+0x64>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d901      	bls.n	8007d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e01b      	b.n	8007d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	daf2      	bge.n	8007cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <USB_CoreReset+0x64>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d901      	bls.n	8007d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e006      	b.n	8007d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d0f0      	beq.n	8007d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	00030d40 	.word	0x00030d40

08007d58 <siprintf>:
 8007d58:	b40e      	push	{r1, r2, r3}
 8007d5a:	b500      	push	{lr}
 8007d5c:	b09c      	sub	sp, #112	; 0x70
 8007d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d60:	9002      	str	r0, [sp, #8]
 8007d62:	9006      	str	r0, [sp, #24]
 8007d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d68:	4809      	ldr	r0, [pc, #36]	; (8007d90 <siprintf+0x38>)
 8007d6a:	9107      	str	r1, [sp, #28]
 8007d6c:	9104      	str	r1, [sp, #16]
 8007d6e:	4909      	ldr	r1, [pc, #36]	; (8007d94 <siprintf+0x3c>)
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	9105      	str	r1, [sp, #20]
 8007d76:	6800      	ldr	r0, [r0, #0]
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	a902      	add	r1, sp, #8
 8007d7c:	f000 f9c0 	bl	8008100 <_svfiprintf_r>
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	b01c      	add	sp, #112	; 0x70
 8007d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d8c:	b003      	add	sp, #12
 8007d8e:	4770      	bx	lr
 8007d90:	20000094 	.word	0x20000094
 8007d94:	ffff0208 	.word	0xffff0208

08007d98 <siscanf>:
 8007d98:	b40e      	push	{r1, r2, r3}
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	b09f      	sub	sp, #124	; 0x7c
 8007d9e:	ac21      	add	r4, sp, #132	; 0x84
 8007da0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007da4:	f854 2b04 	ldr.w	r2, [r4], #4
 8007da8:	9201      	str	r2, [sp, #4]
 8007daa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007dae:	9004      	str	r0, [sp, #16]
 8007db0:	9008      	str	r0, [sp, #32]
 8007db2:	f7f8 fa2d 	bl	8000210 <strlen>
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <siscanf+0x50>)
 8007db8:	9005      	str	r0, [sp, #20]
 8007dba:	9009      	str	r0, [sp, #36]	; 0x24
 8007dbc:	930d      	str	r3, [sp, #52]	; 0x34
 8007dbe:	480b      	ldr	r0, [pc, #44]	; (8007dec <siscanf+0x54>)
 8007dc0:	9a01      	ldr	r2, [sp, #4]
 8007dc2:	6800      	ldr	r0, [r0, #0]
 8007dc4:	9403      	str	r4, [sp, #12]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9311      	str	r3, [sp, #68]	; 0x44
 8007dca:	9316      	str	r3, [sp, #88]	; 0x58
 8007dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dd0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007dd4:	a904      	add	r1, sp, #16
 8007dd6:	4623      	mov	r3, r4
 8007dd8:	f000 faea 	bl	80083b0 <__ssvfiscanf_r>
 8007ddc:	b01f      	add	sp, #124	; 0x7c
 8007dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de2:	b003      	add	sp, #12
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	08007df1 	.word	0x08007df1
 8007dec:	20000094 	.word	0x20000094

08007df0 <__seofread>:
 8007df0:	2000      	movs	r0, #0
 8007df2:	4770      	bx	lr

08007df4 <memset>:
 8007df4:	4402      	add	r2, r0
 8007df6:	4603      	mov	r3, r0
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <__errno>:
 8007e04:	4b01      	ldr	r3, [pc, #4]	; (8007e0c <__errno+0x8>)
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20000094 	.word	0x20000094

08007e10 <__libc_init_array>:
 8007e10:	b570      	push	{r4, r5, r6, lr}
 8007e12:	4d0d      	ldr	r5, [pc, #52]	; (8007e48 <__libc_init_array+0x38>)
 8007e14:	4c0d      	ldr	r4, [pc, #52]	; (8007e4c <__libc_init_array+0x3c>)
 8007e16:	1b64      	subs	r4, r4, r5
 8007e18:	10a4      	asrs	r4, r4, #2
 8007e1a:	2600      	movs	r6, #0
 8007e1c:	42a6      	cmp	r6, r4
 8007e1e:	d109      	bne.n	8007e34 <__libc_init_array+0x24>
 8007e20:	4d0b      	ldr	r5, [pc, #44]	; (8007e50 <__libc_init_array+0x40>)
 8007e22:	4c0c      	ldr	r4, [pc, #48]	; (8007e54 <__libc_init_array+0x44>)
 8007e24:	f001 f8f6 	bl	8009014 <_init>
 8007e28:	1b64      	subs	r4, r4, r5
 8007e2a:	10a4      	asrs	r4, r4, #2
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	42a6      	cmp	r6, r4
 8007e30:	d105      	bne.n	8007e3e <__libc_init_array+0x2e>
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e38:	4798      	blx	r3
 8007e3a:	3601      	adds	r6, #1
 8007e3c:	e7ee      	b.n	8007e1c <__libc_init_array+0xc>
 8007e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e42:	4798      	blx	r3
 8007e44:	3601      	adds	r6, #1
 8007e46:	e7f2      	b.n	8007e2e <__libc_init_array+0x1e>
 8007e48:	080091d4 	.word	0x080091d4
 8007e4c:	080091d4 	.word	0x080091d4
 8007e50:	080091d4 	.word	0x080091d4
 8007e54:	080091d8 	.word	0x080091d8

08007e58 <__retarget_lock_acquire_recursive>:
 8007e58:	4770      	bx	lr

08007e5a <__retarget_lock_release_recursive>:
 8007e5a:	4770      	bx	lr

08007e5c <_free_r>:
 8007e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e5e:	2900      	cmp	r1, #0
 8007e60:	d044      	beq.n	8007eec <_free_r+0x90>
 8007e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e66:	9001      	str	r0, [sp, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e6e:	bfb8      	it	lt
 8007e70:	18e4      	addlt	r4, r4, r3
 8007e72:	f000 f8df 	bl	8008034 <__malloc_lock>
 8007e76:	4a1e      	ldr	r2, [pc, #120]	; (8007ef0 <_free_r+0x94>)
 8007e78:	9801      	ldr	r0, [sp, #4]
 8007e7a:	6813      	ldr	r3, [r2, #0]
 8007e7c:	b933      	cbnz	r3, 8007e8c <_free_r+0x30>
 8007e7e:	6063      	str	r3, [r4, #4]
 8007e80:	6014      	str	r4, [r2, #0]
 8007e82:	b003      	add	sp, #12
 8007e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e88:	f000 b8da 	b.w	8008040 <__malloc_unlock>
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	d908      	bls.n	8007ea2 <_free_r+0x46>
 8007e90:	6825      	ldr	r5, [r4, #0]
 8007e92:	1961      	adds	r1, r4, r5
 8007e94:	428b      	cmp	r3, r1
 8007e96:	bf01      	itttt	eq
 8007e98:	6819      	ldreq	r1, [r3, #0]
 8007e9a:	685b      	ldreq	r3, [r3, #4]
 8007e9c:	1949      	addeq	r1, r1, r5
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	e7ed      	b.n	8007e7e <_free_r+0x22>
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	b10b      	cbz	r3, 8007eac <_free_r+0x50>
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	d9fa      	bls.n	8007ea2 <_free_r+0x46>
 8007eac:	6811      	ldr	r1, [r2, #0]
 8007eae:	1855      	adds	r5, r2, r1
 8007eb0:	42a5      	cmp	r5, r4
 8007eb2:	d10b      	bne.n	8007ecc <_free_r+0x70>
 8007eb4:	6824      	ldr	r4, [r4, #0]
 8007eb6:	4421      	add	r1, r4
 8007eb8:	1854      	adds	r4, r2, r1
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	d1e0      	bne.n	8007e82 <_free_r+0x26>
 8007ec0:	681c      	ldr	r4, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	6053      	str	r3, [r2, #4]
 8007ec6:	440c      	add	r4, r1
 8007ec8:	6014      	str	r4, [r2, #0]
 8007eca:	e7da      	b.n	8007e82 <_free_r+0x26>
 8007ecc:	d902      	bls.n	8007ed4 <_free_r+0x78>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	6003      	str	r3, [r0, #0]
 8007ed2:	e7d6      	b.n	8007e82 <_free_r+0x26>
 8007ed4:	6825      	ldr	r5, [r4, #0]
 8007ed6:	1961      	adds	r1, r4, r5
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	bf04      	itt	eq
 8007edc:	6819      	ldreq	r1, [r3, #0]
 8007ede:	685b      	ldreq	r3, [r3, #4]
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	bf04      	itt	eq
 8007ee4:	1949      	addeq	r1, r1, r5
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	6054      	str	r4, [r2, #4]
 8007eea:	e7ca      	b.n	8007e82 <_free_r+0x26>
 8007eec:	b003      	add	sp, #12
 8007eee:	bd30      	pop	{r4, r5, pc}
 8007ef0:	20000ca0 	.word	0x20000ca0

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0e      	ldr	r6, [pc, #56]	; (8007f30 <sbrk_aligned+0x3c>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 ff3a 	bl	8008d78 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 ff35 	bl	8008d78 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d00a      	beq.n	8007f28 <sbrk_aligned+0x34>
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d007      	beq.n	8007f2c <sbrk_aligned+0x38>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 ff2a 	bl	8008d78 <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d101      	bne.n	8007f2c <sbrk_aligned+0x38>
 8007f28:	f04f 34ff 	mov.w	r4, #4294967295
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	20000ca4 	.word	0x20000ca4

08007f34 <_malloc_r>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	1ccd      	adds	r5, r1, #3
 8007f3a:	f025 0503 	bic.w	r5, r5, #3
 8007f3e:	3508      	adds	r5, #8
 8007f40:	2d0c      	cmp	r5, #12
 8007f42:	bf38      	it	cc
 8007f44:	250c      	movcc	r5, #12
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	4607      	mov	r7, r0
 8007f4a:	db01      	blt.n	8007f50 <_malloc_r+0x1c>
 8007f4c:	42a9      	cmp	r1, r5
 8007f4e:	d905      	bls.n	8007f5c <_malloc_r+0x28>
 8007f50:	230c      	movs	r3, #12
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	2600      	movs	r6, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008030 <_malloc_r+0xfc>
 8007f60:	f000 f868 	bl	8008034 <__malloc_lock>
 8007f64:	f8d8 3000 	ldr.w	r3, [r8]
 8007f68:	461c      	mov	r4, r3
 8007f6a:	bb5c      	cbnz	r4, 8007fc4 <_malloc_r+0x90>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7ff ffc0 	bl	8007ef4 <sbrk_aligned>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	4604      	mov	r4, r0
 8007f78:	d155      	bne.n	8008026 <_malloc_r+0xf2>
 8007f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007f7e:	4626      	mov	r6, r4
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	d145      	bne.n	8008010 <_malloc_r+0xdc>
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	d048      	beq.n	800801a <_malloc_r+0xe6>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	eb04 0903 	add.w	r9, r4, r3
 8007f92:	f000 fef1 	bl	8008d78 <_sbrk_r>
 8007f96:	4581      	cmp	r9, r0
 8007f98:	d13f      	bne.n	800801a <_malloc_r+0xe6>
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	1a6d      	subs	r5, r5, r1
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ffa7 	bl	8007ef4 <sbrk_aligned>
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d037      	beq.n	800801a <_malloc_r+0xe6>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	442b      	add	r3, r5
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d038      	beq.n	800802a <_malloc_r+0xf6>
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	42a2      	cmp	r2, r4
 8007fbc:	d12b      	bne.n	8008016 <_malloc_r+0xe2>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	e00f      	b.n	8007fe4 <_malloc_r+0xb0>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	1b52      	subs	r2, r2, r5
 8007fc8:	d41f      	bmi.n	800800a <_malloc_r+0xd6>
 8007fca:	2a0b      	cmp	r2, #11
 8007fcc:	d917      	bls.n	8007ffe <_malloc_r+0xca>
 8007fce:	1961      	adds	r1, r4, r5
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	6025      	str	r5, [r4, #0]
 8007fd4:	bf18      	it	ne
 8007fd6:	6059      	strne	r1, [r3, #4]
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	bf08      	it	eq
 8007fdc:	f8c8 1000 	streq.w	r1, [r8]
 8007fe0:	5162      	str	r2, [r4, r5]
 8007fe2:	604b      	str	r3, [r1, #4]
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f104 060b 	add.w	r6, r4, #11
 8007fea:	f000 f829 	bl	8008040 <__malloc_unlock>
 8007fee:	f026 0607 	bic.w	r6, r6, #7
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	1af2      	subs	r2, r6, r3
 8007ff6:	d0ae      	beq.n	8007f56 <_malloc_r+0x22>
 8007ff8:	1b9b      	subs	r3, r3, r6
 8007ffa:	50a3      	str	r3, [r4, r2]
 8007ffc:	e7ab      	b.n	8007f56 <_malloc_r+0x22>
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	d1dd      	bne.n	8007fc0 <_malloc_r+0x8c>
 8008004:	f8c8 2000 	str.w	r2, [r8]
 8008008:	e7ec      	b.n	8007fe4 <_malloc_r+0xb0>
 800800a:	4623      	mov	r3, r4
 800800c:	6864      	ldr	r4, [r4, #4]
 800800e:	e7ac      	b.n	8007f6a <_malloc_r+0x36>
 8008010:	4634      	mov	r4, r6
 8008012:	6876      	ldr	r6, [r6, #4]
 8008014:	e7b4      	b.n	8007f80 <_malloc_r+0x4c>
 8008016:	4613      	mov	r3, r2
 8008018:	e7cc      	b.n	8007fb4 <_malloc_r+0x80>
 800801a:	230c      	movs	r3, #12
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4638      	mov	r0, r7
 8008020:	f000 f80e 	bl	8008040 <__malloc_unlock>
 8008024:	e797      	b.n	8007f56 <_malloc_r+0x22>
 8008026:	6025      	str	r5, [r4, #0]
 8008028:	e7dc      	b.n	8007fe4 <_malloc_r+0xb0>
 800802a:	605b      	str	r3, [r3, #4]
 800802c:	deff      	udf	#255	; 0xff
 800802e:	bf00      	nop
 8008030:	20000ca0 	.word	0x20000ca0

08008034 <__malloc_lock>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__malloc_lock+0x8>)
 8008036:	f7ff bf0f 	b.w	8007e58 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	20000c9c 	.word	0x20000c9c

08008040 <__malloc_unlock>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__malloc_unlock+0x8>)
 8008042:	f7ff bf0a 	b.w	8007e5a <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	20000c9c 	.word	0x20000c9c

0800804c <__ssputs_r>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	688e      	ldr	r6, [r1, #8]
 8008052:	461f      	mov	r7, r3
 8008054:	42be      	cmp	r6, r7
 8008056:	680b      	ldr	r3, [r1, #0]
 8008058:	4682      	mov	sl, r0
 800805a:	460c      	mov	r4, r1
 800805c:	4690      	mov	r8, r2
 800805e:	d82c      	bhi.n	80080ba <__ssputs_r+0x6e>
 8008060:	898a      	ldrh	r2, [r1, #12]
 8008062:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008066:	d026      	beq.n	80080b6 <__ssputs_r+0x6a>
 8008068:	6965      	ldr	r5, [r4, #20]
 800806a:	6909      	ldr	r1, [r1, #16]
 800806c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008070:	eba3 0901 	sub.w	r9, r3, r1
 8008074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008078:	1c7b      	adds	r3, r7, #1
 800807a:	444b      	add	r3, r9
 800807c:	106d      	asrs	r5, r5, #1
 800807e:	429d      	cmp	r5, r3
 8008080:	bf38      	it	cc
 8008082:	461d      	movcc	r5, r3
 8008084:	0553      	lsls	r3, r2, #21
 8008086:	d527      	bpl.n	80080d8 <__ssputs_r+0x8c>
 8008088:	4629      	mov	r1, r5
 800808a:	f7ff ff53 	bl	8007f34 <_malloc_r>
 800808e:	4606      	mov	r6, r0
 8008090:	b360      	cbz	r0, 80080ec <__ssputs_r+0xa0>
 8008092:	6921      	ldr	r1, [r4, #16]
 8008094:	464a      	mov	r2, r9
 8008096:	f000 fe7f 	bl	8008d98 <memcpy>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	6126      	str	r6, [r4, #16]
 80080a8:	6165      	str	r5, [r4, #20]
 80080aa:	444e      	add	r6, r9
 80080ac:	eba5 0509 	sub.w	r5, r5, r9
 80080b0:	6026      	str	r6, [r4, #0]
 80080b2:	60a5      	str	r5, [r4, #8]
 80080b4:	463e      	mov	r6, r7
 80080b6:	42be      	cmp	r6, r7
 80080b8:	d900      	bls.n	80080bc <__ssputs_r+0x70>
 80080ba:	463e      	mov	r6, r7
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	4632      	mov	r2, r6
 80080c0:	4641      	mov	r1, r8
 80080c2:	f000 fe3e 	bl	8008d42 <memmove>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	1b9b      	subs	r3, r3, r6
 80080ca:	60a3      	str	r3, [r4, #8]
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	4433      	add	r3, r6
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	2000      	movs	r0, #0
 80080d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d8:	462a      	mov	r2, r5
 80080da:	f000 fe6b 	bl	8008db4 <_realloc_r>
 80080de:	4606      	mov	r6, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1e0      	bne.n	80080a6 <__ssputs_r+0x5a>
 80080e4:	6921      	ldr	r1, [r4, #16]
 80080e6:	4650      	mov	r0, sl
 80080e8:	f7ff feb8 	bl	8007e5c <_free_r>
 80080ec:	230c      	movs	r3, #12
 80080ee:	f8ca 3000 	str.w	r3, [sl]
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	e7e9      	b.n	80080d4 <__ssputs_r+0x88>

08008100 <_svfiprintf_r>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	4698      	mov	r8, r3
 8008106:	898b      	ldrh	r3, [r1, #12]
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	b09d      	sub	sp, #116	; 0x74
 800810c:	4607      	mov	r7, r0
 800810e:	460d      	mov	r5, r1
 8008110:	4614      	mov	r4, r2
 8008112:	d50e      	bpl.n	8008132 <_svfiprintf_r+0x32>
 8008114:	690b      	ldr	r3, [r1, #16]
 8008116:	b963      	cbnz	r3, 8008132 <_svfiprintf_r+0x32>
 8008118:	2140      	movs	r1, #64	; 0x40
 800811a:	f7ff ff0b 	bl	8007f34 <_malloc_r>
 800811e:	6028      	str	r0, [r5, #0]
 8008120:	6128      	str	r0, [r5, #16]
 8008122:	b920      	cbnz	r0, 800812e <_svfiprintf_r+0x2e>
 8008124:	230c      	movs	r3, #12
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	f04f 30ff 	mov.w	r0, #4294967295
 800812c:	e0d0      	b.n	80082d0 <_svfiprintf_r+0x1d0>
 800812e:	2340      	movs	r3, #64	; 0x40
 8008130:	616b      	str	r3, [r5, #20]
 8008132:	2300      	movs	r3, #0
 8008134:	9309      	str	r3, [sp, #36]	; 0x24
 8008136:	2320      	movs	r3, #32
 8008138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800813c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008140:	2330      	movs	r3, #48	; 0x30
 8008142:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082e8 <_svfiprintf_r+0x1e8>
 8008146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800814a:	f04f 0901 	mov.w	r9, #1
 800814e:	4623      	mov	r3, r4
 8008150:	469a      	mov	sl, r3
 8008152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008156:	b10a      	cbz	r2, 800815c <_svfiprintf_r+0x5c>
 8008158:	2a25      	cmp	r2, #37	; 0x25
 800815a:	d1f9      	bne.n	8008150 <_svfiprintf_r+0x50>
 800815c:	ebba 0b04 	subs.w	fp, sl, r4
 8008160:	d00b      	beq.n	800817a <_svfiprintf_r+0x7a>
 8008162:	465b      	mov	r3, fp
 8008164:	4622      	mov	r2, r4
 8008166:	4629      	mov	r1, r5
 8008168:	4638      	mov	r0, r7
 800816a:	f7ff ff6f 	bl	800804c <__ssputs_r>
 800816e:	3001      	adds	r0, #1
 8008170:	f000 80a9 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008176:	445a      	add	r2, fp
 8008178:	9209      	str	r2, [sp, #36]	; 0x24
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 80a1 	beq.w	80082c6 <_svfiprintf_r+0x1c6>
 8008184:	2300      	movs	r3, #0
 8008186:	f04f 32ff 	mov.w	r2, #4294967295
 800818a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800818e:	f10a 0a01 	add.w	sl, sl, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819a:	931a      	str	r3, [sp, #104]	; 0x68
 800819c:	4654      	mov	r4, sl
 800819e:	2205      	movs	r2, #5
 80081a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a4:	4850      	ldr	r0, [pc, #320]	; (80082e8 <_svfiprintf_r+0x1e8>)
 80081a6:	f7f8 f83b 	bl	8000220 <memchr>
 80081aa:	9a04      	ldr	r2, [sp, #16]
 80081ac:	b9d8      	cbnz	r0, 80081e6 <_svfiprintf_r+0xe6>
 80081ae:	06d0      	lsls	r0, r2, #27
 80081b0:	bf44      	itt	mi
 80081b2:	2320      	movmi	r3, #32
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b8:	0711      	lsls	r1, r2, #28
 80081ba:	bf44      	itt	mi
 80081bc:	232b      	movmi	r3, #43	; 0x2b
 80081be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d015      	beq.n	80081f6 <_svfiprintf_r+0xf6>
 80081ca:	9a07      	ldr	r2, [sp, #28]
 80081cc:	4654      	mov	r4, sl
 80081ce:	2000      	movs	r0, #0
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	4621      	mov	r1, r4
 80081d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081da:	3b30      	subs	r3, #48	; 0x30
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d94d      	bls.n	800827c <_svfiprintf_r+0x17c>
 80081e0:	b1b0      	cbz	r0, 8008210 <_svfiprintf_r+0x110>
 80081e2:	9207      	str	r2, [sp, #28]
 80081e4:	e014      	b.n	8008210 <_svfiprintf_r+0x110>
 80081e6:	eba0 0308 	sub.w	r3, r0, r8
 80081ea:	fa09 f303 	lsl.w	r3, r9, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	46a2      	mov	sl, r4
 80081f4:	e7d2      	b.n	800819c <_svfiprintf_r+0x9c>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9103      	str	r1, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfbb      	ittet	lt
 8008202:	425b      	neglt	r3, r3
 8008204:	f042 0202 	orrlt.w	r2, r2, #2
 8008208:	9307      	strge	r3, [sp, #28]
 800820a:	9307      	strlt	r3, [sp, #28]
 800820c:	bfb8      	it	lt
 800820e:	9204      	strlt	r2, [sp, #16]
 8008210:	7823      	ldrb	r3, [r4, #0]
 8008212:	2b2e      	cmp	r3, #46	; 0x2e
 8008214:	d10c      	bne.n	8008230 <_svfiprintf_r+0x130>
 8008216:	7863      	ldrb	r3, [r4, #1]
 8008218:	2b2a      	cmp	r3, #42	; 0x2a
 800821a:	d134      	bne.n	8008286 <_svfiprintf_r+0x186>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	1d1a      	adds	r2, r3, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	9203      	str	r2, [sp, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfb8      	it	lt
 8008228:	f04f 33ff 	movlt.w	r3, #4294967295
 800822c:	3402      	adds	r4, #2
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082f8 <_svfiprintf_r+0x1f8>
 8008234:	7821      	ldrb	r1, [r4, #0]
 8008236:	2203      	movs	r2, #3
 8008238:	4650      	mov	r0, sl
 800823a:	f7f7 fff1 	bl	8000220 <memchr>
 800823e:	b138      	cbz	r0, 8008250 <_svfiprintf_r+0x150>
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	eba0 000a 	sub.w	r0, r0, sl
 8008246:	2240      	movs	r2, #64	; 0x40
 8008248:	4082      	lsls	r2, r0
 800824a:	4313      	orrs	r3, r2
 800824c:	3401      	adds	r4, #1
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008254:	4825      	ldr	r0, [pc, #148]	; (80082ec <_svfiprintf_r+0x1ec>)
 8008256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800825a:	2206      	movs	r2, #6
 800825c:	f7f7 ffe0 	bl	8000220 <memchr>
 8008260:	2800      	cmp	r0, #0
 8008262:	d038      	beq.n	80082d6 <_svfiprintf_r+0x1d6>
 8008264:	4b22      	ldr	r3, [pc, #136]	; (80082f0 <_svfiprintf_r+0x1f0>)
 8008266:	bb1b      	cbnz	r3, 80082b0 <_svfiprintf_r+0x1b0>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	3308      	adds	r3, #8
 8008272:	9303      	str	r3, [sp, #12]
 8008274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008276:	4433      	add	r3, r6
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	e768      	b.n	800814e <_svfiprintf_r+0x4e>
 800827c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008280:	460c      	mov	r4, r1
 8008282:	2001      	movs	r0, #1
 8008284:	e7a6      	b.n	80081d4 <_svfiprintf_r+0xd4>
 8008286:	2300      	movs	r3, #0
 8008288:	3401      	adds	r4, #1
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	4619      	mov	r1, r3
 800828e:	f04f 0c0a 	mov.w	ip, #10
 8008292:	4620      	mov	r0, r4
 8008294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008298:	3a30      	subs	r2, #48	; 0x30
 800829a:	2a09      	cmp	r2, #9
 800829c:	d903      	bls.n	80082a6 <_svfiprintf_r+0x1a6>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c6      	beq.n	8008230 <_svfiprintf_r+0x130>
 80082a2:	9105      	str	r1, [sp, #20]
 80082a4:	e7c4      	b.n	8008230 <_svfiprintf_r+0x130>
 80082a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082aa:	4604      	mov	r4, r0
 80082ac:	2301      	movs	r3, #1
 80082ae:	e7f0      	b.n	8008292 <_svfiprintf_r+0x192>
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	462a      	mov	r2, r5
 80082b6:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <_svfiprintf_r+0x1f4>)
 80082b8:	a904      	add	r1, sp, #16
 80082ba:	4638      	mov	r0, r7
 80082bc:	f3af 8000 	nop.w
 80082c0:	1c42      	adds	r2, r0, #1
 80082c2:	4606      	mov	r6, r0
 80082c4:	d1d6      	bne.n	8008274 <_svfiprintf_r+0x174>
 80082c6:	89ab      	ldrh	r3, [r5, #12]
 80082c8:	065b      	lsls	r3, r3, #25
 80082ca:	f53f af2d 	bmi.w	8008128 <_svfiprintf_r+0x28>
 80082ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d0:	b01d      	add	sp, #116	; 0x74
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <_svfiprintf_r+0x1f4>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4638      	mov	r0, r7
 80082e2:	f000 fa4b 	bl	800877c <_printf_i>
 80082e6:	e7eb      	b.n	80082c0 <_svfiprintf_r+0x1c0>
 80082e8:	0800907c 	.word	0x0800907c
 80082ec:	08009086 	.word	0x08009086
 80082f0:	00000000 	.word	0x00000000
 80082f4:	0800804d 	.word	0x0800804d
 80082f8:	08009082 	.word	0x08009082

080082fc <_sungetc_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	1c4b      	adds	r3, r1, #1
 8008300:	4614      	mov	r4, r2
 8008302:	d103      	bne.n	800830c <_sungetc_r+0x10>
 8008304:	f04f 35ff 	mov.w	r5, #4294967295
 8008308:	4628      	mov	r0, r5
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	8993      	ldrh	r3, [r2, #12]
 800830e:	f023 0320 	bic.w	r3, r3, #32
 8008312:	8193      	strh	r3, [r2, #12]
 8008314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008316:	6852      	ldr	r2, [r2, #4]
 8008318:	b2cd      	uxtb	r5, r1
 800831a:	b18b      	cbz	r3, 8008340 <_sungetc_r+0x44>
 800831c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800831e:	4293      	cmp	r3, r2
 8008320:	dd08      	ble.n	8008334 <_sungetc_r+0x38>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	6022      	str	r2, [r4, #0]
 8008328:	f803 5c01 	strb.w	r5, [r3, #-1]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	3301      	adds	r3, #1
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	e7e9      	b.n	8008308 <_sungetc_r+0xc>
 8008334:	4621      	mov	r1, r4
 8008336:	f000 fcca 	bl	8008cce <__submore>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0f1      	beq.n	8008322 <_sungetc_r+0x26>
 800833e:	e7e1      	b.n	8008304 <_sungetc_r+0x8>
 8008340:	6921      	ldr	r1, [r4, #16]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	b151      	cbz	r1, 800835c <_sungetc_r+0x60>
 8008346:	4299      	cmp	r1, r3
 8008348:	d208      	bcs.n	800835c <_sungetc_r+0x60>
 800834a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800834e:	42a9      	cmp	r1, r5
 8008350:	d104      	bne.n	800835c <_sungetc_r+0x60>
 8008352:	3b01      	subs	r3, #1
 8008354:	3201      	adds	r2, #1
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	6062      	str	r2, [r4, #4]
 800835a:	e7d5      	b.n	8008308 <_sungetc_r+0xc>
 800835c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008364:	6363      	str	r3, [r4, #52]	; 0x34
 8008366:	2303      	movs	r3, #3
 8008368:	63a3      	str	r3, [r4, #56]	; 0x38
 800836a:	4623      	mov	r3, r4
 800836c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	2301      	movs	r3, #1
 8008374:	e7dc      	b.n	8008330 <_sungetc_r+0x34>

08008376 <__ssrefill_r>:
 8008376:	b510      	push	{r4, lr}
 8008378:	460c      	mov	r4, r1
 800837a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800837c:	b169      	cbz	r1, 800839a <__ssrefill_r+0x24>
 800837e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008382:	4299      	cmp	r1, r3
 8008384:	d001      	beq.n	800838a <__ssrefill_r+0x14>
 8008386:	f7ff fd69 	bl	8007e5c <_free_r>
 800838a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	2000      	movs	r0, #0
 8008390:	6360      	str	r0, [r4, #52]	; 0x34
 8008392:	b113      	cbz	r3, 800839a <__ssrefill_r+0x24>
 8008394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008396:	6023      	str	r3, [r4, #0]
 8008398:	bd10      	pop	{r4, pc}
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f043 0320 	orr.w	r3, r3, #32
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	e7f3      	b.n	8008398 <__ssrefill_r+0x22>

080083b0 <__ssvfiscanf_r>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	460c      	mov	r4, r1
 80083b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80083ba:	2100      	movs	r1, #0
 80083bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80083c0:	49a6      	ldr	r1, [pc, #664]	; (800865c <__ssvfiscanf_r+0x2ac>)
 80083c2:	91a0      	str	r1, [sp, #640]	; 0x280
 80083c4:	f10d 0804 	add.w	r8, sp, #4
 80083c8:	49a5      	ldr	r1, [pc, #660]	; (8008660 <__ssvfiscanf_r+0x2b0>)
 80083ca:	4fa6      	ldr	r7, [pc, #664]	; (8008664 <__ssvfiscanf_r+0x2b4>)
 80083cc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008668 <__ssvfiscanf_r+0x2b8>
 80083d0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80083d4:	4606      	mov	r6, r0
 80083d6:	91a1      	str	r1, [sp, #644]	; 0x284
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	7813      	ldrb	r3, [r2, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 815a 	beq.w	8008696 <__ssvfiscanf_r+0x2e6>
 80083e2:	5cf9      	ldrb	r1, [r7, r3]
 80083e4:	f011 0108 	ands.w	r1, r1, #8
 80083e8:	f102 0501 	add.w	r5, r2, #1
 80083ec:	d019      	beq.n	8008422 <__ssvfiscanf_r+0x72>
 80083ee:	6863      	ldr	r3, [r4, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dd0f      	ble.n	8008414 <__ssvfiscanf_r+0x64>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	5cba      	ldrb	r2, [r7, r2]
 80083fa:	0712      	lsls	r2, r2, #28
 80083fc:	d401      	bmi.n	8008402 <__ssvfiscanf_r+0x52>
 80083fe:	462a      	mov	r2, r5
 8008400:	e7eb      	b.n	80083da <__ssvfiscanf_r+0x2a>
 8008402:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008404:	3201      	adds	r2, #1
 8008406:	9245      	str	r2, [sp, #276]	; 0x114
 8008408:	6862      	ldr	r2, [r4, #4]
 800840a:	3301      	adds	r3, #1
 800840c:	3a01      	subs	r2, #1
 800840e:	6062      	str	r2, [r4, #4]
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	e7ec      	b.n	80083ee <__ssvfiscanf_r+0x3e>
 8008414:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008416:	4621      	mov	r1, r4
 8008418:	4630      	mov	r0, r6
 800841a:	4798      	blx	r3
 800841c:	2800      	cmp	r0, #0
 800841e:	d0e9      	beq.n	80083f4 <__ssvfiscanf_r+0x44>
 8008420:	e7ed      	b.n	80083fe <__ssvfiscanf_r+0x4e>
 8008422:	2b25      	cmp	r3, #37	; 0x25
 8008424:	d012      	beq.n	800844c <__ssvfiscanf_r+0x9c>
 8008426:	469a      	mov	sl, r3
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	f340 8091 	ble.w	8008552 <__ssvfiscanf_r+0x1a2>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	7813      	ldrb	r3, [r2, #0]
 8008434:	4553      	cmp	r3, sl
 8008436:	f040 812e 	bne.w	8008696 <__ssvfiscanf_r+0x2e6>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	3b01      	subs	r3, #1
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008442:	3201      	adds	r2, #1
 8008444:	3301      	adds	r3, #1
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	9345      	str	r3, [sp, #276]	; 0x114
 800844a:	e7d8      	b.n	80083fe <__ssvfiscanf_r+0x4e>
 800844c:	9141      	str	r1, [sp, #260]	; 0x104
 800844e:	9143      	str	r1, [sp, #268]	; 0x10c
 8008450:	7853      	ldrb	r3, [r2, #1]
 8008452:	2b2a      	cmp	r3, #42	; 0x2a
 8008454:	bf02      	ittt	eq
 8008456:	2310      	moveq	r3, #16
 8008458:	1c95      	addeq	r5, r2, #2
 800845a:	9341      	streq	r3, [sp, #260]	; 0x104
 800845c:	220a      	movs	r2, #10
 800845e:	46aa      	mov	sl, r5
 8008460:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008464:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008468:	2b09      	cmp	r3, #9
 800846a:	d91c      	bls.n	80084a6 <__ssvfiscanf_r+0xf6>
 800846c:	487e      	ldr	r0, [pc, #504]	; (8008668 <__ssvfiscanf_r+0x2b8>)
 800846e:	2203      	movs	r2, #3
 8008470:	f7f7 fed6 	bl	8000220 <memchr>
 8008474:	b138      	cbz	r0, 8008486 <__ssvfiscanf_r+0xd6>
 8008476:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008478:	eba0 0009 	sub.w	r0, r0, r9
 800847c:	2301      	movs	r3, #1
 800847e:	4083      	lsls	r3, r0
 8008480:	4313      	orrs	r3, r2
 8008482:	9341      	str	r3, [sp, #260]	; 0x104
 8008484:	4655      	mov	r5, sl
 8008486:	f815 3b01 	ldrb.w	r3, [r5], #1
 800848a:	2b78      	cmp	r3, #120	; 0x78
 800848c:	d806      	bhi.n	800849c <__ssvfiscanf_r+0xec>
 800848e:	2b57      	cmp	r3, #87	; 0x57
 8008490:	d810      	bhi.n	80084b4 <__ssvfiscanf_r+0x104>
 8008492:	2b25      	cmp	r3, #37	; 0x25
 8008494:	d0c7      	beq.n	8008426 <__ssvfiscanf_r+0x76>
 8008496:	d857      	bhi.n	8008548 <__ssvfiscanf_r+0x198>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d065      	beq.n	8008568 <__ssvfiscanf_r+0x1b8>
 800849c:	2303      	movs	r3, #3
 800849e:	9347      	str	r3, [sp, #284]	; 0x11c
 80084a0:	230a      	movs	r3, #10
 80084a2:	9342      	str	r3, [sp, #264]	; 0x108
 80084a4:	e076      	b.n	8008594 <__ssvfiscanf_r+0x1e4>
 80084a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80084a8:	fb02 1103 	mla	r1, r2, r3, r1
 80084ac:	3930      	subs	r1, #48	; 0x30
 80084ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80084b0:	4655      	mov	r5, sl
 80084b2:	e7d4      	b.n	800845e <__ssvfiscanf_r+0xae>
 80084b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80084b8:	2a20      	cmp	r2, #32
 80084ba:	d8ef      	bhi.n	800849c <__ssvfiscanf_r+0xec>
 80084bc:	a101      	add	r1, pc, #4	; (adr r1, 80084c4 <__ssvfiscanf_r+0x114>)
 80084be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	08008577 	.word	0x08008577
 80084c8:	0800849d 	.word	0x0800849d
 80084cc:	0800849d 	.word	0x0800849d
 80084d0:	080085d5 	.word	0x080085d5
 80084d4:	0800849d 	.word	0x0800849d
 80084d8:	0800849d 	.word	0x0800849d
 80084dc:	0800849d 	.word	0x0800849d
 80084e0:	0800849d 	.word	0x0800849d
 80084e4:	0800849d 	.word	0x0800849d
 80084e8:	0800849d 	.word	0x0800849d
 80084ec:	0800849d 	.word	0x0800849d
 80084f0:	080085eb 	.word	0x080085eb
 80084f4:	080085d1 	.word	0x080085d1
 80084f8:	0800854f 	.word	0x0800854f
 80084fc:	0800854f 	.word	0x0800854f
 8008500:	0800854f 	.word	0x0800854f
 8008504:	0800849d 	.word	0x0800849d
 8008508:	0800858d 	.word	0x0800858d
 800850c:	0800849d 	.word	0x0800849d
 8008510:	0800849d 	.word	0x0800849d
 8008514:	0800849d 	.word	0x0800849d
 8008518:	0800849d 	.word	0x0800849d
 800851c:	080085fb 	.word	0x080085fb
 8008520:	080085c9 	.word	0x080085c9
 8008524:	0800856f 	.word	0x0800856f
 8008528:	0800849d 	.word	0x0800849d
 800852c:	0800849d 	.word	0x0800849d
 8008530:	080085f7 	.word	0x080085f7
 8008534:	0800849d 	.word	0x0800849d
 8008538:	080085d1 	.word	0x080085d1
 800853c:	0800849d 	.word	0x0800849d
 8008540:	0800849d 	.word	0x0800849d
 8008544:	08008577 	.word	0x08008577
 8008548:	3b45      	subs	r3, #69	; 0x45
 800854a:	2b02      	cmp	r3, #2
 800854c:	d8a6      	bhi.n	800849c <__ssvfiscanf_r+0xec>
 800854e:	2305      	movs	r3, #5
 8008550:	e01f      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 8008552:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008554:	4621      	mov	r1, r4
 8008556:	4630      	mov	r0, r6
 8008558:	4798      	blx	r3
 800855a:	2800      	cmp	r0, #0
 800855c:	f43f af68 	beq.w	8008430 <__ssvfiscanf_r+0x80>
 8008560:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008562:	2800      	cmp	r0, #0
 8008564:	f040 808d 	bne.w	8008682 <__ssvfiscanf_r+0x2d2>
 8008568:	f04f 30ff 	mov.w	r0, #4294967295
 800856c:	e08f      	b.n	800868e <__ssvfiscanf_r+0x2de>
 800856e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008570:	f042 0220 	orr.w	r2, r2, #32
 8008574:	9241      	str	r2, [sp, #260]	; 0x104
 8008576:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857c:	9241      	str	r2, [sp, #260]	; 0x104
 800857e:	2210      	movs	r2, #16
 8008580:	2b6f      	cmp	r3, #111	; 0x6f
 8008582:	9242      	str	r2, [sp, #264]	; 0x108
 8008584:	bf34      	ite	cc
 8008586:	2303      	movcc	r3, #3
 8008588:	2304      	movcs	r3, #4
 800858a:	e002      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 800858c:	2300      	movs	r3, #0
 800858e:	9342      	str	r3, [sp, #264]	; 0x108
 8008590:	2303      	movs	r3, #3
 8008592:	9347      	str	r3, [sp, #284]	; 0x11c
 8008594:	6863      	ldr	r3, [r4, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd3d      	ble.n	8008616 <__ssvfiscanf_r+0x266>
 800859a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800859c:	0659      	lsls	r1, r3, #25
 800859e:	d404      	bmi.n	80085aa <__ssvfiscanf_r+0x1fa>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	5cba      	ldrb	r2, [r7, r2]
 80085a6:	0712      	lsls	r2, r2, #28
 80085a8:	d43c      	bmi.n	8008624 <__ssvfiscanf_r+0x274>
 80085aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	dc4b      	bgt.n	8008648 <__ssvfiscanf_r+0x298>
 80085b0:	466b      	mov	r3, sp
 80085b2:	4622      	mov	r2, r4
 80085b4:	a941      	add	r1, sp, #260	; 0x104
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 fa02 	bl	80089c0 <_scanf_chars>
 80085bc:	2801      	cmp	r0, #1
 80085be:	d06a      	beq.n	8008696 <__ssvfiscanf_r+0x2e6>
 80085c0:	2802      	cmp	r0, #2
 80085c2:	f47f af1c 	bne.w	80083fe <__ssvfiscanf_r+0x4e>
 80085c6:	e7cb      	b.n	8008560 <__ssvfiscanf_r+0x1b0>
 80085c8:	2308      	movs	r3, #8
 80085ca:	9342      	str	r3, [sp, #264]	; 0x108
 80085cc:	2304      	movs	r3, #4
 80085ce:	e7e0      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 80085d0:	220a      	movs	r2, #10
 80085d2:	e7d5      	b.n	8008580 <__ssvfiscanf_r+0x1d0>
 80085d4:	4629      	mov	r1, r5
 80085d6:	4640      	mov	r0, r8
 80085d8:	f000 fb40 	bl	8008c5c <__sccl>
 80085dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e2:	9341      	str	r3, [sp, #260]	; 0x104
 80085e4:	4605      	mov	r5, r0
 80085e6:	2301      	movs	r3, #1
 80085e8:	e7d3      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 80085ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f0:	9341      	str	r3, [sp, #260]	; 0x104
 80085f2:	2300      	movs	r3, #0
 80085f4:	e7cd      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e7cb      	b.n	8008592 <__ssvfiscanf_r+0x1e2>
 80085fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80085fc:	06c3      	lsls	r3, r0, #27
 80085fe:	f53f aefe 	bmi.w	80083fe <__ssvfiscanf_r+0x4e>
 8008602:	9b00      	ldr	r3, [sp, #0]
 8008604:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008606:	1d19      	adds	r1, r3, #4
 8008608:	9100      	str	r1, [sp, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	07c0      	lsls	r0, r0, #31
 800860e:	bf4c      	ite	mi
 8008610:	801a      	strhmi	r2, [r3, #0]
 8008612:	601a      	strpl	r2, [r3, #0]
 8008614:	e6f3      	b.n	80083fe <__ssvfiscanf_r+0x4e>
 8008616:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008618:	4621      	mov	r1, r4
 800861a:	4630      	mov	r0, r6
 800861c:	4798      	blx	r3
 800861e:	2800      	cmp	r0, #0
 8008620:	d0bb      	beq.n	800859a <__ssvfiscanf_r+0x1ea>
 8008622:	e79d      	b.n	8008560 <__ssvfiscanf_r+0x1b0>
 8008624:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008626:	3201      	adds	r2, #1
 8008628:	9245      	str	r2, [sp, #276]	; 0x114
 800862a:	6862      	ldr	r2, [r4, #4]
 800862c:	3a01      	subs	r2, #1
 800862e:	2a00      	cmp	r2, #0
 8008630:	6062      	str	r2, [r4, #4]
 8008632:	dd02      	ble.n	800863a <__ssvfiscanf_r+0x28a>
 8008634:	3301      	adds	r3, #1
 8008636:	6023      	str	r3, [r4, #0]
 8008638:	e7b2      	b.n	80085a0 <__ssvfiscanf_r+0x1f0>
 800863a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800863c:	4621      	mov	r1, r4
 800863e:	4630      	mov	r0, r6
 8008640:	4798      	blx	r3
 8008642:	2800      	cmp	r0, #0
 8008644:	d0ac      	beq.n	80085a0 <__ssvfiscanf_r+0x1f0>
 8008646:	e78b      	b.n	8008560 <__ssvfiscanf_r+0x1b0>
 8008648:	2b04      	cmp	r3, #4
 800864a:	dc0f      	bgt.n	800866c <__ssvfiscanf_r+0x2bc>
 800864c:	466b      	mov	r3, sp
 800864e:	4622      	mov	r2, r4
 8008650:	a941      	add	r1, sp, #260	; 0x104
 8008652:	4630      	mov	r0, r6
 8008654:	f000 fa0e 	bl	8008a74 <_scanf_i>
 8008658:	e7b0      	b.n	80085bc <__ssvfiscanf_r+0x20c>
 800865a:	bf00      	nop
 800865c:	080082fd 	.word	0x080082fd
 8008660:	08008377 	.word	0x08008377
 8008664:	080090cb 	.word	0x080090cb
 8008668:	08009082 	.word	0x08009082
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <__ssvfiscanf_r+0x2ec>)
 800866e:	2b00      	cmp	r3, #0
 8008670:	f43f aec5 	beq.w	80083fe <__ssvfiscanf_r+0x4e>
 8008674:	466b      	mov	r3, sp
 8008676:	4622      	mov	r2, r4
 8008678:	a941      	add	r1, sp, #260	; 0x104
 800867a:	4630      	mov	r0, r6
 800867c:	f3af 8000 	nop.w
 8008680:	e79c      	b.n	80085bc <__ssvfiscanf_r+0x20c>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008688:	bf18      	it	ne
 800868a:	f04f 30ff 	movne.w	r0, #4294967295
 800868e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008698:	e7f9      	b.n	800868e <__ssvfiscanf_r+0x2de>
 800869a:	bf00      	nop
 800869c:	00000000 	.word	0x00000000

080086a0 <_printf_common>:
 80086a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	4616      	mov	r6, r2
 80086a6:	4699      	mov	r9, r3
 80086a8:	688a      	ldr	r2, [r1, #8]
 80086aa:	690b      	ldr	r3, [r1, #16]
 80086ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	bfb8      	it	lt
 80086b4:	4613      	movlt	r3, r2
 80086b6:	6033      	str	r3, [r6, #0]
 80086b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086bc:	4607      	mov	r7, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	b10a      	cbz	r2, 80086c6 <_printf_common+0x26>
 80086c2:	3301      	adds	r3, #1
 80086c4:	6033      	str	r3, [r6, #0]
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	0699      	lsls	r1, r3, #26
 80086ca:	bf42      	ittt	mi
 80086cc:	6833      	ldrmi	r3, [r6, #0]
 80086ce:	3302      	addmi	r3, #2
 80086d0:	6033      	strmi	r3, [r6, #0]
 80086d2:	6825      	ldr	r5, [r4, #0]
 80086d4:	f015 0506 	ands.w	r5, r5, #6
 80086d8:	d106      	bne.n	80086e8 <_printf_common+0x48>
 80086da:	f104 0a19 	add.w	sl, r4, #25
 80086de:	68e3      	ldr	r3, [r4, #12]
 80086e0:	6832      	ldr	r2, [r6, #0]
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc26      	bgt.n	8008736 <_printf_common+0x96>
 80086e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ec:	1e13      	subs	r3, r2, #0
 80086ee:	6822      	ldr	r2, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	0692      	lsls	r2, r2, #26
 80086f6:	d42b      	bmi.n	8008750 <_printf_common+0xb0>
 80086f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086fc:	4649      	mov	r1, r9
 80086fe:	4638      	mov	r0, r7
 8008700:	47c0      	blx	r8
 8008702:	3001      	adds	r0, #1
 8008704:	d01e      	beq.n	8008744 <_printf_common+0xa4>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	6922      	ldr	r2, [r4, #16]
 800870a:	f003 0306 	and.w	r3, r3, #6
 800870e:	2b04      	cmp	r3, #4
 8008710:	bf02      	ittt	eq
 8008712:	68e5      	ldreq	r5, [r4, #12]
 8008714:	6833      	ldreq	r3, [r6, #0]
 8008716:	1aed      	subeq	r5, r5, r3
 8008718:	68a3      	ldr	r3, [r4, #8]
 800871a:	bf0c      	ite	eq
 800871c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008720:	2500      	movne	r5, #0
 8008722:	4293      	cmp	r3, r2
 8008724:	bfc4      	itt	gt
 8008726:	1a9b      	subgt	r3, r3, r2
 8008728:	18ed      	addgt	r5, r5, r3
 800872a:	2600      	movs	r6, #0
 800872c:	341a      	adds	r4, #26
 800872e:	42b5      	cmp	r5, r6
 8008730:	d11a      	bne.n	8008768 <_printf_common+0xc8>
 8008732:	2000      	movs	r0, #0
 8008734:	e008      	b.n	8008748 <_printf_common+0xa8>
 8008736:	2301      	movs	r3, #1
 8008738:	4652      	mov	r2, sl
 800873a:	4649      	mov	r1, r9
 800873c:	4638      	mov	r0, r7
 800873e:	47c0      	blx	r8
 8008740:	3001      	adds	r0, #1
 8008742:	d103      	bne.n	800874c <_printf_common+0xac>
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874c:	3501      	adds	r5, #1
 800874e:	e7c6      	b.n	80086de <_printf_common+0x3e>
 8008750:	18e1      	adds	r1, r4, r3
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	2030      	movs	r0, #48	; 0x30
 8008756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800875a:	4422      	add	r2, r4
 800875c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008764:	3302      	adds	r3, #2
 8008766:	e7c7      	b.n	80086f8 <_printf_common+0x58>
 8008768:	2301      	movs	r3, #1
 800876a:	4622      	mov	r2, r4
 800876c:	4649      	mov	r1, r9
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	3001      	adds	r0, #1
 8008774:	d0e6      	beq.n	8008744 <_printf_common+0xa4>
 8008776:	3601      	adds	r6, #1
 8008778:	e7d9      	b.n	800872e <_printf_common+0x8e>
	...

0800877c <_printf_i>:
 800877c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008780:	7e0f      	ldrb	r7, [r1, #24]
 8008782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008784:	2f78      	cmp	r7, #120	; 0x78
 8008786:	4691      	mov	r9, r2
 8008788:	4680      	mov	r8, r0
 800878a:	460c      	mov	r4, r1
 800878c:	469a      	mov	sl, r3
 800878e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008792:	d807      	bhi.n	80087a4 <_printf_i+0x28>
 8008794:	2f62      	cmp	r7, #98	; 0x62
 8008796:	d80a      	bhi.n	80087ae <_printf_i+0x32>
 8008798:	2f00      	cmp	r7, #0
 800879a:	f000 80d4 	beq.w	8008946 <_printf_i+0x1ca>
 800879e:	2f58      	cmp	r7, #88	; 0x58
 80087a0:	f000 80c0 	beq.w	8008924 <_printf_i+0x1a8>
 80087a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087ac:	e03a      	b.n	8008824 <_printf_i+0xa8>
 80087ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087b2:	2b15      	cmp	r3, #21
 80087b4:	d8f6      	bhi.n	80087a4 <_printf_i+0x28>
 80087b6:	a101      	add	r1, pc, #4	; (adr r1, 80087bc <_printf_i+0x40>)
 80087b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087bc:	08008815 	.word	0x08008815
 80087c0:	08008829 	.word	0x08008829
 80087c4:	080087a5 	.word	0x080087a5
 80087c8:	080087a5 	.word	0x080087a5
 80087cc:	080087a5 	.word	0x080087a5
 80087d0:	080087a5 	.word	0x080087a5
 80087d4:	08008829 	.word	0x08008829
 80087d8:	080087a5 	.word	0x080087a5
 80087dc:	080087a5 	.word	0x080087a5
 80087e0:	080087a5 	.word	0x080087a5
 80087e4:	080087a5 	.word	0x080087a5
 80087e8:	0800892d 	.word	0x0800892d
 80087ec:	08008855 	.word	0x08008855
 80087f0:	080088e7 	.word	0x080088e7
 80087f4:	080087a5 	.word	0x080087a5
 80087f8:	080087a5 	.word	0x080087a5
 80087fc:	0800894f 	.word	0x0800894f
 8008800:	080087a5 	.word	0x080087a5
 8008804:	08008855 	.word	0x08008855
 8008808:	080087a5 	.word	0x080087a5
 800880c:	080087a5 	.word	0x080087a5
 8008810:	080088ef 	.word	0x080088ef
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	602a      	str	r2, [r5, #0]
 800881c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008824:	2301      	movs	r3, #1
 8008826:	e09f      	b.n	8008968 <_printf_i+0x1ec>
 8008828:	6820      	ldr	r0, [r4, #0]
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	0607      	lsls	r7, r0, #24
 800882e:	f103 0104 	add.w	r1, r3, #4
 8008832:	6029      	str	r1, [r5, #0]
 8008834:	d501      	bpl.n	800883a <_printf_i+0xbe>
 8008836:	681e      	ldr	r6, [r3, #0]
 8008838:	e003      	b.n	8008842 <_printf_i+0xc6>
 800883a:	0646      	lsls	r6, r0, #25
 800883c:	d5fb      	bpl.n	8008836 <_printf_i+0xba>
 800883e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008842:	2e00      	cmp	r6, #0
 8008844:	da03      	bge.n	800884e <_printf_i+0xd2>
 8008846:	232d      	movs	r3, #45	; 0x2d
 8008848:	4276      	negs	r6, r6
 800884a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884e:	485a      	ldr	r0, [pc, #360]	; (80089b8 <_printf_i+0x23c>)
 8008850:	230a      	movs	r3, #10
 8008852:	e012      	b.n	800887a <_printf_i+0xfe>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	6820      	ldr	r0, [r4, #0]
 8008858:	1d19      	adds	r1, r3, #4
 800885a:	6029      	str	r1, [r5, #0]
 800885c:	0605      	lsls	r5, r0, #24
 800885e:	d501      	bpl.n	8008864 <_printf_i+0xe8>
 8008860:	681e      	ldr	r6, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0xee>
 8008864:	0641      	lsls	r1, r0, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0xe4>
 8008868:	881e      	ldrh	r6, [r3, #0]
 800886a:	4853      	ldr	r0, [pc, #332]	; (80089b8 <_printf_i+0x23c>)
 800886c:	2f6f      	cmp	r7, #111	; 0x6f
 800886e:	bf0c      	ite	eq
 8008870:	2308      	moveq	r3, #8
 8008872:	230a      	movne	r3, #10
 8008874:	2100      	movs	r1, #0
 8008876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800887a:	6865      	ldr	r5, [r4, #4]
 800887c:	60a5      	str	r5, [r4, #8]
 800887e:	2d00      	cmp	r5, #0
 8008880:	bfa2      	ittt	ge
 8008882:	6821      	ldrge	r1, [r4, #0]
 8008884:	f021 0104 	bicge.w	r1, r1, #4
 8008888:	6021      	strge	r1, [r4, #0]
 800888a:	b90e      	cbnz	r6, 8008890 <_printf_i+0x114>
 800888c:	2d00      	cmp	r5, #0
 800888e:	d04b      	beq.n	8008928 <_printf_i+0x1ac>
 8008890:	4615      	mov	r5, r2
 8008892:	fbb6 f1f3 	udiv	r1, r6, r3
 8008896:	fb03 6711 	mls	r7, r3, r1, r6
 800889a:	5dc7      	ldrb	r7, [r0, r7]
 800889c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088a0:	4637      	mov	r7, r6
 80088a2:	42bb      	cmp	r3, r7
 80088a4:	460e      	mov	r6, r1
 80088a6:	d9f4      	bls.n	8008892 <_printf_i+0x116>
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d10b      	bne.n	80088c4 <_printf_i+0x148>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	07de      	lsls	r6, r3, #31
 80088b0:	d508      	bpl.n	80088c4 <_printf_i+0x148>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	4299      	cmp	r1, r3
 80088b8:	bfde      	ittt	le
 80088ba:	2330      	movle	r3, #48	; 0x30
 80088bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088c4:	1b52      	subs	r2, r2, r5
 80088c6:	6122      	str	r2, [r4, #16]
 80088c8:	f8cd a000 	str.w	sl, [sp]
 80088cc:	464b      	mov	r3, r9
 80088ce:	aa03      	add	r2, sp, #12
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fee4 	bl	80086a0 <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	d14a      	bne.n	8008972 <_printf_i+0x1f6>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	b004      	add	sp, #16
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f043 0320 	orr.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	4833      	ldr	r0, [pc, #204]	; (80089bc <_printf_i+0x240>)
 80088f0:	2778      	movs	r7, #120	; 0x78
 80088f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	6829      	ldr	r1, [r5, #0]
 80088fa:	061f      	lsls	r7, r3, #24
 80088fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008900:	d402      	bmi.n	8008908 <_printf_i+0x18c>
 8008902:	065f      	lsls	r7, r3, #25
 8008904:	bf48      	it	mi
 8008906:	b2b6      	uxthmi	r6, r6
 8008908:	07df      	lsls	r7, r3, #31
 800890a:	bf48      	it	mi
 800890c:	f043 0320 	orrmi.w	r3, r3, #32
 8008910:	6029      	str	r1, [r5, #0]
 8008912:	bf48      	it	mi
 8008914:	6023      	strmi	r3, [r4, #0]
 8008916:	b91e      	cbnz	r6, 8008920 <_printf_i+0x1a4>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	f023 0320 	bic.w	r3, r3, #32
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	2310      	movs	r3, #16
 8008922:	e7a7      	b.n	8008874 <_printf_i+0xf8>
 8008924:	4824      	ldr	r0, [pc, #144]	; (80089b8 <_printf_i+0x23c>)
 8008926:	e7e4      	b.n	80088f2 <_printf_i+0x176>
 8008928:	4615      	mov	r5, r2
 800892a:	e7bd      	b.n	80088a8 <_printf_i+0x12c>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6826      	ldr	r6, [r4, #0]
 8008930:	6961      	ldr	r1, [r4, #20]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6028      	str	r0, [r5, #0]
 8008936:	0635      	lsls	r5, r6, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1c4>
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1ca>
 8008940:	0670      	lsls	r0, r6, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1c0>
 8008944:	8019      	strh	r1, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4615      	mov	r5, r2
 800894c:	e7bc      	b.n	80088c8 <_printf_i+0x14c>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4628      	mov	r0, r5
 800895c:	f7f7 fc60 	bl	8000220 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1ea>
 8008962:	1b40      	subs	r0, r0, r5
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	e7aa      	b.n	80088c8 <_printf_i+0x14c>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	462a      	mov	r2, r5
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ad      	beq.n	80088dc <_printf_i+0x160>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x232>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a6      	b.n	80088e0 <_printf_i+0x164>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09d      	beq.n	80088dc <_printf_i+0x160>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x216>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x20a>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x226>
 80089b6:	bf00      	nop
 80089b8:	0800908d 	.word	0x0800908d
 80089bc:	0800909e 	.word	0x0800909e

080089c0 <_scanf_chars>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4615      	mov	r5, r2
 80089c6:	688a      	ldr	r2, [r1, #8]
 80089c8:	4680      	mov	r8, r0
 80089ca:	460c      	mov	r4, r1
 80089cc:	b932      	cbnz	r2, 80089dc <_scanf_chars+0x1c>
 80089ce:	698a      	ldr	r2, [r1, #24]
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	bf0c      	ite	eq
 80089d4:	2201      	moveq	r2, #1
 80089d6:	f04f 32ff 	movne.w	r2, #4294967295
 80089da:	608a      	str	r2, [r1, #8]
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008a70 <_scanf_chars+0xb0>
 80089e2:	06d1      	lsls	r1, r2, #27
 80089e4:	bf5f      	itttt	pl
 80089e6:	681a      	ldrpl	r2, [r3, #0]
 80089e8:	1d11      	addpl	r1, r2, #4
 80089ea:	6019      	strpl	r1, [r3, #0]
 80089ec:	6816      	ldrpl	r6, [r2, #0]
 80089ee:	2700      	movs	r7, #0
 80089f0:	69a0      	ldr	r0, [r4, #24]
 80089f2:	b188      	cbz	r0, 8008a18 <_scanf_chars+0x58>
 80089f4:	2801      	cmp	r0, #1
 80089f6:	d107      	bne.n	8008a08 <_scanf_chars+0x48>
 80089f8:	682a      	ldr	r2, [r5, #0]
 80089fa:	7811      	ldrb	r1, [r2, #0]
 80089fc:	6962      	ldr	r2, [r4, #20]
 80089fe:	5c52      	ldrb	r2, [r2, r1]
 8008a00:	b952      	cbnz	r2, 8008a18 <_scanf_chars+0x58>
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d031      	beq.n	8008a6a <_scanf_chars+0xaa>
 8008a06:	e022      	b.n	8008a4e <_scanf_chars+0x8e>
 8008a08:	2802      	cmp	r0, #2
 8008a0a:	d120      	bne.n	8008a4e <_scanf_chars+0x8e>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	d41a      	bmi.n	8008a4e <_scanf_chars+0x8e>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	06da      	lsls	r2, r3, #27
 8008a1c:	bf5e      	ittt	pl
 8008a1e:	682b      	ldrpl	r3, [r5, #0]
 8008a20:	781b      	ldrbpl	r3, [r3, #0]
 8008a22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a26:	682a      	ldr	r2, [r5, #0]
 8008a28:	686b      	ldr	r3, [r5, #4]
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	602a      	str	r2, [r5, #0]
 8008a2e:	68a2      	ldr	r2, [r4, #8]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	3a01      	subs	r2, #1
 8008a34:	606b      	str	r3, [r5, #4]
 8008a36:	3701      	adds	r7, #1
 8008a38:	60a2      	str	r2, [r4, #8]
 8008a3a:	b142      	cbz	r2, 8008a4e <_scanf_chars+0x8e>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	dcd7      	bgt.n	80089f0 <_scanf_chars+0x30>
 8008a40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a44:	4629      	mov	r1, r5
 8008a46:	4640      	mov	r0, r8
 8008a48:	4798      	blx	r3
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0d0      	beq.n	80089f0 <_scanf_chars+0x30>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f013 0310 	ands.w	r3, r3, #16
 8008a54:	d105      	bne.n	8008a62 <_scanf_chars+0xa2>
 8008a56:	68e2      	ldr	r2, [r4, #12]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	60e2      	str	r2, [r4, #12]
 8008a5c:	69a2      	ldr	r2, [r4, #24]
 8008a5e:	b102      	cbz	r2, 8008a62 <_scanf_chars+0xa2>
 8008a60:	7033      	strb	r3, [r6, #0]
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	443b      	add	r3, r7
 8008a66:	6123      	str	r3, [r4, #16]
 8008a68:	2000      	movs	r0, #0
 8008a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	bf00      	nop
 8008a70:	080090cb 	.word	0x080090cb

08008a74 <_scanf_i>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	4698      	mov	r8, r3
 8008a7a:	4b74      	ldr	r3, [pc, #464]	; (8008c4c <_scanf_i+0x1d8>)
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	4682      	mov	sl, r0
 8008a80:	4616      	mov	r6, r2
 8008a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a86:	b087      	sub	sp, #28
 8008a88:	ab03      	add	r3, sp, #12
 8008a8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008a8e:	4b70      	ldr	r3, [pc, #448]	; (8008c50 <_scanf_i+0x1dc>)
 8008a90:	69a1      	ldr	r1, [r4, #24]
 8008a92:	4a70      	ldr	r2, [pc, #448]	; (8008c54 <_scanf_i+0x1e0>)
 8008a94:	2903      	cmp	r1, #3
 8008a96:	bf18      	it	ne
 8008a98:	461a      	movne	r2, r3
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	9201      	str	r2, [sp, #4]
 8008a9e:	1e5a      	subs	r2, r3, #1
 8008aa0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008aa4:	bf88      	it	hi
 8008aa6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008aaa:	4627      	mov	r7, r4
 8008aac:	bf82      	ittt	hi
 8008aae:	eb03 0905 	addhi.w	r9, r3, r5
 8008ab2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ab6:	60a3      	strhi	r3, [r4, #8]
 8008ab8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008abc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008ac0:	bf98      	it	ls
 8008ac2:	f04f 0900 	movls.w	r9, #0
 8008ac6:	6023      	str	r3, [r4, #0]
 8008ac8:	463d      	mov	r5, r7
 8008aca:	f04f 0b00 	mov.w	fp, #0
 8008ace:	6831      	ldr	r1, [r6, #0]
 8008ad0:	ab03      	add	r3, sp, #12
 8008ad2:	7809      	ldrb	r1, [r1, #0]
 8008ad4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	f7f7 fba1 	bl	8000220 <memchr>
 8008ade:	b328      	cbz	r0, 8008b2c <_scanf_i+0xb8>
 8008ae0:	f1bb 0f01 	cmp.w	fp, #1
 8008ae4:	d159      	bne.n	8008b9a <_scanf_i+0x126>
 8008ae6:	6862      	ldr	r2, [r4, #4]
 8008ae8:	b92a      	cbnz	r2, 8008af6 <_scanf_i+0x82>
 8008aea:	6822      	ldr	r2, [r4, #0]
 8008aec:	2308      	movs	r3, #8
 8008aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6022      	str	r2, [r4, #0]
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008afc:	6022      	str	r2, [r4, #0]
 8008afe:	68a2      	ldr	r2, [r4, #8]
 8008b00:	1e51      	subs	r1, r2, #1
 8008b02:	60a1      	str	r1, [r4, #8]
 8008b04:	b192      	cbz	r2, 8008b2c <_scanf_i+0xb8>
 8008b06:	6832      	ldr	r2, [r6, #0]
 8008b08:	1c51      	adds	r1, r2, #1
 8008b0a:	6031      	str	r1, [r6, #0]
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	f805 2b01 	strb.w	r2, [r5], #1
 8008b12:	6872      	ldr	r2, [r6, #4]
 8008b14:	3a01      	subs	r2, #1
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	6072      	str	r2, [r6, #4]
 8008b1a:	dc07      	bgt.n	8008b2c <_scanf_i+0xb8>
 8008b1c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008b20:	4631      	mov	r1, r6
 8008b22:	4650      	mov	r0, sl
 8008b24:	4790      	blx	r2
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f040 8085 	bne.w	8008c36 <_scanf_i+0x1c2>
 8008b2c:	f10b 0b01 	add.w	fp, fp, #1
 8008b30:	f1bb 0f03 	cmp.w	fp, #3
 8008b34:	d1cb      	bne.n	8008ace <_scanf_i+0x5a>
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	b90b      	cbnz	r3, 8008b3e <_scanf_i+0xca>
 8008b3a:	230a      	movs	r3, #10
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	6863      	ldr	r3, [r4, #4]
 8008b40:	4945      	ldr	r1, [pc, #276]	; (8008c58 <_scanf_i+0x1e4>)
 8008b42:	6960      	ldr	r0, [r4, #20]
 8008b44:	1ac9      	subs	r1, r1, r3
 8008b46:	f000 f889 	bl	8008c5c <__sccl>
 8008b4a:	f04f 0b00 	mov.w	fp, #0
 8008b4e:	68a3      	ldr	r3, [r4, #8]
 8008b50:	6822      	ldr	r2, [r4, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d03d      	beq.n	8008bd2 <_scanf_i+0x15e>
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	6960      	ldr	r0, [r4, #20]
 8008b5a:	f891 c000 	ldrb.w	ip, [r1]
 8008b5e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d035      	beq.n	8008bd2 <_scanf_i+0x15e>
 8008b66:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008b6a:	d124      	bne.n	8008bb6 <_scanf_i+0x142>
 8008b6c:	0510      	lsls	r0, r2, #20
 8008b6e:	d522      	bpl.n	8008bb6 <_scanf_i+0x142>
 8008b70:	f10b 0b01 	add.w	fp, fp, #1
 8008b74:	f1b9 0f00 	cmp.w	r9, #0
 8008b78:	d003      	beq.n	8008b82 <_scanf_i+0x10e>
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008b80:	60a3      	str	r3, [r4, #8]
 8008b82:	6873      	ldr	r3, [r6, #4]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	6073      	str	r3, [r6, #4]
 8008b8a:	dd1b      	ble.n	8008bc4 <_scanf_i+0x150>
 8008b8c:	6833      	ldr	r3, [r6, #0]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	6033      	str	r3, [r6, #0]
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7d9      	b.n	8008b4e <_scanf_i+0xda>
 8008b9a:	f1bb 0f02 	cmp.w	fp, #2
 8008b9e:	d1ae      	bne.n	8008afe <_scanf_i+0x8a>
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008ba6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008baa:	d1bf      	bne.n	8008b2c <_scanf_i+0xb8>
 8008bac:	2310      	movs	r3, #16
 8008bae:	6063      	str	r3, [r4, #4]
 8008bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bb4:	e7a2      	b.n	8008afc <_scanf_i+0x88>
 8008bb6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008bba:	6022      	str	r2, [r4, #0]
 8008bbc:	780b      	ldrb	r3, [r1, #0]
 8008bbe:	f805 3b01 	strb.w	r3, [r5], #1
 8008bc2:	e7de      	b.n	8008b82 <_scanf_i+0x10e>
 8008bc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4650      	mov	r0, sl
 8008bcc:	4798      	blx	r3
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d0df      	beq.n	8008b92 <_scanf_i+0x11e>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	05d9      	lsls	r1, r3, #23
 8008bd6:	d50d      	bpl.n	8008bf4 <_scanf_i+0x180>
 8008bd8:	42bd      	cmp	r5, r7
 8008bda:	d909      	bls.n	8008bf0 <_scanf_i+0x17c>
 8008bdc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008be4:	4632      	mov	r2, r6
 8008be6:	4650      	mov	r0, sl
 8008be8:	4798      	blx	r3
 8008bea:	f105 39ff 	add.w	r9, r5, #4294967295
 8008bee:	464d      	mov	r5, r9
 8008bf0:	42bd      	cmp	r5, r7
 8008bf2:	d028      	beq.n	8008c46 <_scanf_i+0x1d2>
 8008bf4:	6822      	ldr	r2, [r4, #0]
 8008bf6:	f012 0210 	ands.w	r2, r2, #16
 8008bfa:	d113      	bne.n	8008c24 <_scanf_i+0x1b0>
 8008bfc:	702a      	strb	r2, [r5, #0]
 8008bfe:	6863      	ldr	r3, [r4, #4]
 8008c00:	9e01      	ldr	r6, [sp, #4]
 8008c02:	4639      	mov	r1, r7
 8008c04:	4650      	mov	r0, sl
 8008c06:	47b0      	blx	r6
 8008c08:	f8d8 3000 	ldr.w	r3, [r8]
 8008c0c:	6821      	ldr	r1, [r4, #0]
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	f8c8 2000 	str.w	r2, [r8]
 8008c14:	f011 0f20 	tst.w	r1, #32
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	d00f      	beq.n	8008c3c <_scanf_i+0x1c8>
 8008c1c:	6018      	str	r0, [r3, #0]
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	60e3      	str	r3, [r4, #12]
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	1bed      	subs	r5, r5, r7
 8008c28:	445d      	add	r5, fp
 8008c2a:	442b      	add	r3, r5
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	2000      	movs	r0, #0
 8008c30:	b007      	add	sp, #28
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	f04f 0b00 	mov.w	fp, #0
 8008c3a:	e7ca      	b.n	8008bd2 <_scanf_i+0x15e>
 8008c3c:	07ca      	lsls	r2, r1, #31
 8008c3e:	bf4c      	ite	mi
 8008c40:	8018      	strhmi	r0, [r3, #0]
 8008c42:	6018      	strpl	r0, [r3, #0]
 8008c44:	e7eb      	b.n	8008c1e <_scanf_i+0x1aa>
 8008c46:	2001      	movs	r0, #1
 8008c48:	e7f2      	b.n	8008c30 <_scanf_i+0x1bc>
 8008c4a:	bf00      	nop
 8008c4c:	08009058 	.word	0x08009058
 8008c50:	08009001 	.word	0x08009001
 8008c54:	08008f19 	.word	0x08008f19
 8008c58:	080090bf 	.word	0x080090bf

08008c5c <__sccl>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	780b      	ldrb	r3, [r1, #0]
 8008c60:	4604      	mov	r4, r0
 8008c62:	2b5e      	cmp	r3, #94	; 0x5e
 8008c64:	bf0b      	itete	eq
 8008c66:	784b      	ldrbeq	r3, [r1, #1]
 8008c68:	1c4a      	addne	r2, r1, #1
 8008c6a:	1c8a      	addeq	r2, r1, #2
 8008c6c:	2100      	movne	r1, #0
 8008c6e:	bf08      	it	eq
 8008c70:	2101      	moveq	r1, #1
 8008c72:	3801      	subs	r0, #1
 8008c74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008c78:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008c7c:	42a8      	cmp	r0, r5
 8008c7e:	d1fb      	bne.n	8008c78 <__sccl+0x1c>
 8008c80:	b90b      	cbnz	r3, 8008c86 <__sccl+0x2a>
 8008c82:	1e50      	subs	r0, r2, #1
 8008c84:	bd70      	pop	{r4, r5, r6, pc}
 8008c86:	f081 0101 	eor.w	r1, r1, #1
 8008c8a:	54e1      	strb	r1, [r4, r3]
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4602      	mov	r2, r0
 8008c90:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008c94:	2d2d      	cmp	r5, #45	; 0x2d
 8008c96:	d005      	beq.n	8008ca4 <__sccl+0x48>
 8008c98:	2d5d      	cmp	r5, #93	; 0x5d
 8008c9a:	d016      	beq.n	8008cca <__sccl+0x6e>
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	d0f1      	beq.n	8008c84 <__sccl+0x28>
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	e7f2      	b.n	8008c8a <__sccl+0x2e>
 8008ca4:	7846      	ldrb	r6, [r0, #1]
 8008ca6:	2e5d      	cmp	r6, #93	; 0x5d
 8008ca8:	d0fa      	beq.n	8008ca0 <__sccl+0x44>
 8008caa:	42b3      	cmp	r3, r6
 8008cac:	dcf8      	bgt.n	8008ca0 <__sccl+0x44>
 8008cae:	3002      	adds	r0, #2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	3201      	adds	r2, #1
 8008cb4:	4296      	cmp	r6, r2
 8008cb6:	54a1      	strb	r1, [r4, r2]
 8008cb8:	dcfb      	bgt.n	8008cb2 <__sccl+0x56>
 8008cba:	1af2      	subs	r2, r6, r3
 8008cbc:	3a01      	subs	r2, #1
 8008cbe:	1c5d      	adds	r5, r3, #1
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	bfa8      	it	ge
 8008cc4:	2200      	movge	r2, #0
 8008cc6:	18ab      	adds	r3, r5, r2
 8008cc8:	e7e1      	b.n	8008c8e <__sccl+0x32>
 8008cca:	4610      	mov	r0, r2
 8008ccc:	e7da      	b.n	8008c84 <__sccl+0x28>

08008cce <__submore>:
 8008cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	d11d      	bne.n	8008d1a <__submore+0x4c>
 8008cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ce2:	f7ff f927 	bl	8007f34 <_malloc_r>
 8008ce6:	b918      	cbnz	r0, 8008cf0 <__submore+0x22>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cf6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008cfa:	6360      	str	r0, [r4, #52]	; 0x34
 8008cfc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008d00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d04:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008d08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d0c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008d10:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008d14:	6020      	str	r0, [r4, #0]
 8008d16:	2000      	movs	r0, #0
 8008d18:	e7e8      	b.n	8008cec <__submore+0x1e>
 8008d1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008d1c:	0077      	lsls	r7, r6, #1
 8008d1e:	463a      	mov	r2, r7
 8008d20:	f000 f848 	bl	8008db4 <_realloc_r>
 8008d24:	4605      	mov	r5, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0de      	beq.n	8008ce8 <__submore+0x1a>
 8008d2a:	eb00 0806 	add.w	r8, r0, r6
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4632      	mov	r2, r6
 8008d32:	4640      	mov	r0, r8
 8008d34:	f000 f830 	bl	8008d98 <memcpy>
 8008d38:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008d3c:	f8c4 8000 	str.w	r8, [r4]
 8008d40:	e7e9      	b.n	8008d16 <__submore+0x48>

08008d42 <memmove>:
 8008d42:	4288      	cmp	r0, r1
 8008d44:	b510      	push	{r4, lr}
 8008d46:	eb01 0402 	add.w	r4, r1, r2
 8008d4a:	d902      	bls.n	8008d52 <memmove+0x10>
 8008d4c:	4284      	cmp	r4, r0
 8008d4e:	4623      	mov	r3, r4
 8008d50:	d807      	bhi.n	8008d62 <memmove+0x20>
 8008d52:	1e43      	subs	r3, r0, #1
 8008d54:	42a1      	cmp	r1, r4
 8008d56:	d008      	beq.n	8008d6a <memmove+0x28>
 8008d58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d60:	e7f8      	b.n	8008d54 <memmove+0x12>
 8008d62:	4402      	add	r2, r0
 8008d64:	4601      	mov	r1, r0
 8008d66:	428a      	cmp	r2, r1
 8008d68:	d100      	bne.n	8008d6c <memmove+0x2a>
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d74:	e7f7      	b.n	8008d66 <memmove+0x24>
	...

08008d78 <_sbrk_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	; (8008d94 <_sbrk_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7f8 fa14 	bl	80011b0 <_sbrk>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_sbrk_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_sbrk_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20000c98 	.word	0x20000c98

08008d98 <memcpy>:
 8008d98:	440a      	add	r2, r1
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008da0:	d100      	bne.n	8008da4 <memcpy+0xc>
 8008da2:	4770      	bx	lr
 8008da4:	b510      	push	{r4, lr}
 8008da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dae:	4291      	cmp	r1, r2
 8008db0:	d1f9      	bne.n	8008da6 <memcpy+0xe>
 8008db2:	bd10      	pop	{r4, pc}

08008db4 <_realloc_r>:
 8008db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db8:	4680      	mov	r8, r0
 8008dba:	4614      	mov	r4, r2
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	b921      	cbnz	r1, 8008dca <_realloc_r+0x16>
 8008dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	f7ff b8b5 	b.w	8007f34 <_malloc_r>
 8008dca:	b92a      	cbnz	r2, 8008dd8 <_realloc_r+0x24>
 8008dcc:	f7ff f846 	bl	8007e5c <_free_r>
 8008dd0:	4625      	mov	r5, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	f000 f914 	bl	8009004 <_malloc_usable_size_r>
 8008ddc:	4284      	cmp	r4, r0
 8008dde:	4607      	mov	r7, r0
 8008de0:	d802      	bhi.n	8008de8 <_realloc_r+0x34>
 8008de2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008de6:	d812      	bhi.n	8008e0e <_realloc_r+0x5a>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4640      	mov	r0, r8
 8008dec:	f7ff f8a2 	bl	8007f34 <_malloc_r>
 8008df0:	4605      	mov	r5, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0ed      	beq.n	8008dd2 <_realloc_r+0x1e>
 8008df6:	42bc      	cmp	r4, r7
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	bf28      	it	cs
 8008dfe:	463a      	movcs	r2, r7
 8008e00:	f7ff ffca 	bl	8008d98 <memcpy>
 8008e04:	4631      	mov	r1, r6
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7ff f828 	bl	8007e5c <_free_r>
 8008e0c:	e7e1      	b.n	8008dd2 <_realloc_r+0x1e>
 8008e0e:	4635      	mov	r5, r6
 8008e10:	e7df      	b.n	8008dd2 <_realloc_r+0x1e>
	...

08008e14 <_strtol_l.constprop.0>:
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1a:	d001      	beq.n	8008e20 <_strtol_l.constprop.0+0xc>
 8008e1c:	2b24      	cmp	r3, #36	; 0x24
 8008e1e:	d906      	bls.n	8008e2e <_strtol_l.constprop.0+0x1a>
 8008e20:	f7fe fff0 	bl	8007e04 <__errno>
 8008e24:	2316      	movs	r3, #22
 8008e26:	6003      	str	r3, [r0, #0]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f14 <_strtol_l.constprop.0+0x100>
 8008e32:	460d      	mov	r5, r1
 8008e34:	462e      	mov	r6, r5
 8008e36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008e3e:	f017 0708 	ands.w	r7, r7, #8
 8008e42:	d1f7      	bne.n	8008e34 <_strtol_l.constprop.0+0x20>
 8008e44:	2c2d      	cmp	r4, #45	; 0x2d
 8008e46:	d132      	bne.n	8008eae <_strtol_l.constprop.0+0x9a>
 8008e48:	782c      	ldrb	r4, [r5, #0]
 8008e4a:	2701      	movs	r7, #1
 8008e4c:	1cb5      	adds	r5, r6, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d05b      	beq.n	8008f0a <_strtol_l.constprop.0+0xf6>
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d109      	bne.n	8008e6a <_strtol_l.constprop.0+0x56>
 8008e56:	2c30      	cmp	r4, #48	; 0x30
 8008e58:	d107      	bne.n	8008e6a <_strtol_l.constprop.0+0x56>
 8008e5a:	782c      	ldrb	r4, [r5, #0]
 8008e5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e60:	2c58      	cmp	r4, #88	; 0x58
 8008e62:	d14d      	bne.n	8008f00 <_strtol_l.constprop.0+0xec>
 8008e64:	786c      	ldrb	r4, [r5, #1]
 8008e66:	2310      	movs	r3, #16
 8008e68:	3502      	adds	r5, #2
 8008e6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e72:	f04f 0e00 	mov.w	lr, #0
 8008e76:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e7a:	4676      	mov	r6, lr
 8008e7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e84:	f1bc 0f09 	cmp.w	ip, #9
 8008e88:	d816      	bhi.n	8008eb8 <_strtol_l.constprop.0+0xa4>
 8008e8a:	4664      	mov	r4, ip
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	dd24      	ble.n	8008eda <_strtol_l.constprop.0+0xc6>
 8008e90:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e94:	d008      	beq.n	8008ea8 <_strtol_l.constprop.0+0x94>
 8008e96:	45b1      	cmp	r9, r6
 8008e98:	d31c      	bcc.n	8008ed4 <_strtol_l.constprop.0+0xc0>
 8008e9a:	d101      	bne.n	8008ea0 <_strtol_l.constprop.0+0x8c>
 8008e9c:	45a2      	cmp	sl, r4
 8008e9e:	db19      	blt.n	8008ed4 <_strtol_l.constprop.0+0xc0>
 8008ea0:	fb06 4603 	mla	r6, r6, r3, r4
 8008ea4:	f04f 0e01 	mov.w	lr, #1
 8008ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eac:	e7e8      	b.n	8008e80 <_strtol_l.constprop.0+0x6c>
 8008eae:	2c2b      	cmp	r4, #43	; 0x2b
 8008eb0:	bf04      	itt	eq
 8008eb2:	782c      	ldrbeq	r4, [r5, #0]
 8008eb4:	1cb5      	addeq	r5, r6, #2
 8008eb6:	e7ca      	b.n	8008e4e <_strtol_l.constprop.0+0x3a>
 8008eb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008ebc:	f1bc 0f19 	cmp.w	ip, #25
 8008ec0:	d801      	bhi.n	8008ec6 <_strtol_l.constprop.0+0xb2>
 8008ec2:	3c37      	subs	r4, #55	; 0x37
 8008ec4:	e7e2      	b.n	8008e8c <_strtol_l.constprop.0+0x78>
 8008ec6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008eca:	f1bc 0f19 	cmp.w	ip, #25
 8008ece:	d804      	bhi.n	8008eda <_strtol_l.constprop.0+0xc6>
 8008ed0:	3c57      	subs	r4, #87	; 0x57
 8008ed2:	e7db      	b.n	8008e8c <_strtol_l.constprop.0+0x78>
 8008ed4:	f04f 3eff 	mov.w	lr, #4294967295
 8008ed8:	e7e6      	b.n	8008ea8 <_strtol_l.constprop.0+0x94>
 8008eda:	f1be 3fff 	cmp.w	lr, #4294967295
 8008ede:	d105      	bne.n	8008eec <_strtol_l.constprop.0+0xd8>
 8008ee0:	2322      	movs	r3, #34	; 0x22
 8008ee2:	6003      	str	r3, [r0, #0]
 8008ee4:	4646      	mov	r6, r8
 8008ee6:	b942      	cbnz	r2, 8008efa <_strtol_l.constprop.0+0xe6>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	e79e      	b.n	8008e2a <_strtol_l.constprop.0+0x16>
 8008eec:	b107      	cbz	r7, 8008ef0 <_strtol_l.constprop.0+0xdc>
 8008eee:	4276      	negs	r6, r6
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	d0f9      	beq.n	8008ee8 <_strtol_l.constprop.0+0xd4>
 8008ef4:	f1be 0f00 	cmp.w	lr, #0
 8008ef8:	d000      	beq.n	8008efc <_strtol_l.constprop.0+0xe8>
 8008efa:	1e69      	subs	r1, r5, #1
 8008efc:	6011      	str	r1, [r2, #0]
 8008efe:	e7f3      	b.n	8008ee8 <_strtol_l.constprop.0+0xd4>
 8008f00:	2430      	movs	r4, #48	; 0x30
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1b1      	bne.n	8008e6a <_strtol_l.constprop.0+0x56>
 8008f06:	2308      	movs	r3, #8
 8008f08:	e7af      	b.n	8008e6a <_strtol_l.constprop.0+0x56>
 8008f0a:	2c30      	cmp	r4, #48	; 0x30
 8008f0c:	d0a5      	beq.n	8008e5a <_strtol_l.constprop.0+0x46>
 8008f0e:	230a      	movs	r3, #10
 8008f10:	e7ab      	b.n	8008e6a <_strtol_l.constprop.0+0x56>
 8008f12:	bf00      	nop
 8008f14:	080090cb 	.word	0x080090cb

08008f18 <_strtol_r>:
 8008f18:	f7ff bf7c 	b.w	8008e14 <_strtol_l.constprop.0>

08008f1c <_strtoul_l.constprop.0>:
 8008f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f20:	4f36      	ldr	r7, [pc, #216]	; (8008ffc <_strtoul_l.constprop.0+0xe0>)
 8008f22:	4686      	mov	lr, r0
 8008f24:	460d      	mov	r5, r1
 8008f26:	4628      	mov	r0, r5
 8008f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f2c:	5d3e      	ldrb	r6, [r7, r4]
 8008f2e:	f016 0608 	ands.w	r6, r6, #8
 8008f32:	d1f8      	bne.n	8008f26 <_strtoul_l.constprop.0+0xa>
 8008f34:	2c2d      	cmp	r4, #45	; 0x2d
 8008f36:	d130      	bne.n	8008f9a <_strtoul_l.constprop.0+0x7e>
 8008f38:	782c      	ldrb	r4, [r5, #0]
 8008f3a:	2601      	movs	r6, #1
 8008f3c:	1c85      	adds	r5, r0, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d057      	beq.n	8008ff2 <_strtoul_l.constprop.0+0xd6>
 8008f42:	2b10      	cmp	r3, #16
 8008f44:	d109      	bne.n	8008f5a <_strtoul_l.constprop.0+0x3e>
 8008f46:	2c30      	cmp	r4, #48	; 0x30
 8008f48:	d107      	bne.n	8008f5a <_strtoul_l.constprop.0+0x3e>
 8008f4a:	7828      	ldrb	r0, [r5, #0]
 8008f4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008f50:	2858      	cmp	r0, #88	; 0x58
 8008f52:	d149      	bne.n	8008fe8 <_strtoul_l.constprop.0+0xcc>
 8008f54:	786c      	ldrb	r4, [r5, #1]
 8008f56:	2310      	movs	r3, #16
 8008f58:	3502      	adds	r5, #2
 8008f5a:	f04f 38ff 	mov.w	r8, #4294967295
 8008f5e:	2700      	movs	r7, #0
 8008f60:	fbb8 f8f3 	udiv	r8, r8, r3
 8008f64:	fb03 f908 	mul.w	r9, r3, r8
 8008f68:	ea6f 0909 	mvn.w	r9, r9
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008f72:	f1bc 0f09 	cmp.w	ip, #9
 8008f76:	d815      	bhi.n	8008fa4 <_strtoul_l.constprop.0+0x88>
 8008f78:	4664      	mov	r4, ip
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	dd23      	ble.n	8008fc6 <_strtoul_l.constprop.0+0xaa>
 8008f7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008f82:	d007      	beq.n	8008f94 <_strtoul_l.constprop.0+0x78>
 8008f84:	4580      	cmp	r8, r0
 8008f86:	d31b      	bcc.n	8008fc0 <_strtoul_l.constprop.0+0xa4>
 8008f88:	d101      	bne.n	8008f8e <_strtoul_l.constprop.0+0x72>
 8008f8a:	45a1      	cmp	r9, r4
 8008f8c:	db18      	blt.n	8008fc0 <_strtoul_l.constprop.0+0xa4>
 8008f8e:	fb00 4003 	mla	r0, r0, r3, r4
 8008f92:	2701      	movs	r7, #1
 8008f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f98:	e7e9      	b.n	8008f6e <_strtoul_l.constprop.0+0x52>
 8008f9a:	2c2b      	cmp	r4, #43	; 0x2b
 8008f9c:	bf04      	itt	eq
 8008f9e:	782c      	ldrbeq	r4, [r5, #0]
 8008fa0:	1c85      	addeq	r5, r0, #2
 8008fa2:	e7cc      	b.n	8008f3e <_strtoul_l.constprop.0+0x22>
 8008fa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008fa8:	f1bc 0f19 	cmp.w	ip, #25
 8008fac:	d801      	bhi.n	8008fb2 <_strtoul_l.constprop.0+0x96>
 8008fae:	3c37      	subs	r4, #55	; 0x37
 8008fb0:	e7e3      	b.n	8008f7a <_strtoul_l.constprop.0+0x5e>
 8008fb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008fb6:	f1bc 0f19 	cmp.w	ip, #25
 8008fba:	d804      	bhi.n	8008fc6 <_strtoul_l.constprop.0+0xaa>
 8008fbc:	3c57      	subs	r4, #87	; 0x57
 8008fbe:	e7dc      	b.n	8008f7a <_strtoul_l.constprop.0+0x5e>
 8008fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8008fc4:	e7e6      	b.n	8008f94 <_strtoul_l.constprop.0+0x78>
 8008fc6:	1c7b      	adds	r3, r7, #1
 8008fc8:	d106      	bne.n	8008fd8 <_strtoul_l.constprop.0+0xbc>
 8008fca:	2322      	movs	r3, #34	; 0x22
 8008fcc:	f8ce 3000 	str.w	r3, [lr]
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	b932      	cbnz	r2, 8008fe2 <_strtoul_l.constprop.0+0xc6>
 8008fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd8:	b106      	cbz	r6, 8008fdc <_strtoul_l.constprop.0+0xc0>
 8008fda:	4240      	negs	r0, r0
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d0f9      	beq.n	8008fd4 <_strtoul_l.constprop.0+0xb8>
 8008fe0:	b107      	cbz	r7, 8008fe4 <_strtoul_l.constprop.0+0xc8>
 8008fe2:	1e69      	subs	r1, r5, #1
 8008fe4:	6011      	str	r1, [r2, #0]
 8008fe6:	e7f5      	b.n	8008fd4 <_strtoul_l.constprop.0+0xb8>
 8008fe8:	2430      	movs	r4, #48	; 0x30
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1b5      	bne.n	8008f5a <_strtoul_l.constprop.0+0x3e>
 8008fee:	2308      	movs	r3, #8
 8008ff0:	e7b3      	b.n	8008f5a <_strtoul_l.constprop.0+0x3e>
 8008ff2:	2c30      	cmp	r4, #48	; 0x30
 8008ff4:	d0a9      	beq.n	8008f4a <_strtoul_l.constprop.0+0x2e>
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	e7af      	b.n	8008f5a <_strtoul_l.constprop.0+0x3e>
 8008ffa:	bf00      	nop
 8008ffc:	080090cb 	.word	0x080090cb

08009000 <_strtoul_r>:
 8009000:	f7ff bf8c 	b.w	8008f1c <_strtoul_l.constprop.0>

08009004 <_malloc_usable_size_r>:
 8009004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009008:	1f18      	subs	r0, r3, #4
 800900a:	2b00      	cmp	r3, #0
 800900c:	bfbc      	itt	lt
 800900e:	580b      	ldrlt	r3, [r1, r0]
 8009010:	18c0      	addlt	r0, r0, r3
 8009012:	4770      	bx	lr

08009014 <_init>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	bf00      	nop
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr

08009020 <_fini>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	bf00      	nop
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr
